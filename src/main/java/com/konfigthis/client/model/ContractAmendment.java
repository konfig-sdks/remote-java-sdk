/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RequestDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Contract Amendment
 */
@ApiModel(description = "Contract Amendment")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContractAmendment {
  public static final String SERIALIZED_NAME_AMENDMENT_CONTRACT_ID = "amendment_contract_id";
  @SerializedName(SERIALIZED_NAME_AMENDMENT_CONTRACT_ID)
  private String amendmentContractId;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  private Object changes;

  public static final String SERIALIZED_NAME_EMPLOYMENT_ID = "employment_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_ID)
  private String employmentId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REQUEST_DETAILS = "request_details";
  @SerializedName(SERIALIZED_NAME_REQUEST_DETAILS)
  private RequestDetails requestDetails;

  public static final String SERIALIZED_NAME_REQUESTED_BY = "requested_by";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY)
  private String requestedBy;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    SUBMITTED("submitted"),
    
    IN_REVIEW("in_review"),
    
    DONE("done"),
    
    CANCELED("canceled"),
    
    DELETED("deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBMITTED_AT = "submitted_at";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AT)
  private String submittedAt;

  public static final String SERIALIZED_NAME_ZENDESK_TICKET_URL = "zendesk_ticket_url";
  @SerializedName(SERIALIZED_NAME_ZENDESK_TICKET_URL)
  private String zendeskTicketUrl;

  public ContractAmendment() {
  }

  public ContractAmendment amendmentContractId(String amendmentContractId) {
    
    
    
    
    this.amendmentContractId = amendmentContractId;
    return this;
  }

   /**
   * Get amendmentContractId
   * @return amendmentContractId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8772a9f1-b43c-46be-a1ce-e50b6819f5ee", required = true, value = "")

  public String getAmendmentContractId() {
    return amendmentContractId;
  }


  public void setAmendmentContractId(String amendmentContractId) {
    
    
    
    this.amendmentContractId = amendmentContractId;
  }


  public ContractAmendment changes(Object changes) {
    
    
    
    
    this.changes = changes;
    return this;
  }

   /**
   * Describes all the changes requested for the contract and contract details with all their previous and current values.
   * @return changes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Describes all the changes requested for the contract and contract details with all their previous and current values.")

  public Object getChanges() {
    return changes;
  }


  public void setChanges(Object changes) {
    
    
    
    this.changes = changes;
  }


  public ContractAmendment employmentId(String employmentId) {
    
    
    
    
    this.employmentId = employmentId;
    return this;
  }

   /**
   * Get employmentId
   * @return employmentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1e74fdc2-7420-4eef-ab0a-b794cbbef4e1", required = true, value = "")

  public String getEmploymentId() {
    return employmentId;
  }


  public void setEmploymentId(String employmentId) {
    
    
    
    this.employmentId = employmentId;
  }


  public ContractAmendment id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ba310525-9282-40c9-8977-14d844bf891aX", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ContractAmendment requestDetails(RequestDetails requestDetails) {
    
    
    
    
    this.requestDetails = requestDetails;
    return this;
  }

   /**
   * Get requestDetails
   * @return requestDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public RequestDetails getRequestDetails() {
    return requestDetails;
  }


  public void setRequestDetails(RequestDetails requestDetails) {
    
    
    
    this.requestDetails = requestDetails;
  }


  public ContractAmendment requestedBy(String requestedBy) {
    
    
    
    
    this.requestedBy = requestedBy;
    return this;
  }

   /**
   * Get requestedBy
   * @return requestedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5a31f3c1-d7a7-4311-89cb-928959d3d540", required = true, value = "")

  public String getRequestedBy() {
    return requestedBy;
  }


  public void setRequestedBy(String requestedBy) {
    
    
    
    this.requestedBy = requestedBy;
  }


  public ContractAmendment status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SUBMITTED", required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ContractAmendment submittedAt(String submittedAt) {
    
    
    
    
    this.submittedAt = submittedAt;
    return this;
  }

   /**
   * Get submittedAt
   * @return submittedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2023-04-13T13:35:06Z", required = true, value = "")

  public String getSubmittedAt() {
    return submittedAt;
  }


  public void setSubmittedAt(String submittedAt) {
    
    
    
    this.submittedAt = submittedAt;
  }


  public ContractAmendment zendeskTicketUrl(String zendeskTicketUrl) {
    
    
    
    
    this.zendeskTicketUrl = zendeskTicketUrl;
    return this;
  }

   /**
   * Get zendeskTicketUrl
   * @return zendeskTicketUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://zendesk.com/ticket-23333", required = true, value = "")

  public String getZendeskTicketUrl() {
    return zendeskTicketUrl;
  }


  public void setZendeskTicketUrl(String zendeskTicketUrl) {
    
    
    
    this.zendeskTicketUrl = zendeskTicketUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractAmendment instance itself
   */
  public ContractAmendment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractAmendment contractAmendment = (ContractAmendment) o;
    return Objects.equals(this.amendmentContractId, contractAmendment.amendmentContractId) &&
        Objects.equals(this.changes, contractAmendment.changes) &&
        Objects.equals(this.employmentId, contractAmendment.employmentId) &&
        Objects.equals(this.id, contractAmendment.id) &&
        Objects.equals(this.requestDetails, contractAmendment.requestDetails) &&
        Objects.equals(this.requestedBy, contractAmendment.requestedBy) &&
        Objects.equals(this.status, contractAmendment.status) &&
        Objects.equals(this.submittedAt, contractAmendment.submittedAt) &&
        Objects.equals(this.zendeskTicketUrl, contractAmendment.zendeskTicketUrl)&&
        Objects.equals(this.additionalProperties, contractAmendment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amendmentContractId, changes, employmentId, id, requestDetails, requestedBy, status, submittedAt, zendeskTicketUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractAmendment {\n");
    sb.append("    amendmentContractId: ").append(toIndentedString(amendmentContractId)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    employmentId: ").append(toIndentedString(employmentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requestDetails: ").append(toIndentedString(requestDetails)).append("\n");
    sb.append("    requestedBy: ").append(toIndentedString(requestedBy)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submittedAt: ").append(toIndentedString(submittedAt)).append("\n");
    sb.append("    zendeskTicketUrl: ").append(toIndentedString(zendeskTicketUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amendment_contract_id");
    openapiFields.add("changes");
    openapiFields.add("employment_id");
    openapiFields.add("id");
    openapiFields.add("request_details");
    openapiFields.add("requested_by");
    openapiFields.add("status");
    openapiFields.add("submitted_at");
    openapiFields.add("zendesk_ticket_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amendment_contract_id");
    openapiRequiredFields.add("changes");
    openapiRequiredFields.add("employment_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("request_details");
    openapiRequiredFields.add("requested_by");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("submitted_at");
    openapiRequiredFields.add("zendesk_ticket_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractAmendment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractAmendment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractAmendment is not found in the empty JSON string", ContractAmendment.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractAmendment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("amendment_contract_id").isJsonNull() && !jsonObj.get("amendment_contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amendment_contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amendment_contract_id").toString()));
      }
      if (!jsonObj.get("employment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `request_details`
      RequestDetails.validateJsonObject(jsonObj.getAsJsonObject("request_details"));
      if (!jsonObj.get("requested_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requested_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requested_by").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("submitted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitted_at").toString()));
      }
      if (!jsonObj.get("zendesk_ticket_url").isJsonNull() && !jsonObj.get("zendesk_ticket_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zendesk_ticket_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zendesk_ticket_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractAmendment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractAmendment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractAmendment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractAmendment.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractAmendment>() {
           @Override
           public void write(JsonWriter out, ContractAmendment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractAmendment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractAmendment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractAmendment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractAmendment
  * @throws IOException if the JSON string is invalid with respect to ContractAmendment
  */
  public static ContractAmendment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractAmendment.class);
  }

 /**
  * Convert an instance of ContractAmendment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

