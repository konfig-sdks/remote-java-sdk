/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CostCalculatorCountryAvailability;
import com.konfigthis.client.model.Currency;
import com.konfigthis.client.model.MinimalRegion;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A supported country on Remote
 */
@ApiModel(description = "A supported country on Remote")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CostCalculatorCountryLevelRegion {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private CostCalculatorCountryAvailability availability;

  public static final String SERIALIZED_NAME_CHILD_REGIONS = "child_regions";
  @SerializedName(SERIALIZED_NAME_CHILD_REGIONS)
  private List<MinimalRegion> childRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_HAS_ADDITIONAL_FIELDS = "has_additional_fields";
  @SerializedName(SERIALIZED_NAME_HAS_ADDITIONAL_FIELDS)
  private Boolean hasAdditionalFields;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_COUNTRY_SLUG = "original_country_slug";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_COUNTRY_SLUG)
  private String originalCountrySlug;

  public static final String SERIALIZED_NAME_REGION_SLUG = "region_slug";
  @SerializedName(SERIALIZED_NAME_REGION_SLUG)
  private String regionSlug;

  public CostCalculatorCountryLevelRegion() {
  }

  public CostCalculatorCountryLevelRegion availability(CostCalculatorCountryAvailability availability) {
    
    
    
    
    this.availability = availability;
    return this;
  }

   /**
   * Get availability
   * @return availability
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CostCalculatorCountryAvailability getAvailability() {
    return availability;
  }


  public void setAvailability(CostCalculatorCountryAvailability availability) {
    
    
    
    this.availability = availability;
  }


  public CostCalculatorCountryLevelRegion childRegions(List<MinimalRegion> childRegions) {
    
    
    
    
    this.childRegions = childRegions;
    return this;
  }

  public CostCalculatorCountryLevelRegion addChildRegionsItem(MinimalRegion childRegionsItem) {
    this.childRegions.add(childRegionsItem);
    return this;
  }

   /**
   * Get childRegions
   * @return childRegions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<MinimalRegion> getChildRegions() {
    return childRegions;
  }


  public void setChildRegions(List<MinimalRegion> childRegions) {
    
    
    
    this.childRegions = childRegions;
  }


  public CostCalculatorCountryLevelRegion code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PRT", required = true, value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public CostCalculatorCountryLevelRegion currency(Currency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    
    
    
    this.currency = currency;
  }


  public CostCalculatorCountryLevelRegion hasAdditionalFields(Boolean hasAdditionalFields) {
    
    
    
    
    this.hasAdditionalFields = hasAdditionalFields;
    return this;
  }

   /**
   * Get hasAdditionalFields
   * @return hasAdditionalFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getHasAdditionalFields() {
    return hasAdditionalFields;
  }


  public void setHasAdditionalFields(Boolean hasAdditionalFields) {
    
    
    
    this.hasAdditionalFields = hasAdditionalFields;
  }


  public CostCalculatorCountryLevelRegion name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Portugal", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CostCalculatorCountryLevelRegion originalCountrySlug(String originalCountrySlug) {
    
    
    
    
    this.originalCountrySlug = originalCountrySlug;
    return this;
  }

   /**
   * Get originalCountrySlug
   * @return originalCountrySlug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "portugal-ab18d96a-a9fd-42c0-9688-24f963d8bdc1", required = true, value = "")

  public String getOriginalCountrySlug() {
    return originalCountrySlug;
  }


  public void setOriginalCountrySlug(String originalCountrySlug) {
    
    
    
    this.originalCountrySlug = originalCountrySlug;
  }


  public CostCalculatorCountryLevelRegion regionSlug(String regionSlug) {
    
    
    
    
    this.regionSlug = regionSlug;
    return this;
  }

   /**
   * Get regionSlug
   * @return regionSlug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "663e0b79-c893-45ff-a1b2-f6dcabc098b5", required = true, value = "")

  public String getRegionSlug() {
    return regionSlug;
  }


  public void setRegionSlug(String regionSlug) {
    
    
    
    this.regionSlug = regionSlug;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CostCalculatorCountryLevelRegion instance itself
   */
  public CostCalculatorCountryLevelRegion putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostCalculatorCountryLevelRegion costCalculatorCountryLevelRegion = (CostCalculatorCountryLevelRegion) o;
    return Objects.equals(this.availability, costCalculatorCountryLevelRegion.availability) &&
        Objects.equals(this.childRegions, costCalculatorCountryLevelRegion.childRegions) &&
        Objects.equals(this.code, costCalculatorCountryLevelRegion.code) &&
        Objects.equals(this.currency, costCalculatorCountryLevelRegion.currency) &&
        Objects.equals(this.hasAdditionalFields, costCalculatorCountryLevelRegion.hasAdditionalFields) &&
        Objects.equals(this.name, costCalculatorCountryLevelRegion.name) &&
        Objects.equals(this.originalCountrySlug, costCalculatorCountryLevelRegion.originalCountrySlug) &&
        Objects.equals(this.regionSlug, costCalculatorCountryLevelRegion.regionSlug)&&
        Objects.equals(this.additionalProperties, costCalculatorCountryLevelRegion.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, childRegions, code, currency, hasAdditionalFields, name, originalCountrySlug, regionSlug, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostCalculatorCountryLevelRegion {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    childRegions: ").append(toIndentedString(childRegions)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    hasAdditionalFields: ").append(toIndentedString(hasAdditionalFields)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalCountrySlug: ").append(toIndentedString(originalCountrySlug)).append("\n");
    sb.append("    regionSlug: ").append(toIndentedString(regionSlug)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("child_regions");
    openapiFields.add("code");
    openapiFields.add("currency");
    openapiFields.add("has_additional_fields");
    openapiFields.add("name");
    openapiFields.add("original_country_slug");
    openapiFields.add("region_slug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availability");
    openapiRequiredFields.add("child_regions");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("original_country_slug");
    openapiRequiredFields.add("region_slug");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CostCalculatorCountryLevelRegion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CostCalculatorCountryLevelRegion.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostCalculatorCountryLevelRegion is not found in the empty JSON string", CostCalculatorCountryLevelRegion.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CostCalculatorCountryLevelRegion.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("child_regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `child_regions` to be an array in the JSON string but got `%s`", jsonObj.get("child_regions").toString()));
      }

      JsonArray jsonArraychildRegions = jsonObj.getAsJsonArray("child_regions");
      // validate the required field `child_regions` (array)
      for (int i = 0; i < jsonArraychildRegions.size(); i++) {
        MinimalRegion.validateJsonObject(jsonArraychildRegions.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `currency`
      Currency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("original_country_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_country_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_country_slug").toString()));
      }
      if (!jsonObj.get("region_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostCalculatorCountryLevelRegion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostCalculatorCountryLevelRegion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostCalculatorCountryLevelRegion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostCalculatorCountryLevelRegion.class));

       return (TypeAdapter<T>) new TypeAdapter<CostCalculatorCountryLevelRegion>() {
           @Override
           public void write(JsonWriter out, CostCalculatorCountryLevelRegion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CostCalculatorCountryLevelRegion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CostCalculatorCountryLevelRegion instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CostCalculatorCountryLevelRegion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CostCalculatorCountryLevelRegion
  * @throws IOException if the JSON string is invalid with respect to CostCalculatorCountryLevelRegion
  */
  public static CostCalculatorCountryLevelRegion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostCalculatorCountryLevelRegion.class);
  }

 /**
  * Convert an instance of CostCalculatorCountryLevelRegion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

