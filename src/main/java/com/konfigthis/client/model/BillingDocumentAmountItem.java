/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BillingDocumentAmountItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BillingDocumentAmountItem {
  public static final String SERIALIZED_NAME_BILLING_DOCUMENT_AMOUNT = "billing_document_amount";
  @SerializedName(SERIALIZED_NAME_BILLING_DOCUMENT_AMOUNT)
  private Integer billingDocumentAmount;

  public static final String SERIALIZED_NAME_BILLING_DOCUMENT_CURRENCY = "billing_document_currency";
  @SerializedName(SERIALIZED_NAME_BILLING_DOCUMENT_CURRENCY)
  private String billingDocumentCurrency;

  public static final String SERIALIZED_NAME_EMPLOYMENT_ID = "employment_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_ID)
  private String employmentId;

  public static final String SERIALIZED_NAME_SOURCE_AMOUNT = "source_amount";
  @SerializedName(SERIALIZED_NAME_SOURCE_AMOUNT)
  private Integer sourceAmount;

  public static final String SERIALIZED_NAME_SOURCE_CURRENCY = "source_currency";
  @SerializedName(SERIALIZED_NAME_SOURCE_CURRENCY)
  private String sourceCurrency;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public BillingDocumentAmountItem() {
  }

  public BillingDocumentAmountItem billingDocumentAmount(Integer billingDocumentAmount) {
    
    
    
    
    this.billingDocumentAmount = billingDocumentAmount;
    return this;
  }

   /**
   * Get billingDocumentAmount
   * @return billingDocumentAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000000", required = true, value = "")

  public Integer getBillingDocumentAmount() {
    return billingDocumentAmount;
  }


  public void setBillingDocumentAmount(Integer billingDocumentAmount) {
    
    
    
    this.billingDocumentAmount = billingDocumentAmount;
  }


  public BillingDocumentAmountItem billingDocumentCurrency(String billingDocumentCurrency) {
    
    
    
    
    this.billingDocumentCurrency = billingDocumentCurrency;
    return this;
  }

   /**
   * Get billingDocumentCurrency
   * @return billingDocumentCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAD", required = true, value = "")

  public String getBillingDocumentCurrency() {
    return billingDocumentCurrency;
  }


  public void setBillingDocumentCurrency(String billingDocumentCurrency) {
    
    
    
    this.billingDocumentCurrency = billingDocumentCurrency;
  }


  public BillingDocumentAmountItem employmentId(String employmentId) {
    
    
    
    
    this.employmentId = employmentId;
    return this;
  }

   /**
   * Get employmentId
   * @return employmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0d25c513-employment-id-198557128104", value = "")

  public String getEmploymentId() {
    return employmentId;
  }


  public void setEmploymentId(String employmentId) {
    
    
    
    this.employmentId = employmentId;
  }


  public BillingDocumentAmountItem sourceAmount(Integer sourceAmount) {
    
    
    
    
    this.sourceAmount = sourceAmount;
    return this;
  }

   /**
   * Get sourceAmount
   * @return sourceAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50000", value = "")

  public Integer getSourceAmount() {
    return sourceAmount;
  }


  public void setSourceAmount(Integer sourceAmount) {
    
    
    
    this.sourceAmount = sourceAmount;
  }


  public BillingDocumentAmountItem sourceCurrency(String sourceCurrency) {
    
    
    
    
    this.sourceCurrency = sourceCurrency;
    return this;
  }

   /**
   * Get sourceCurrency
   * @return sourceCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EUR", value = "")

  public String getSourceCurrency() {
    return sourceCurrency;
  }


  public void setSourceCurrency(String sourceCurrency) {
    
    
    
    this.sourceCurrency = sourceCurrency;
  }


  public BillingDocumentAmountItem type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "base_salary", required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BillingDocumentAmountItem instance itself
   */
  public BillingDocumentAmountItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingDocumentAmountItem billingDocumentAmountItem = (BillingDocumentAmountItem) o;
    return Objects.equals(this.billingDocumentAmount, billingDocumentAmountItem.billingDocumentAmount) &&
        Objects.equals(this.billingDocumentCurrency, billingDocumentAmountItem.billingDocumentCurrency) &&
        Objects.equals(this.employmentId, billingDocumentAmountItem.employmentId) &&
        Objects.equals(this.sourceAmount, billingDocumentAmountItem.sourceAmount) &&
        Objects.equals(this.sourceCurrency, billingDocumentAmountItem.sourceCurrency) &&
        Objects.equals(this.type, billingDocumentAmountItem.type)&&
        Objects.equals(this.additionalProperties, billingDocumentAmountItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDocumentAmount, billingDocumentCurrency, employmentId, sourceAmount, sourceCurrency, type, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingDocumentAmountItem {\n");
    sb.append("    billingDocumentAmount: ").append(toIndentedString(billingDocumentAmount)).append("\n");
    sb.append("    billingDocumentCurrency: ").append(toIndentedString(billingDocumentCurrency)).append("\n");
    sb.append("    employmentId: ").append(toIndentedString(employmentId)).append("\n");
    sb.append("    sourceAmount: ").append(toIndentedString(sourceAmount)).append("\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_document_amount");
    openapiFields.add("billing_document_currency");
    openapiFields.add("employment_id");
    openapiFields.add("source_amount");
    openapiFields.add("source_currency");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billing_document_amount");
    openapiRequiredFields.add("billing_document_currency");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BillingDocumentAmountItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BillingDocumentAmountItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingDocumentAmountItem is not found in the empty JSON string", BillingDocumentAmountItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BillingDocumentAmountItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("billing_document_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_document_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_document_currency").toString()));
      }
      if (!jsonObj.get("employment_id").isJsonNull() && (jsonObj.get("employment_id") != null && !jsonObj.get("employment_id").isJsonNull()) && !jsonObj.get("employment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_id").toString()));
      }
      if (!jsonObj.get("source_currency").isJsonNull() && (jsonObj.get("source_currency") != null && !jsonObj.get("source_currency").isJsonNull()) && !jsonObj.get("source_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_currency").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingDocumentAmountItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingDocumentAmountItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingDocumentAmountItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingDocumentAmountItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingDocumentAmountItem>() {
           @Override
           public void write(JsonWriter out, BillingDocumentAmountItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingDocumentAmountItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BillingDocumentAmountItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingDocumentAmountItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingDocumentAmountItem
  * @throws IOException if the JSON string is invalid with respect to BillingDocumentAmountItem
  */
  public static BillingDocumentAmountItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingDocumentAmountItem.class);
  }

 /**
  * Convert an instance of BillingDocumentAmountItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

