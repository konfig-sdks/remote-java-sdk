/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeoffEntitlement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeoffBalance
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeoffBalance {
  public static final String SERIALIZED_NAME_CONTRACTUAL_ENTITLED = "contractual_entitled";
  @SerializedName(SERIALIZED_NAME_CONTRACTUAL_ENTITLED)
  private Integer contractualEntitled;

  public static final String SERIALIZED_NAME_CONTRACTUAL_LEAVE_ENTITLEMENT_TYPE = "contractual_leave_entitlement_type";
  @SerializedName(SERIALIZED_NAME_CONTRACTUAL_LEAVE_ENTITLEMENT_TYPE)
  private String contractualLeaveEntitlementType;

  public static final String SERIALIZED_NAME_TAKEN = "taken";
  @SerializedName(SERIALIZED_NAME_TAKEN)
  private Object taken = null;

  public static final String SERIALIZED_NAME_TIMEOFF_ENTITLEMENTS = "timeoff_entitlements";
  @SerializedName(SERIALIZED_NAME_TIMEOFF_ENTITLEMENTS)
  private List<TimeoffEntitlement> timeoffEntitlements = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_ENTITLED_DAYS = "total_entitled_days";
  @SerializedName(SERIALIZED_NAME_TOTAL_ENTITLED_DAYS)
  private Integer totalEntitledDays;

  public static final String SERIALIZED_NAME_UPCOMING_APPROVED = "upcoming_approved";
  @SerializedName(SERIALIZED_NAME_UPCOMING_APPROVED)
  private Object upcomingApproved = null;

  public static final String SERIALIZED_NAME_UPCOMING_REQUESTED = "upcoming_requested";
  @SerializedName(SERIALIZED_NAME_UPCOMING_REQUESTED)
  private Object upcomingRequested = null;

  public static final String SERIALIZED_NAME_WORKING_HOURS_PER_DAY = "working_hours_per_day";
  @SerializedName(SERIALIZED_NAME_WORKING_HOURS_PER_DAY)
  private Integer workingHoursPerDay;

  public TimeoffBalance() {
  }

  public TimeoffBalance contractualEntitled(Integer contractualEntitled) {
    
    
    
    
    this.contractualEntitled = contractualEntitled;
    return this;
  }

   /**
   * Number of time off days for the employment, based on their contract.  The value of this field is &#x60;0&#x60; if the employment&#39;s contract does not include that information. 
   * @return contractualEntitled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of time off days for the employment, based on their contract.  The value of this field is `0` if the employment's contract does not include that information. ")

  public Integer getContractualEntitled() {
    return contractualEntitled;
  }


  public void setContractualEntitled(Integer contractualEntitled) {
    
    
    
    this.contractualEntitled = contractualEntitled;
  }


  public TimeoffBalance contractualLeaveEntitlementType(String contractualLeaveEntitlementType) {
    
    
    
    
    this.contractualLeaveEntitlementType = contractualLeaveEntitlementType;
    return this;
  }

   /**
   * Leave entitlement type for the employment, based on their contract.  The value of this field is &#x60;fixed&#x60; when the employment has a fixed limit of time off days to be taken, and &#x60;unlimited&#x60; otherwise. 
   * @return contractualLeaveEntitlementType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Leave entitlement type for the employment, based on their contract.  The value of this field is `fixed` when the employment has a fixed limit of time off days to be taken, and `unlimited` otherwise. ")

  public String getContractualLeaveEntitlementType() {
    return contractualLeaveEntitlementType;
  }


  public void setContractualLeaveEntitlementType(String contractualLeaveEntitlementType) {
    
    
    
    this.contractualLeaveEntitlementType = contractualLeaveEntitlementType;
  }


  public TimeoffBalance taken(Object taken) {
    
    
    
    
    this.taken = taken;
    return this;
  }

   /**
   * Get taken
   * @return taken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getTaken() {
    return taken;
  }


  public void setTaken(Object taken) {
    
    
    
    this.taken = taken;
  }


  public TimeoffBalance timeoffEntitlements(List<TimeoffEntitlement> timeoffEntitlements) {
    
    
    
    
    this.timeoffEntitlements = timeoffEntitlements;
    return this;
  }

  public TimeoffBalance addTimeoffEntitlementsItem(TimeoffEntitlement timeoffEntitlementsItem) {
    this.timeoffEntitlements.add(timeoffEntitlementsItem);
    return this;
  }

   /**
   * A list of individual time off entitlements for the employment. This list gives more granular details for the type of time off that&#39;s available to the employment. 
   * @return timeoffEntitlements
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of individual time off entitlements for the employment. This list gives more granular details for the type of time off that's available to the employment. ")

  public List<TimeoffEntitlement> getTimeoffEntitlements() {
    return timeoffEntitlements;
  }


  public void setTimeoffEntitlements(List<TimeoffEntitlement> timeoffEntitlements) {
    
    
    
    this.timeoffEntitlements = timeoffEntitlements;
  }


  public TimeoffBalance totalEntitledDays(Integer totalEntitledDays) {
    
    
    
    
    this.totalEntitledDays = totalEntitledDays;
    return this;
  }

   /**
   * Number of time off days for the employment, based on their contract and any additional time off that&#39;s granted to them.  This is the sum of all &#x60;entitled&#x60; fields in the &#x60;leave_entitlements&#x60; array, but does not take the hours into account. 
   * @return totalEntitledDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "31", value = "Number of time off days for the employment, based on their contract and any additional time off that's granted to them.  This is the sum of all `entitled` fields in the `leave_entitlements` array, but does not take the hours into account. ")

  public Integer getTotalEntitledDays() {
    return totalEntitledDays;
  }


  public void setTotalEntitledDays(Integer totalEntitledDays) {
    
    
    
    this.totalEntitledDays = totalEntitledDays;
  }


  public TimeoffBalance upcomingApproved(Object upcomingApproved) {
    
    
    
    
    this.upcomingApproved = upcomingApproved;
    return this;
  }

   /**
   * Get upcomingApproved
   * @return upcomingApproved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getUpcomingApproved() {
    return upcomingApproved;
  }


  public void setUpcomingApproved(Object upcomingApproved) {
    
    
    
    this.upcomingApproved = upcomingApproved;
  }


  public TimeoffBalance upcomingRequested(Object upcomingRequested) {
    
    
    
    
    this.upcomingRequested = upcomingRequested;
    return this;
  }

   /**
   * Get upcomingRequested
   * @return upcomingRequested
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getUpcomingRequested() {
    return upcomingRequested;
  }


  public void setUpcomingRequested(Object upcomingRequested) {
    
    
    
    this.upcomingRequested = upcomingRequested;
  }


  public TimeoffBalance workingHoursPerDay(Integer workingHoursPerDay) {
    
    
    
    
    this.workingHoursPerDay = workingHoursPerDay;
    return this;
  }

   /**
   * Get workingHoursPerDay
   * @return workingHoursPerDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8", required = true, value = "")

  public Integer getWorkingHoursPerDay() {
    return workingHoursPerDay;
  }


  public void setWorkingHoursPerDay(Integer workingHoursPerDay) {
    
    
    
    this.workingHoursPerDay = workingHoursPerDay;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeoffBalance instance itself
   */
  public TimeoffBalance putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeoffBalance timeoffBalance = (TimeoffBalance) o;
    return Objects.equals(this.contractualEntitled, timeoffBalance.contractualEntitled) &&
        Objects.equals(this.contractualLeaveEntitlementType, timeoffBalance.contractualLeaveEntitlementType) &&
        Objects.equals(this.taken, timeoffBalance.taken) &&
        Objects.equals(this.timeoffEntitlements, timeoffBalance.timeoffEntitlements) &&
        Objects.equals(this.totalEntitledDays, timeoffBalance.totalEntitledDays) &&
        Objects.equals(this.upcomingApproved, timeoffBalance.upcomingApproved) &&
        Objects.equals(this.upcomingRequested, timeoffBalance.upcomingRequested) &&
        Objects.equals(this.workingHoursPerDay, timeoffBalance.workingHoursPerDay)&&
        Objects.equals(this.additionalProperties, timeoffBalance.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractualEntitled, contractualLeaveEntitlementType, taken, timeoffEntitlements, totalEntitledDays, upcomingApproved, upcomingRequested, workingHoursPerDay, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeoffBalance {\n");
    sb.append("    contractualEntitled: ").append(toIndentedString(contractualEntitled)).append("\n");
    sb.append("    contractualLeaveEntitlementType: ").append(toIndentedString(contractualLeaveEntitlementType)).append("\n");
    sb.append("    taken: ").append(toIndentedString(taken)).append("\n");
    sb.append("    timeoffEntitlements: ").append(toIndentedString(timeoffEntitlements)).append("\n");
    sb.append("    totalEntitledDays: ").append(toIndentedString(totalEntitledDays)).append("\n");
    sb.append("    upcomingApproved: ").append(toIndentedString(upcomingApproved)).append("\n");
    sb.append("    upcomingRequested: ").append(toIndentedString(upcomingRequested)).append("\n");
    sb.append("    workingHoursPerDay: ").append(toIndentedString(workingHoursPerDay)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractual_entitled");
    openapiFields.add("contractual_leave_entitlement_type");
    openapiFields.add("taken");
    openapiFields.add("timeoff_entitlements");
    openapiFields.add("total_entitled_days");
    openapiFields.add("upcoming_approved");
    openapiFields.add("upcoming_requested");
    openapiFields.add("working_hours_per_day");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractual_leave_entitlement_type");
    openapiRequiredFields.add("taken");
    openapiRequiredFields.add("timeoff_entitlements");
    openapiRequiredFields.add("upcoming_approved");
    openapiRequiredFields.add("upcoming_requested");
    openapiRequiredFields.add("working_hours_per_day");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeoffBalance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeoffBalance.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeoffBalance is not found in the empty JSON string", TimeoffBalance.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeoffBalance.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("contractual_leave_entitlement_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractual_leave_entitlement_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractual_leave_entitlement_type").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("timeoff_entitlements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoff_entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("timeoff_entitlements").toString()));
      }

      JsonArray jsonArraytimeoffEntitlements = jsonObj.getAsJsonArray("timeoff_entitlements");
      // validate the required field `timeoff_entitlements` (array)
      for (int i = 0; i < jsonArraytimeoffEntitlements.size(); i++) {
        TimeoffEntitlement.validateJsonObject(jsonArraytimeoffEntitlements.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeoffBalance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeoffBalance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeoffBalance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeoffBalance.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeoffBalance>() {
           @Override
           public void write(JsonWriter out, TimeoffBalance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeoffBalance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeoffBalance instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeoffBalance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeoffBalance
  * @throws IOException if the JSON string is invalid with respect to TimeoffBalance
  */
  public static TimeoffBalance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeoffBalance.class);
  }

 /**
  * Convert an instance of TimeoffBalance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

