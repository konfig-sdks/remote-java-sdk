/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OffboardingFile;
import com.konfigthis.client.model.TerminationDetailsParamsEmployeeAwareness;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TerminationDetailsParams
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TerminationDetailsParams {
  public static final String SERIALIZED_NAME_ADDITIONAL_COMMENTS = "additional_comments";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_COMMENTS)
  private String additionalComments;

  public static final String SERIALIZED_NAME_CONFIDENTIAL = "confidential";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL)
  private Boolean confidential;

  public static final String SERIALIZED_NAME_EMPLOYEE_AWARENESS = "employee_awareness";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_AWARENESS)
  private TerminationDetailsParamsEmployeeAwareness employeeAwareness;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personal_email";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  private String personalEmail;

  public static final String SERIALIZED_NAME_PROPOSED_TERMINATION_DATE = "proposed_termination_date";
  @SerializedName(SERIALIZED_NAME_PROPOSED_TERMINATION_DATE)
  private LocalDate proposedTerminationDate;

  public static final String SERIALIZED_NAME_REASON_DESCRIPTION = "reason_description";
  @SerializedName(SERIALIZED_NAME_REASON_DESCRIPTION)
  private String reasonDescription;

  /**
   * Gets or Sets riskAssessmentReasons
   */
  @JsonAdapter(RiskAssessmentReasonsEnum.Adapter.class)
 public enum RiskAssessmentReasonsEnum {
    CARING_RESPONSIBILITIES("caring_responsibilities"),
    
    DISABLED_OR_HEALTH_CONDITION("disabled_or_health_condition"),
    
    FAMILY_LEAVE("family_leave"),
    
    MEMBER_OF_UNION_OR_WORKS_COUNCIL("member_of_union_or_works_council"),
    
    NONE_OF_THESE("none_of_these"),
    
    PREGNANT_OR_BREASTFEEDING("pregnant_or_breastfeeding"),
    
    REPORTED_CONCERNS_WITH_WORKPLACE("reported_concerns_with_workplace"),
    
    REQUESTED_MEDICAL_OR_FAMILY_LEAVE("requested_medical_or_family_leave"),
    
    SICK_LEAVE("sick_leave");

    private String value;

    RiskAssessmentReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RiskAssessmentReasonsEnum fromValue(String value) {
      for (RiskAssessmentReasonsEnum b : RiskAssessmentReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RiskAssessmentReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RiskAssessmentReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RiskAssessmentReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RiskAssessmentReasonsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RISK_ASSESSMENT_REASONS = "risk_assessment_reasons";
  @SerializedName(SERIALIZED_NAME_RISK_ASSESSMENT_REASONS)
  private List<RiskAssessmentReasonsEnum> riskAssessmentReasons = new ArrayList<>();

  /**
   * Choose an accurate termination reason to avoid unfair or unlawful dismissal claims.  If the termination is created before the employee&#39;s start date, this field will be set to &#x60;cancellation_before_start_date&#x60;. 
   */
  @JsonAdapter(TerminationReasonEnum.Adapter.class)
 public enum TerminationReasonEnum {
    CANCELLATION_BEFORE_START_DATE("cancellation_before_start_date"),
    
    COMPLIANCE_ISSUE("compliance_issue"),
    
    CONVERSION_TO_CONTRACTOR("conversion_to_contractor"),
    
    DISSATISFACTION_WITH_REMOTE_SERVICE("dissatisfaction_with_remote_service"),
    
    END_OF_FIXED_TERM_CONTRACT_COMPLIANCE_ISSUE("end_of_fixed_term_contract_compliance_issue"),
    
    END_OF_FIXED_TERM_CONTRACT_INCAPACITY_TO_PERFORM_INHERENT_DUTIES("end_of_fixed_term_contract_incapacity_to_perform_inherent_duties"),
    
    END_OF_FIXED_TERM_CONTRACT_LOCAL_REGULATIONS_MAX_TERM_REACHED("end_of_fixed_term_contract_local_regulations_max_term_reached"),
    
    END_OF_FIXED_TERM_CONTRACT_MISCONDUCT("end_of_fixed_term_contract_misconduct"),
    
    END_OF_FIXED_TERM_CONTRACT_OPERATIONAL_REASONS("end_of_fixed_term_contract_operational_reasons"),
    
    END_OF_FIXED_TERM_CONTRACT_OTHER("end_of_fixed_term_contract_other"),
    
    END_OF_FIXED_TERM_CONTRACT_PERFORMANCE("end_of_fixed_term_contract_performance"),
    
    END_OF_FIXED_TERM_CONTRACT_REDUNDANCY("end_of_fixed_term_contract_redundancy"),
    
    END_OF_FIXED_TERM_CONTRACT_VALUES("end_of_fixed_term_contract_values"),
    
    GROSS_MISCONDUCT("gross_misconduct"),
    
    INCAPACITY_TO_PERFORM_INHERENT_DUTIES("incapacity_to_perform_inherent_duties"),
    
    JOB_ABANDONMENT("job_abandonment"),
    
    MUTUAL_AGREEMENT("mutual_agreement"),
    
    OTHER("other"),
    
    PERFORMANCE("performance"),
    
    VALUES("values"),
    
    WORKFORCE_REDUCTION("workforce_reduction");

    private String value;

    TerminationReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerminationReasonEnum fromValue(String value) {
      for (TerminationReasonEnum b : TerminationReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TerminationReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerminationReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerminationReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TerminationReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TERMINATION_REASON = "termination_reason";
  @SerializedName(SERIALIZED_NAME_TERMINATION_REASON)
  private TerminationReasonEnum terminationReason;

  public static final String SERIALIZED_NAME_TERMINATION_REASON_FILES = "termination_reason_files";
  @SerializedName(SERIALIZED_NAME_TERMINATION_REASON_FILES)
  private List<OffboardingFile> terminationReasonFiles = null;

  public static final String SERIALIZED_NAME_TIMESHEET_FILE = "timesheet_file";
  @SerializedName(SERIALIZED_NAME_TIMESHEET_FILE)
  private OffboardingFile timesheetFile;

  public static final String SERIALIZED_NAME_WILL_CHALLENGE_TERMINATION = "will_challenge_termination";
  @SerializedName(SERIALIZED_NAME_WILL_CHALLENGE_TERMINATION)
  private Boolean willChallengeTermination;

  public static final String SERIALIZED_NAME_WILL_CHALLENGE_TERMINATION_DESCRIPTION = "will_challenge_termination_description";
  @SerializedName(SERIALIZED_NAME_WILL_CHALLENGE_TERMINATION_DESCRIPTION)
  private String willChallengeTerminationDescription;

  public TerminationDetailsParams() {
  }

  public TerminationDetailsParams additionalComments(String additionalComments) {
    
    
    
    
    this.additionalComments = additionalComments;
    return this;
  }

   /**
   * Additional details regarding the termination process.
   * @return additionalComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "additional comments regarding the termination reason", value = "Additional details regarding the termination process.")

  public String getAdditionalComments() {
    return additionalComments;
  }


  public void setAdditionalComments(String additionalComments) {
    
    
    
    this.additionalComments = additionalComments;
  }


  public TerminationDetailsParams confidential(Boolean confidential) {
    
    
    
    
    this.confidential = confidential;
    return this;
  }

   /**
   * Confidential requests are visible for who authorized the token or integration. Non-confidential requests are visible to all admins in the company.
   * @return confidential
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Confidential requests are visible for who authorized the token or integration. Non-confidential requests are visible to all admins in the company.")

  public Boolean getConfidential() {
    return confidential;
  }


  public void setConfidential(Boolean confidential) {
    
    
    
    this.confidential = confidential;
  }


  public TerminationDetailsParams employeeAwareness(TerminationDetailsParamsEmployeeAwareness employeeAwareness) {
    
    
    
    
    this.employeeAwareness = employeeAwareness;
    return this;
  }

   /**
   * Get employeeAwareness
   * @return employeeAwareness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TerminationDetailsParamsEmployeeAwareness getEmployeeAwareness() {
    return employeeAwareness;
  }


  public void setEmployeeAwareness(TerminationDetailsParamsEmployeeAwareness employeeAwareness) {
    
    
    
    this.employeeAwareness = employeeAwareness;
  }


  public TerminationDetailsParams personalEmail(String personalEmail) {
    
    
    
    
    this.personalEmail = personalEmail;
    return this;
  }

   /**
   * Remote will use this email address for post-termination communication. If it is not provided, this field will be derived from the employment record. Therefore, it is important to ensure that it is not a company email. 
   * @return personalEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Remote will use this email address for post-termination communication. If it is not provided, this field will be derived from the employment record. Therefore, it is important to ensure that it is not a company email. ")

  public String getPersonalEmail() {
    return personalEmail;
  }


  public void setPersonalEmail(String personalEmail) {
    
    
    
    this.personalEmail = personalEmail;
  }


  public TerminationDetailsParams proposedTerminationDate(LocalDate proposedTerminationDate) {
    
    
    
    
    this.proposedTerminationDate = proposedTerminationDate;
    return this;
  }

   /**
   * In most cases, employee needs to be notified before termination. The required notice period depends on local labor laws, the employment agreement, and other factors. Remote will use those factors to determine the required notice period. Please note that we cannot commit to a termination date until we conduct a full review of the information you submit.
   * @return proposedTerminationDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Tue Dec 19 16:00:00 PST 2023", required = true, value = "In most cases, employee needs to be notified before termination. The required notice period depends on local labor laws, the employment agreement, and other factors. Remote will use those factors to determine the required notice period. Please note that we cannot commit to a termination date until we conduct a full review of the information you submit.")

  public LocalDate getProposedTerminationDate() {
    return proposedTerminationDate;
  }


  public void setProposedTerminationDate(LocalDate proposedTerminationDate) {
    
    
    
    this.proposedTerminationDate = proposedTerminationDate;
  }


  public TerminationDetailsParams reasonDescription(String reasonDescription) {
    
    
    
    
    this.reasonDescription = reasonDescription;
    return this;
  }

   /**
   * Description of the reason for termination
   * @return reasonDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "termination reason", required = true, value = "Description of the reason for termination")

  public String getReasonDescription() {
    return reasonDescription;
  }


  public void setReasonDescription(String reasonDescription) {
    
    
    
    this.reasonDescription = reasonDescription;
  }


  public TerminationDetailsParams riskAssessmentReasons(List<RiskAssessmentReasonsEnum> riskAssessmentReasons) {
    
    
    
    
    this.riskAssessmentReasons = riskAssessmentReasons;
    return this;
  }

  public TerminationDetailsParams addRiskAssessmentReasonsItem(RiskAssessmentReasonsEnum riskAssessmentReasonsItem) {
    this.riskAssessmentReasons.add(riskAssessmentReasonsItem);
    return this;
  }

   /**
   * Possible reasons for offboarding risk assessment
   * @return riskAssessmentReasons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Possible reasons for offboarding risk assessment")

  public List<RiskAssessmentReasonsEnum> getRiskAssessmentReasons() {
    return riskAssessmentReasons;
  }


  public void setRiskAssessmentReasons(List<RiskAssessmentReasonsEnum> riskAssessmentReasons) {
    
    
    
    this.riskAssessmentReasons = riskAssessmentReasons;
  }


  public TerminationDetailsParams terminationReason(TerminationReasonEnum terminationReason) {
    
    
    
    
    this.terminationReason = terminationReason;
    return this;
  }

   /**
   * Choose an accurate termination reason to avoid unfair or unlawful dismissal claims.  If the termination is created before the employee&#39;s start date, this field will be set to &#x60;cancellation_before_start_date&#x60;. 
   * @return terminationReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "WORKFORCE_REDUCTION", required = true, value = "Choose an accurate termination reason to avoid unfair or unlawful dismissal claims.  If the termination is created before the employee's start date, this field will be set to `cancellation_before_start_date`. ")

  public TerminationReasonEnum getTerminationReason() {
    return terminationReason;
  }


  public void setTerminationReason(TerminationReasonEnum terminationReason) {
    
    
    
    this.terminationReason = terminationReason;
  }


  public TerminationDetailsParams terminationReasonFiles(List<OffboardingFile> terminationReasonFiles) {
    
    
    
    
    this.terminationReasonFiles = terminationReasonFiles;
    return this;
  }

  public TerminationDetailsParams addTerminationReasonFilesItem(OffboardingFile terminationReasonFilesItem) {
    if (this.terminationReasonFiles == null) {
      this.terminationReasonFiles = new ArrayList<>();
    }
    this.terminationReasonFiles.add(terminationReasonFilesItem);
    return this;
  }

   /**
   * Any supporting documents regarding the termination reason
   * @return terminationReasonFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any supporting documents regarding the termination reason")

  public List<OffboardingFile> getTerminationReasonFiles() {
    return terminationReasonFiles;
  }


  public void setTerminationReasonFiles(List<OffboardingFile> terminationReasonFiles) {
    
    
    
    this.terminationReasonFiles = terminationReasonFiles;
  }


  public TerminationDetailsParams timesheetFile(OffboardingFile timesheetFile) {
    
    
    
    
    this.timesheetFile = timesheetFile;
    return this;
  }

   /**
   * Paid time off accuracy  Typically, any vacation pay accrued and unpaid at the time of termination must be paid out to the employee. To avoid overpaying or underpaying, please make sure we have an accurate account of their paid time off by querying the [Show Time Off Balance](https://gateway.remote.com/v1/docs/openapi.html) endpoint, filtering by the &#x60;employment_id&#x60;. This optional document should be sent in case of any discrepancies. 
   * @return timesheetFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Paid time off accuracy  Typically, any vacation pay accrued and unpaid at the time of termination must be paid out to the employee. To avoid overpaying or underpaying, please make sure we have an accurate account of their paid time off by querying the [Show Time Off Balance](https://gateway.remote.com/v1/docs/openapi.html) endpoint, filtering by the `employment_id`. This optional document should be sent in case of any discrepancies. ")

  public OffboardingFile getTimesheetFile() {
    return timesheetFile;
  }


  public void setTimesheetFile(OffboardingFile timesheetFile) {
    
    
    
    this.timesheetFile = timesheetFile;
  }


  public TerminationDetailsParams willChallengeTermination(Boolean willChallengeTermination) {
    
    
    
    
    this.willChallengeTermination = willChallengeTermination;
    return this;
  }

   /**
   * Whether is it likely or not that the employee will challenge their termination
   * @return willChallengeTermination
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Whether is it likely or not that the employee will challenge their termination")

  public Boolean getWillChallengeTermination() {
    return willChallengeTermination;
  }


  public void setWillChallengeTermination(Boolean willChallengeTermination) {
    
    
    
    this.willChallengeTermination = willChallengeTermination;
  }


  public TerminationDetailsParams willChallengeTerminationDescription(String willChallengeTerminationDescription) {
    
    
    
    
    this.willChallengeTerminationDescription = willChallengeTerminationDescription;
    return this;
  }

   /**
   * If it is likely that the employee will challenge their termination, please provide additional details explaining the risk
   * @return willChallengeTerminationDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "additional details for the offboarding risk assessment", value = "If it is likely that the employee will challenge their termination, please provide additional details explaining the risk")

  public String getWillChallengeTerminationDescription() {
    return willChallengeTerminationDescription;
  }


  public void setWillChallengeTerminationDescription(String willChallengeTerminationDescription) {
    
    
    
    this.willChallengeTerminationDescription = willChallengeTerminationDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TerminationDetailsParams instance itself
   */
  public TerminationDetailsParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminationDetailsParams terminationDetailsParams = (TerminationDetailsParams) o;
    return Objects.equals(this.additionalComments, terminationDetailsParams.additionalComments) &&
        Objects.equals(this.confidential, terminationDetailsParams.confidential) &&
        Objects.equals(this.employeeAwareness, terminationDetailsParams.employeeAwareness) &&
        Objects.equals(this.personalEmail, terminationDetailsParams.personalEmail) &&
        Objects.equals(this.proposedTerminationDate, terminationDetailsParams.proposedTerminationDate) &&
        Objects.equals(this.reasonDescription, terminationDetailsParams.reasonDescription) &&
        Objects.equals(this.riskAssessmentReasons, terminationDetailsParams.riskAssessmentReasons) &&
        Objects.equals(this.terminationReason, terminationDetailsParams.terminationReason) &&
        Objects.equals(this.terminationReasonFiles, terminationDetailsParams.terminationReasonFiles) &&
        Objects.equals(this.timesheetFile, terminationDetailsParams.timesheetFile) &&
        Objects.equals(this.willChallengeTermination, terminationDetailsParams.willChallengeTermination) &&
        Objects.equals(this.willChallengeTerminationDescription, terminationDetailsParams.willChallengeTerminationDescription)&&
        Objects.equals(this.additionalProperties, terminationDetailsParams.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalComments, confidential, employeeAwareness, personalEmail, proposedTerminationDate, reasonDescription, riskAssessmentReasons, terminationReason, terminationReasonFiles, timesheetFile, willChallengeTermination, willChallengeTerminationDescription, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminationDetailsParams {\n");
    sb.append("    additionalComments: ").append(toIndentedString(additionalComments)).append("\n");
    sb.append("    confidential: ").append(toIndentedString(confidential)).append("\n");
    sb.append("    employeeAwareness: ").append(toIndentedString(employeeAwareness)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    proposedTerminationDate: ").append(toIndentedString(proposedTerminationDate)).append("\n");
    sb.append("    reasonDescription: ").append(toIndentedString(reasonDescription)).append("\n");
    sb.append("    riskAssessmentReasons: ").append(toIndentedString(riskAssessmentReasons)).append("\n");
    sb.append("    terminationReason: ").append(toIndentedString(terminationReason)).append("\n");
    sb.append("    terminationReasonFiles: ").append(toIndentedString(terminationReasonFiles)).append("\n");
    sb.append("    timesheetFile: ").append(toIndentedString(timesheetFile)).append("\n");
    sb.append("    willChallengeTermination: ").append(toIndentedString(willChallengeTermination)).append("\n");
    sb.append("    willChallengeTerminationDescription: ").append(toIndentedString(willChallengeTerminationDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_comments");
    openapiFields.add("confidential");
    openapiFields.add("employee_awareness");
    openapiFields.add("personal_email");
    openapiFields.add("proposed_termination_date");
    openapiFields.add("reason_description");
    openapiFields.add("risk_assessment_reasons");
    openapiFields.add("termination_reason");
    openapiFields.add("termination_reason_files");
    openapiFields.add("timesheet_file");
    openapiFields.add("will_challenge_termination");
    openapiFields.add("will_challenge_termination_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confidential");
    openapiRequiredFields.add("proposed_termination_date");
    openapiRequiredFields.add("reason_description");
    openapiRequiredFields.add("risk_assessment_reasons");
    openapiRequiredFields.add("termination_reason");
    openapiRequiredFields.add("will_challenge_termination");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TerminationDetailsParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TerminationDetailsParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminationDetailsParams is not found in the empty JSON string", TerminationDetailsParams.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TerminationDetailsParams.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("additional_comments") != null && !jsonObj.get("additional_comments").isJsonNull()) && !jsonObj.get("additional_comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_comments").toString()));
      }
      // validate the optional field `employee_awareness`
      if (jsonObj.get("employee_awareness") != null && !jsonObj.get("employee_awareness").isJsonNull()) {
        TerminationDetailsParamsEmployeeAwareness.validateJsonObject(jsonObj.getAsJsonObject("employee_awareness"));
      }
      if ((jsonObj.get("personal_email") != null && !jsonObj.get("personal_email").isJsonNull()) && !jsonObj.get("personal_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personal_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personal_email").toString()));
      }
      if (!jsonObj.get("reason_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason_description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("risk_assessment_reasons") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("risk_assessment_reasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_assessment_reasons` to be an array in the JSON string but got `%s`", jsonObj.get("risk_assessment_reasons").toString()));
      }
      if (!jsonObj.get("termination_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termination_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termination_reason").toString()));
      }
      if (jsonObj.get("termination_reason_files") != null && !jsonObj.get("termination_reason_files").isJsonNull()) {
        JsonArray jsonArrayterminationReasonFiles = jsonObj.getAsJsonArray("termination_reason_files");
        if (jsonArrayterminationReasonFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("termination_reason_files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `termination_reason_files` to be an array in the JSON string but got `%s`", jsonObj.get("termination_reason_files").toString()));
          }

          // validate the optional field `termination_reason_files` (array)
          for (int i = 0; i < jsonArrayterminationReasonFiles.size(); i++) {
            OffboardingFile.validateJsonObject(jsonArrayterminationReasonFiles.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `timesheet_file`
      if (jsonObj.get("timesheet_file") != null && !jsonObj.get("timesheet_file").isJsonNull()) {
        OffboardingFile.validateJsonObject(jsonObj.getAsJsonObject("timesheet_file"));
      }
      if ((jsonObj.get("will_challenge_termination_description") != null && !jsonObj.get("will_challenge_termination_description").isJsonNull()) && !jsonObj.get("will_challenge_termination_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `will_challenge_termination_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("will_challenge_termination_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminationDetailsParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminationDetailsParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminationDetailsParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminationDetailsParams.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminationDetailsParams>() {
           @Override
           public void write(JsonWriter out, TerminationDetailsParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminationDetailsParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TerminationDetailsParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TerminationDetailsParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TerminationDetailsParams
  * @throws IOException if the JSON string is invalid with respect to TerminationDetailsParams
  */
  public static TerminationDetailsParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminationDetailsParams.class);
  }

 /**
  * Convert an instance of TerminationDetailsParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

