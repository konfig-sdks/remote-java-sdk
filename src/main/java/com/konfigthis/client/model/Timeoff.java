/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ModelFile;
import com.konfigthis.client.model.TimeoffDay;
import com.konfigthis.client.model.TimeoffType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Timeoff
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Timeoff {
  public static final String SERIALIZED_NAME_APPROVED_AT = "approved_at";
  @SerializedName(SERIALIZED_NAME_APPROVED_AT)
  private OffsetDateTime approvedAt;

  public static final String SERIALIZED_NAME_APPROVER_ID = "approver_id";
  @SerializedName(SERIALIZED_NAME_APPROVER_ID)
  private String approverId;

  public static final String SERIALIZED_NAME_CANCEL_REASON = "cancel_reason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
  private String cancelReason;

  public static final String SERIALIZED_NAME_CANCELLED_AT = "cancelled_at";
  @SerializedName(SERIALIZED_NAME_CANCELLED_AT)
  private String cancelledAt;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private ModelFile document;

  public static final String SERIALIZED_NAME_EMPLOYMENT_ID = "employment_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_ID)
  private String employmentId;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TIMEOFF_DAYS = "timeoff_days";
  @SerializedName(SERIALIZED_NAME_TIMEOFF_DAYS)
  private List<TimeoffDay> timeoffDays = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMEOFF_TYPE = "timeoff_type";
  @SerializedName(SERIALIZED_NAME_TIMEOFF_TYPE)
  private TimeoffType timeoffType;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public Timeoff() {
  }

  public Timeoff approvedAt(OffsetDateTime approvedAt) {
    
    
    
    
    this.approvedAt = approvedAt;
    return this;
  }

   /**
   * Get approvedAt
   * @return approvedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getApprovedAt() {
    return approvedAt;
  }


  public void setApprovedAt(OffsetDateTime approvedAt) {
    
    
    
    this.approvedAt = approvedAt;
  }


  public Timeoff approverId(String approverId) {
    
    
    
    
    this.approverId = approverId;
    return this;
  }

   /**
   * The field matches the &#x60;id&#x60; of a user in the Remote Platform that has permission to approve time off requests. [Available users][] can be found fetching the [List Company Manager][] endpoint.  [Available users]: https://support.remote.com/hc/en-us/articles/360054668651-Approving-Declining-time-off-requests#h_01G0014GZKZ3EMN6P7C99HAK55 [List Company Manager]: https://gateway.remote.com/v1/docs/openapi.html#tag/Company-Managers 
   * @return approverId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "51546f60-dd71-4223-9312-4efede68a497", value = "The field matches the `id` of a user in the Remote Platform that has permission to approve time off requests. [Available users][] can be found fetching the [List Company Manager][] endpoint.  [Available users]: https://support.remote.com/hc/en-us/articles/360054668651-Approving-Declining-time-off-requests#h_01G0014GZKZ3EMN6P7C99HAK55 [List Company Manager]: https://gateway.remote.com/v1/docs/openapi.html#tag/Company-Managers ")

  public String getApproverId() {
    return approverId;
  }


  public void setApproverId(String approverId) {
    
    
    
    this.approverId = approverId;
  }


  public Timeoff cancelReason(String cancelReason) {
    
    
    
    
    this.cancelReason = cancelReason;
    return this;
  }

   /**
   * Get cancelReason
   * @return cancelReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCancelReason() {
    return cancelReason;
  }


  public void setCancelReason(String cancelReason) {
    
    
    
    this.cancelReason = cancelReason;
  }


  public Timeoff cancelledAt(String cancelledAt) {
    
    
    
    
    this.cancelledAt = cancelledAt;
    return this;
  }

   /**
   * Optional UTC date time in YYYY-MM-DDTHH:mm:ss format
   * @return cancelledAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-15T18:18:17", value = "Optional UTC date time in YYYY-MM-DDTHH:mm:ss format")

  public String getCancelledAt() {
    return cancelledAt;
  }


  public void setCancelledAt(String cancelledAt) {
    
    
    
    this.cancelledAt = cancelledAt;
  }


  public Timeoff document(ModelFile document) {
    
    
    
    
    this.document = document;
    return this;
  }

   /**
   * Get document
   * @return document
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelFile getDocument() {
    return document;
  }


  public void setDocument(ModelFile document) {
    
    
    
    this.document = document;
  }


  public Timeoff employmentId(String employmentId) {
    
    
    
    
    this.employmentId = employmentId;
    return this;
  }

   /**
   * Get employmentId
   * @return employmentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5e55386e-4f4f-4def-92f4-bdc19a5ce77d", required = true, value = "")

  public String getEmploymentId() {
    return employmentId;
  }


  public void setEmploymentId(String employmentId) {
    
    
    
    this.employmentId = employmentId;
  }


  public Timeoff endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Mon Dec 20 16:00:00 PST 2021", required = true, value = "")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public Timeoff id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0073fcb5-b669-4e4a-b963-2a47744e75a1", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Timeoff notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Some notes", value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public Timeoff startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sun Dec 19 16:00:00 PST 2021", required = true, value = "")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Timeoff status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "approved", required = true, value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public Timeoff timeoffDays(List<TimeoffDay> timeoffDays) {
    
    
    
    
    this.timeoffDays = timeoffDays;
    return this;
  }

  public Timeoff addTimeoffDaysItem(TimeoffDay timeoffDaysItem) {
    this.timeoffDays.add(timeoffDaysItem);
    return this;
  }

   /**
   * Get timeoffDays
   * @return timeoffDays
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<TimeoffDay> getTimeoffDays() {
    return timeoffDays;
  }


  public void setTimeoffDays(List<TimeoffDay> timeoffDays) {
    
    
    
    this.timeoffDays = timeoffDays;
  }


  public Timeoff timeoffType(TimeoffType timeoffType) {
    
    
    
    
    this.timeoffType = timeoffType;
    return this;
  }

   /**
   * Get timeoffType
   * @return timeoffType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TimeoffType getTimeoffType() {
    return timeoffType;
  }


  public void setTimeoffType(TimeoffType timeoffType) {
    
    
    
    this.timeoffType = timeoffType;
  }


  public Timeoff timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * [TZ identifier](https://www.iana.org/time-zones)
   * @return timezone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Etc/UTC", required = true, value = "[TZ identifier](https://www.iana.org/time-zones)")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Timeoff instance itself
   */
  public Timeoff putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeoff timeoff = (Timeoff) o;
    return Objects.equals(this.approvedAt, timeoff.approvedAt) &&
        Objects.equals(this.approverId, timeoff.approverId) &&
        Objects.equals(this.cancelReason, timeoff.cancelReason) &&
        Objects.equals(this.cancelledAt, timeoff.cancelledAt) &&
        Objects.equals(this.document, timeoff.document) &&
        Objects.equals(this.employmentId, timeoff.employmentId) &&
        Objects.equals(this.endDate, timeoff.endDate) &&
        Objects.equals(this.id, timeoff.id) &&
        Objects.equals(this.notes, timeoff.notes) &&
        Objects.equals(this.startDate, timeoff.startDate) &&
        Objects.equals(this.status, timeoff.status) &&
        Objects.equals(this.timeoffDays, timeoff.timeoffDays) &&
        Objects.equals(this.timeoffType, timeoff.timeoffType) &&
        Objects.equals(this.timezone, timeoff.timezone)&&
        Objects.equals(this.additionalProperties, timeoff.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvedAt, approverId, cancelReason, cancelledAt, document, employmentId, endDate, id, notes, startDate, status, timeoffDays, timeoffType, timezone, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeoff {\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    approverId: ").append(toIndentedString(approverId)).append("\n");
    sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
    sb.append("    cancelledAt: ").append(toIndentedString(cancelledAt)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    employmentId: ").append(toIndentedString(employmentId)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeoffDays: ").append(toIndentedString(timeoffDays)).append("\n");
    sb.append("    timeoffType: ").append(toIndentedString(timeoffType)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approved_at");
    openapiFields.add("approver_id");
    openapiFields.add("cancel_reason");
    openapiFields.add("cancelled_at");
    openapiFields.add("document");
    openapiFields.add("employment_id");
    openapiFields.add("end_date");
    openapiFields.add("id");
    openapiFields.add("notes");
    openapiFields.add("start_date");
    openapiFields.add("status");
    openapiFields.add("timeoff_days");
    openapiFields.add("timeoff_type");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("employment_id");
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("timeoff_days");
    openapiRequiredFields.add("timeoff_type");
    openapiRequiredFields.add("timezone");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Timeoff
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Timeoff.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timeoff is not found in the empty JSON string", Timeoff.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Timeoff.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("approver_id").isJsonNull() && (jsonObj.get("approver_id") != null && !jsonObj.get("approver_id").isJsonNull()) && !jsonObj.get("approver_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approver_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approver_id").toString()));
      }
      if (!jsonObj.get("cancel_reason").isJsonNull() && (jsonObj.get("cancel_reason") != null && !jsonObj.get("cancel_reason").isJsonNull()) && !jsonObj.get("cancel_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_reason").toString()));
      }
      if (!jsonObj.get("cancelled_at").isJsonNull() && (jsonObj.get("cancelled_at") != null && !jsonObj.get("cancelled_at").isJsonNull()) && !jsonObj.get("cancelled_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelled_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelled_at").toString()));
      }
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        ModelFile.validateJsonObject(jsonObj.getAsJsonObject("document"));
      }
      if (!jsonObj.get("employment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("notes").isJsonNull() && (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("timeoff_days").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeoff_days` to be an array in the JSON string but got `%s`", jsonObj.get("timeoff_days").toString()));
      }

      JsonArray jsonArraytimeoffDays = jsonObj.getAsJsonArray("timeoff_days");
      // validate the required field `timeoff_days` (array)
      for (int i = 0; i < jsonArraytimeoffDays.size(); i++) {
        TimeoffDay.validateJsonObject(jsonArraytimeoffDays.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timeoff.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timeoff' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timeoff> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timeoff.class));

       return (TypeAdapter<T>) new TypeAdapter<Timeoff>() {
           @Override
           public void write(JsonWriter out, Timeoff value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Timeoff read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Timeoff instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Timeoff given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Timeoff
  * @throws IOException if the JSON string is invalid with respect to Timeoff
  */
  public static Timeoff fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timeoff.class);
  }

 /**
  * Convert an instance of Timeoff to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

