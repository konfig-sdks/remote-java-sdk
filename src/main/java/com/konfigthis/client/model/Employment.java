/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Country;
import com.konfigthis.client.model.EmploymentLifecycleStage;
import com.konfigthis.client.model.EmploymentStatus;
import com.konfigthis.client.model.ModelFile;
import com.konfigthis.client.model.OnboardingTasks;
import com.konfigthis.client.model.PricingPlanDetails;
import com.konfigthis.client.model.UserStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Complete information of an employment
 */
@ApiModel(description = "Complete information of an employment")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Employment {
  public static final String SERIALIZED_NAME_ACTIVE_CONTRACT_ID = "active_contract_id";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTRACT_ID)
  private String activeContractId;

  public static final String SERIALIZED_NAME_ADDRESS_DETAILS = "address_details";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DETAILS)
  private Object addressDetails;

  public static final String SERIALIZED_NAME_ADMINISTRATIVE_DETAILS = "administrative_details";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_DETAILS)
  private Object administrativeDetails;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_DETAILS = "bank_account_details";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_DETAILS)
  private List<List> bankAccountDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASIC_INFORMATION = "basic_information";
  @SerializedName(SERIALIZED_NAME_BASIC_INFORMATION)
  private Object basicInformation;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_DETAILS = "billing_address_details";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_DETAILS)
  private Object billingAddressDetails;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_CONTRACT_DETAILS = "contract_details";
  @SerializedName(SERIALIZED_NAME_CONTRACT_DETAILS)
  private Object contractDetails;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "department_id";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private String departmentId;

  public static final String SERIALIZED_NAME_EMERGENCY_CONTACT_DETAILS = "emergency_contact_details";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_CONTACT_DETAILS)
  private Object emergencyContactDetails;

  public static final String SERIALIZED_NAME_EMPLOYMENT_LIFECYCLE_STAGE = "employment_lifecycle_stage";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_LIFECYCLE_STAGE)
  private EmploymentLifecycleStage employmentLifecycleStage;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<ModelFile> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_TITLE = "job_title";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private String manager;

  public static final String SERIALIZED_NAME_ONBOARDING_TASKS = "onboarding_tasks";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_TASKS)
  private OnboardingTasks onboardingTasks;

  public static final String SERIALIZED_NAME_PERSONAL_DETAILS = "personal_details";
  @SerializedName(SERIALIZED_NAME_PERSONAL_DETAILS)
  private Object personalDetails;

  public static final String SERIALIZED_NAME_PERSONAL_EMAIL = "personal_email";
  @SerializedName(SERIALIZED_NAME_PERSONAL_EMAIL)
  private String personalEmail;

  public static final String SERIALIZED_NAME_PRICING_PLAN_DETAILS = "pricing_plan_details";
  @SerializedName(SERIALIZED_NAME_PRICING_PLAN_DETAILS)
  private PricingPlanDetails pricingPlanDetails;

  public static final String SERIALIZED_NAME_PROBATION_PERIOD_END_DATE = "probation_period_end_date";
  @SerializedName(SERIALIZED_NAME_PROBATION_PERIOD_END_DATE)
  private LocalDate probationPeriodEndDate;

  public static final String SERIALIZED_NAME_PROVISIONAL_START_DATE = "provisional_start_date";
  @SerializedName(SERIALIZED_NAME_PROVISIONAL_START_DATE)
  private LocalDate provisionalStartDate;

  public static final String SERIALIZED_NAME_SENIORITY_DATE = "seniority_date";
  @SerializedName(SERIALIZED_NAME_SENIORITY_DATE)
  private OffsetDateTime seniorityDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EmploymentStatus status;

  /**
   * For the employment types &#x60;contractor&#x60;, &#x60;global_payroll_employee&#x60; and &#x60;direct_employee&#x60;, only [List employments](https://gateway.remote.com/v1/docs/openapi.html) and [Show employment](https://gateway.remote.com/v1/docs/openapi.html) operations are available. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    EMPLOYEE("employee"),
    
    CONTRACTOR("contractor"),
    
    DIRECT_EMPLOYEE("direct_employee"),
    
    GLOBAL_PAYROLL_EMPLOYEE("global_payroll_employee");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_STATUS = "user_status";
  @SerializedName(SERIALIZED_NAME_USER_STATUS)
  private UserStatus userStatus;

  public Employment() {
  }

  public Employment activeContractId(String activeContractId) {
    
    
    
    
    this.activeContractId = activeContractId;
    return this;
  }

   /**
   * Get activeContractId
   * @return activeContractId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getActiveContractId() {
    return activeContractId;
  }


  public void setActiveContractId(String activeContractId) {
    
    
    
    this.activeContractId = activeContractId;
  }


  public Employment addressDetails(Object addressDetails) {
    
    
    
    
    this.addressDetails = addressDetails;
    return this;
  }

   /**
   * Home address information. Its properties may vary depending on the country.
   * @return addressDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Home address information. Its properties may vary depending on the country.")

  public Object getAddressDetails() {
    return addressDetails;
  }


  public void setAddressDetails(Object addressDetails) {
    
    
    
    this.addressDetails = addressDetails;
  }


  public Employment administrativeDetails(Object administrativeDetails) {
    
    
    
    
    this.administrativeDetails = administrativeDetails;
    return this;
  }

   /**
   * Administrative information. Its properties may vary depending on the country.
   * @return administrativeDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Administrative information. Its properties may vary depending on the country.")

  public Object getAdministrativeDetails() {
    return administrativeDetails;
  }


  public void setAdministrativeDetails(Object administrativeDetails) {
    
    
    
    this.administrativeDetails = administrativeDetails;
  }


  public Employment bankAccountDetails(List<List> bankAccountDetails) {
    
    
    
    
    this.bankAccountDetails = bankAccountDetails;
    return this;
  }

  public Employment addBankAccountDetailsItem(List bankAccountDetailsItem) {
    this.bankAccountDetails.add(bankAccountDetailsItem);
    return this;
  }

   /**
   * Get bankAccountDetails
   * @return bankAccountDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<List> getBankAccountDetails() {
    return bankAccountDetails;
  }


  public void setBankAccountDetails(List<List> bankAccountDetails) {
    
    
    
    this.bankAccountDetails = bankAccountDetails;
  }


  public Employment basicInformation(Object basicInformation) {
    
    
    
    
    this.basicInformation = basicInformation;
    return this;
  }

   /**
   * Employment basic information. Its properties may vary depending on the country. 
   * @return basicInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employment basic information. Its properties may vary depending on the country. ")

  public Object getBasicInformation() {
    return basicInformation;
  }


  public void setBasicInformation(Object basicInformation) {
    
    
    
    this.basicInformation = basicInformation;
  }


  public Employment billingAddressDetails(Object billingAddressDetails) {
    
    
    
    
    this.billingAddressDetails = billingAddressDetails;
    return this;
  }

   /**
   * Billing address information. Its properties may vary depending on the country.
   * @return billingAddressDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Billing address information. Its properties may vary depending on the country.")

  public Object getBillingAddressDetails() {
    return billingAddressDetails;
  }


  public void setBillingAddressDetails(Object billingAddressDetails) {
    
    
    
    this.billingAddressDetails = billingAddressDetails;
  }


  public Employment companyId(String companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "e31adae1-company-id-af5fba7dd803", required = true, value = "")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    
    
    
    this.companyId = companyId;
  }


  public Employment contractDetails(Object contractDetails) {
    
    
    
    
    this.contractDetails = contractDetails;
    return this;
  }

   /**
   * Contract information. Its properties may vary depending on the country.
   * @return contractDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Contract information. Its properties may vary depending on the country.")

  public Object getContractDetails() {
    return contractDetails;
  }


  public void setContractDetails(Object contractDetails) {
    
    
    
    this.contractDetails = contractDetails;
  }


  public Employment country(Country country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Country getCountry() {
    return country;
  }


  public void setCountry(Country country) {
    
    
    
    this.country = country;
  }


  public Employment createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-11-11T18:44:39", required = true, value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Employment department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Name of related department, if any. Otherwise, null.
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of related department, if any. Otherwise, null.")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public Employment departmentId(String departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Unique ID of related department, if any. Otherwise, null.
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "663e0b79-c893-45ff-a1b2-f6dcabc098b5", value = "Unique ID of related department, if any. Otherwise, null.")

  public String getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(String departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public Employment emergencyContactDetails(Object emergencyContactDetails) {
    
    
    
    
    this.emergencyContactDetails = emergencyContactDetails;
    return this;
  }

   /**
   * Emergency contact information. Its properties may vary depending on the country.
   * @return emergencyContactDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Emergency contact information. Its properties may vary depending on the country.")

  public Object getEmergencyContactDetails() {
    return emergencyContactDetails;
  }


  public void setEmergencyContactDetails(Object emergencyContactDetails) {
    
    
    
    this.emergencyContactDetails = emergencyContactDetails;
  }


  public Employment employmentLifecycleStage(EmploymentLifecycleStage employmentLifecycleStage) {
    
    
    
    
    this.employmentLifecycleStage = employmentLifecycleStage;
    return this;
  }

   /**
   * Get employmentLifecycleStage
   * @return employmentLifecycleStage
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmploymentLifecycleStage getEmploymentLifecycleStage() {
    return employmentLifecycleStage;
  }


  public void setEmploymentLifecycleStage(EmploymentLifecycleStage employmentLifecycleStage) {
    
    
    
    this.employmentLifecycleStage = employmentLifecycleStage;
  }


  public Employment files(List<ModelFile> files) {
    
    
    
    
    this.files = files;
    return this;
  }

  public Employment addFilesItem(ModelFile filesItem) {
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ModelFile> getFiles() {
    return files;
  }


  public void setFiles(List<ModelFile> files) {
    
    
    
    this.files = files;
  }


  public Employment fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Jane Smith", required = true, value = "")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public Employment id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "20a72f86-employment-id-9e4942a902ff", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Employment jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Engineer", required = true, value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public Employment manager(String manager) {
    
    
    
    
    this.manager = manager;
    return this;
  }

   /**
   * Get manager
   * @return manager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getManager() {
    return manager;
  }


  public void setManager(String manager) {
    
    
    
    this.manager = manager;
  }


  public Employment onboardingTasks(OnboardingTasks onboardingTasks) {
    
    
    
    
    this.onboardingTasks = onboardingTasks;
    return this;
  }

   /**
   * Get onboardingTasks
   * @return onboardingTasks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OnboardingTasks getOnboardingTasks() {
    return onboardingTasks;
  }


  public void setOnboardingTasks(OnboardingTasks onboardingTasks) {
    
    
    
    this.onboardingTasks = onboardingTasks;
  }


  public Employment personalDetails(Object personalDetails) {
    
    
    
    
    this.personalDetails = personalDetails;
    return this;
  }

   /**
   * Personal details information. Its properties may vary depending on the country.
   * @return personalDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Personal details information. Its properties may vary depending on the country.")

  public Object getPersonalDetails() {
    return personalDetails;
  }


  public void setPersonalDetails(Object personalDetails) {
    
    
    
    this.personalDetails = personalDetails;
  }


  public Employment personalEmail(String personalEmail) {
    
    
    
    
    this.personalEmail = personalEmail;
    return this;
  }

   /**
   * Get personalEmail
   * @return personalEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jane@smith.com", required = true, value = "")

  public String getPersonalEmail() {
    return personalEmail;
  }


  public void setPersonalEmail(String personalEmail) {
    
    
    
    this.personalEmail = personalEmail;
  }


  public Employment pricingPlanDetails(PricingPlanDetails pricingPlanDetails) {
    
    
    
    
    this.pricingPlanDetails = pricingPlanDetails;
    return this;
  }

   /**
   * Get pricingPlanDetails
   * @return pricingPlanDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PricingPlanDetails getPricingPlanDetails() {
    return pricingPlanDetails;
  }


  public void setPricingPlanDetails(PricingPlanDetails pricingPlanDetails) {
    
    
    
    this.pricingPlanDetails = pricingPlanDetails;
  }


  public Employment probationPeriodEndDate(LocalDate probationPeriodEndDate) {
    
    
    
    
    this.probationPeriodEndDate = probationPeriodEndDate;
    return this;
  }

   /**
   * Get probationPeriodEndDate
   * @return probationPeriodEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getProbationPeriodEndDate() {
    return probationPeriodEndDate;
  }


  public void setProbationPeriodEndDate(LocalDate probationPeriodEndDate) {
    
    
    
    this.probationPeriodEndDate = probationPeriodEndDate;
  }


  public Employment provisionalStartDate(LocalDate provisionalStartDate) {
    
    
    
    
    this.provisionalStartDate = provisionalStartDate;
    return this;
  }

   /**
   * Indicates the expected start date of the employee or contractor.  Required for employees, but optional for contractors. Date format is in ISO8601 without the time component.  See the **Date and Time Format** documentation for more details on how the Remote API works with dates. 
   * @return provisionalStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Jul 02 17:00:00 PDT 2021", value = "Indicates the expected start date of the employee or contractor.  Required for employees, but optional for contractors. Date format is in ISO8601 without the time component.  See the **Date and Time Format** documentation for more details on how the Remote API works with dates. ")

  public LocalDate getProvisionalStartDate() {
    return provisionalStartDate;
  }


  public void setProvisionalStartDate(LocalDate provisionalStartDate) {
    
    
    
    this.provisionalStartDate = provisionalStartDate;
  }


  public Employment seniorityDate(OffsetDateTime seniorityDate) {
    
    
    
    
    this.seniorityDate = seniorityDate;
    return this;
  }

   /**
   * The date the employee first started working for your company. If you donâ€™t include a seniority date, the employeeâ€™s start date with Remote will be deemed as the start of the employeeâ€™s seniority.  **Example**: Your employee started working for your company on Feb 1, 2022. On Aug 1, 2022, you transferred the employee to Remote and started managing them on the platform. Feb 1, 2022 would be their seniority date. Aug 1, 2022 would be their starting date. 
   * @return seniorityDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date the employee first started working for your company. If you donâ€™t include a seniority date, the employeeâ€™s start date with Remote will be deemed as the start of the employeeâ€™s seniority.  **Example**: Your employee started working for your company on Feb 1, 2022. On Aug 1, 2022, you transferred the employee to Remote and started managing them on the platform. Feb 1, 2022 would be their seniority date. Aug 1, 2022 would be their starting date. ")

  public OffsetDateTime getSeniorityDate() {
    return seniorityDate;
  }


  public void setSeniorityDate(OffsetDateTime seniorityDate) {
    
    
    
    this.seniorityDate = seniorityDate;
  }


  public Employment status(EmploymentStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmploymentStatus getStatus() {
    return status;
  }


  public void setStatus(EmploymentStatus status) {
    
    
    
    this.status = status;
  }


  public Employment type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * For the employment types &#x60;contractor&#x60;, &#x60;global_payroll_employee&#x60; and &#x60;direct_employee&#x60;, only [List employments](https://gateway.remote.com/v1/docs/openapi.html) and [Show employment](https://gateway.remote.com/v1/docs/openapi.html) operations are available. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EMPLOYEE", required = true, value = "For the employment types `contractor`, `global_payroll_employee` and `direct_employee`, only [List employments](https://gateway.remote.com/v1/docs/openapi.html) and [Show employment](https://gateway.remote.com/v1/docs/openapi.html) operations are available. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Employment updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public Employment userStatus(UserStatus userStatus) {
    
    
    
    
    this.userStatus = userStatus;
    return this;
  }

   /**
   * Get userStatus
   * @return userStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserStatus getUserStatus() {
    return userStatus;
  }


  public void setUserStatus(UserStatus userStatus) {
    
    
    
    this.userStatus = userStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Employment instance itself
   */
  public Employment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employment employment = (Employment) o;
    return Objects.equals(this.activeContractId, employment.activeContractId) &&
        Objects.equals(this.addressDetails, employment.addressDetails) &&
        Objects.equals(this.administrativeDetails, employment.administrativeDetails) &&
        Objects.equals(this.bankAccountDetails, employment.bankAccountDetails) &&
        Objects.equals(this.basicInformation, employment.basicInformation) &&
        Objects.equals(this.billingAddressDetails, employment.billingAddressDetails) &&
        Objects.equals(this.companyId, employment.companyId) &&
        Objects.equals(this.contractDetails, employment.contractDetails) &&
        Objects.equals(this.country, employment.country) &&
        Objects.equals(this.createdAt, employment.createdAt) &&
        Objects.equals(this.department, employment.department) &&
        Objects.equals(this.departmentId, employment.departmentId) &&
        Objects.equals(this.emergencyContactDetails, employment.emergencyContactDetails) &&
        Objects.equals(this.employmentLifecycleStage, employment.employmentLifecycleStage) &&
        Objects.equals(this.files, employment.files) &&
        Objects.equals(this.fullName, employment.fullName) &&
        Objects.equals(this.id, employment.id) &&
        Objects.equals(this.jobTitle, employment.jobTitle) &&
        Objects.equals(this.manager, employment.manager) &&
        Objects.equals(this.onboardingTasks, employment.onboardingTasks) &&
        Objects.equals(this.personalDetails, employment.personalDetails) &&
        Objects.equals(this.personalEmail, employment.personalEmail) &&
        Objects.equals(this.pricingPlanDetails, employment.pricingPlanDetails) &&
        Objects.equals(this.probationPeriodEndDate, employment.probationPeriodEndDate) &&
        Objects.equals(this.provisionalStartDate, employment.provisionalStartDate) &&
        Objects.equals(this.seniorityDate, employment.seniorityDate) &&
        Objects.equals(this.status, employment.status) &&
        Objects.equals(this.type, employment.type) &&
        Objects.equals(this.updatedAt, employment.updatedAt) &&
        Objects.equals(this.userStatus, employment.userStatus)&&
        Objects.equals(this.additionalProperties, employment.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeContractId, addressDetails, administrativeDetails, bankAccountDetails, basicInformation, billingAddressDetails, companyId, contractDetails, country, createdAt, department, departmentId, emergencyContactDetails, employmentLifecycleStage, files, fullName, id, jobTitle, manager, onboardingTasks, personalDetails, personalEmail, pricingPlanDetails, probationPeriodEndDate, provisionalStartDate, seniorityDate, status, type, updatedAt, userStatus, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employment {\n");
    sb.append("    activeContractId: ").append(toIndentedString(activeContractId)).append("\n");
    sb.append("    addressDetails: ").append(toIndentedString(addressDetails)).append("\n");
    sb.append("    administrativeDetails: ").append(toIndentedString(administrativeDetails)).append("\n");
    sb.append("    bankAccountDetails: ").append(toIndentedString(bankAccountDetails)).append("\n");
    sb.append("    basicInformation: ").append(toIndentedString(basicInformation)).append("\n");
    sb.append("    billingAddressDetails: ").append(toIndentedString(billingAddressDetails)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    contractDetails: ").append(toIndentedString(contractDetails)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    emergencyContactDetails: ").append(toIndentedString(emergencyContactDetails)).append("\n");
    sb.append("    employmentLifecycleStage: ").append(toIndentedString(employmentLifecycleStage)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    onboardingTasks: ").append(toIndentedString(onboardingTasks)).append("\n");
    sb.append("    personalDetails: ").append(toIndentedString(personalDetails)).append("\n");
    sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
    sb.append("    pricingPlanDetails: ").append(toIndentedString(pricingPlanDetails)).append("\n");
    sb.append("    probationPeriodEndDate: ").append(toIndentedString(probationPeriodEndDate)).append("\n");
    sb.append("    provisionalStartDate: ").append(toIndentedString(provisionalStartDate)).append("\n");
    sb.append("    seniorityDate: ").append(toIndentedString(seniorityDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userStatus: ").append(toIndentedString(userStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_contract_id");
    openapiFields.add("address_details");
    openapiFields.add("administrative_details");
    openapiFields.add("bank_account_details");
    openapiFields.add("basic_information");
    openapiFields.add("billing_address_details");
    openapiFields.add("company_id");
    openapiFields.add("contract_details");
    openapiFields.add("country");
    openapiFields.add("created_at");
    openapiFields.add("department");
    openapiFields.add("department_id");
    openapiFields.add("emergency_contact_details");
    openapiFields.add("employment_lifecycle_stage");
    openapiFields.add("files");
    openapiFields.add("full_name");
    openapiFields.add("id");
    openapiFields.add("job_title");
    openapiFields.add("manager");
    openapiFields.add("onboarding_tasks");
    openapiFields.add("personal_details");
    openapiFields.add("personal_email");
    openapiFields.add("pricing_plan_details");
    openapiFields.add("probation_period_end_date");
    openapiFields.add("provisional_start_date");
    openapiFields.add("seniority_date");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("updated_at");
    openapiFields.add("user_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address_details");
    openapiRequiredFields.add("administrative_details");
    openapiRequiredFields.add("bank_account_details");
    openapiRequiredFields.add("billing_address_details");
    openapiRequiredFields.add("company_id");
    openapiRequiredFields.add("contract_details");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("emergency_contact_details");
    openapiRequiredFields.add("employment_lifecycle_stage");
    openapiRequiredFields.add("files");
    openapiRequiredFields.add("full_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("job_title");
    openapiRequiredFields.add("onboarding_tasks");
    openapiRequiredFields.add("personal_details");
    openapiRequiredFields.add("personal_email");
    openapiRequiredFields.add("pricing_plan_details");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Employment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Employment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employment is not found in the empty JSON string", Employment.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Employment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("active_contract_id") != null && !jsonObj.get("active_contract_id").isJsonNull()) && !jsonObj.get("active_contract_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_contract_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_contract_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("bank_account_details") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bank_account_details").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_account_details` to be an array in the JSON string but got `%s`", jsonObj.get("bank_account_details").toString()));
      }
      if (!jsonObj.get("company_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_id").toString()));
      }
      // validate the required field `country`
      Country.validateJsonObject(jsonObj.getAsJsonObject("country"));
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("department").isJsonNull() && (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if (!jsonObj.get("department_id").isJsonNull() && (jsonObj.get("department_id") != null && !jsonObj.get("department_id").isJsonNull()) && !jsonObj.get("department_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
      }

      JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
      // validate the required field `files` (array)
      for (int i = 0; i < jsonArrayfiles.size(); i++) {
        ModelFile.validateJsonObject(jsonArrayfiles.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("job_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_title").toString()));
      }
      if ((jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) && !jsonObj.get("manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager").toString()));
      }
      // validate the required field `onboarding_tasks`
      OnboardingTasks.validateJsonObject(jsonObj.getAsJsonObject("onboarding_tasks"));
      if (!jsonObj.get("personal_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personal_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personal_email").toString()));
      }
      // validate the required field `pricing_plan_details`
      PricingPlanDetails.validateJsonObject(jsonObj.getAsJsonObject("pricing_plan_details"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employment.class));

       return (TypeAdapter<T>) new TypeAdapter<Employment>() {
           @Override
           public void write(JsonWriter out, Employment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Employment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Employment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Employment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Employment
  * @throws IOException if the JSON string is invalid with respect to Employment
  */
  public static Employment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employment.class);
  }

 /**
  * Convert an instance of Employment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

