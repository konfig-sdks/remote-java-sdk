/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets TimeoffType
 */
@JsonAdapter(TimeoffType.Adapter.class)public enum TimeoffType {
  
  PAID_TIME_OFF("paid_time_off"),
  
  SICK_LEAVE("sick_leave"),
  
  PUBLIC_HOLIDAY("public_holiday"),
  
  UNPAID_LEAVE("unpaid_leave"),
  
  EXTENDED_LEAVE("extended_leave"),
  
  IN_LIEU_TIME("in_lieu_time"),
  
  MATERNITY_LEAVE("maternity_leave"),
  
  PATERNITY_LEAVE("paternity_leave"),
  
  PARENTAL_LEAVE("parental_leave"),
  
  BEREAVEMENT("bereavement"),
  
  MILITARY_LEAVE("military_leave"),
  
  OTHER("other");

  private String value;

  TimeoffType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TimeoffType fromValue(String value) {
    for (TimeoffType b : TimeoffType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TimeoffType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TimeoffType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TimeoffType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TimeoffType.fromValue(value);
    }
  }
}

