/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Base64File;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 *   All the params needed to create an expense.    An expense can be created using the &#x60;receipt&#x60; or &#x60;receipts&#x60; fields; however, these fields are not allowed together within the same object.\&quot; 
 */
@ApiModel(description = "  All the params needed to create an expense.    An expense can be created using the `receipt` or `receipts` fields; however, these fields are not allowed together within the same object.\" ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ParamsToCreateExpense {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  /**
   * Categories allowed for an expense
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
 public enum CategoryEnum {
    EDUCATION_TRAINING("education_training"),
    
    HOME_OFFICE("home_office"),
    
    MEALS("meals"),
    
    OTHER("other"),
    
    PHONE_UTILITIES("phone_utilities"),
    
    TECH_EQUIPMENT("tech_equipment"),
    
    TRAVEL("travel"),
    
    COWORKING("coworking");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EMPLOYMENT_ID = "employment_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_ID)
  private String employmentId;

  public static final String SERIALIZED_NAME_EXPENSE_DATE = "expense_date";
  @SerializedName(SERIALIZED_NAME_EXPENSE_DATE)
  private String expenseDate;

  public static final String SERIALIZED_NAME_RECEIPT = "receipt";
  @SerializedName(SERIALIZED_NAME_RECEIPT)
  private Base64File receipt;

  public static final String SERIALIZED_NAME_RECEIPTS = "receipts";
  @SerializedName(SERIALIZED_NAME_RECEIPTS)
  private List<Base64File> receipts = null;

  public static final String SERIALIZED_NAME_REVIEWED_AT = "reviewed_at";
  @SerializedName(SERIALIZED_NAME_REVIEWED_AT)
  private LocalDate reviewedAt;

  public static final String SERIALIZED_NAME_REVIEWER_ID = "reviewer_id";
  @SerializedName(SERIALIZED_NAME_REVIEWER_ID)
  private String reviewerId;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Integer taxAmount;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public ParamsToCreateExpense() {
  }

  public ParamsToCreateExpense title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "new keyboard", required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public ParamsToCreateExpense amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "8000", required = true, value = "")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public ParamsToCreateExpense category(CategoryEnum category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Categories allowed for an expense
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "HOME_OFFICE", value = "Categories allowed for an expense")

  public CategoryEnum getCategory() {
    return category;
  }


  public void setCategory(CategoryEnum category) {
    
    
    
    this.category = category;
  }


  public ParamsToCreateExpense currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   *   The three-letter code for the expense currency.&lt;br/&gt;   Examples: &#x60;\&quot;USD\&quot;&#x60;, &#x60;\&quot;EUR\&quot;&#x60;, &#x60;\&quot;CAD\&quot;&#x60; 
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EUR", required = true, value = "  The three-letter code for the expense currency.<br/>   Examples: `\"USD\"`, `\"EUR\"`, `\"CAD\"` ")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public ParamsToCreateExpense employmentId(String employmentId) {
    
    
    
    
    this.employmentId = employmentId;
    return this;
  }

   /**
   * The ID for the employment to which this expense relates.
   * @return employmentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "d4ebc714-4950-47a9-a464-28e1f1ab2a90", required = true, value = "The ID for the employment to which this expense relates.")

  public String getEmploymentId() {
    return employmentId;
  }


  public void setEmploymentId(String employmentId) {
    
    
    
    this.employmentId = employmentId;
  }


  public ParamsToCreateExpense expenseDate(String expenseDate) {
    
    
    
    
    this.expenseDate = expenseDate;
    return this;
  }

   /**
   * Date of the purchase, which must be in the past
   * @return expenseDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-12-11", required = true, value = "Date of the purchase, which must be in the past")

  public String getExpenseDate() {
    return expenseDate;
  }


  public void setExpenseDate(String expenseDate) {
    
    
    
    this.expenseDate = expenseDate;
  }


  public ParamsToCreateExpense receipt(Base64File receipt) {
    
    
    
    
    this.receipt = receipt;
    return this;
  }

   /**
   * Get receipt
   * @return receipt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Base64File getReceipt() {
    return receipt;
  }


  public void setReceipt(Base64File receipt) {
    
    
    
    this.receipt = receipt;
  }


  public ParamsToCreateExpense receipts(List<Base64File> receipts) {
    
    
    
    
    this.receipts = receipts;
    return this;
  }

  public ParamsToCreateExpense addReceiptsItem(Base64File receiptsItem) {
    if (this.receipts == null) {
      this.receipts = new ArrayList<>();
    }
    this.receipts.add(receiptsItem);
    return this;
  }

   /**
   * Get receipts
   * @return receipts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Base64File> getReceipts() {
    return receipts;
  }


  public void setReceipts(List<Base64File> receipts) {
    
    
    
    this.receipts = receipts;
  }


  public ParamsToCreateExpense reviewedAt(LocalDate reviewedAt) {
    
    
    
    
    this.reviewedAt = reviewedAt;
    return this;
  }

   /**
   * The date and time that the expense was reviewed in ISO8601 format. If not provided, it defaults to the current datetime.
   * @return reviewedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time that the expense was reviewed in ISO8601 format. If not provided, it defaults to the current datetime.")

  public LocalDate getReviewedAt() {
    return reviewedAt;
  }


  public void setReviewedAt(LocalDate reviewedAt) {
    
    
    
    this.reviewedAt = reviewedAt;
  }


  public ParamsToCreateExpense reviewerId(String reviewerId) {
    
    
    
    
    this.reviewerId = reviewerId;
    return this;
  }

   /**
   * If the person reviewing the expense is a user in Remote, you can provide its user id for this field. If a value is not provided, defaults to the user that generated the API token.
   * @return reviewerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14c14128-f5f4-475a-8ec0-6329b4832a61", value = "If the person reviewing the expense is a user in Remote, you can provide its user id for this field. If a value is not provided, defaults to the user that generated the API token.")

  public String getReviewerId() {
    return reviewerId;
  }


  public void setReviewerId(String reviewerId) {
    
    
    
    this.reviewerId = reviewerId;
  }


  public ParamsToCreateExpense taxAmount(Integer taxAmount) {
    
    
    
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Get taxAmount
   * @return taxAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "")

  public Integer getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(Integer taxAmount) {
    
    
    
    this.taxAmount = taxAmount;
  }


  public ParamsToCreateExpense timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * [TZ identifier](https://www.iana.org/time-zones)
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Etc/UTC", value = "[TZ identifier](https://www.iana.org/time-zones)")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ParamsToCreateExpense instance itself
   */
  public ParamsToCreateExpense putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParamsToCreateExpense paramsToCreateExpense = (ParamsToCreateExpense) o;
    return Objects.equals(this.title, paramsToCreateExpense.title) &&
        Objects.equals(this.amount, paramsToCreateExpense.amount) &&
        Objects.equals(this.category, paramsToCreateExpense.category) &&
        Objects.equals(this.currency, paramsToCreateExpense.currency) &&
        Objects.equals(this.employmentId, paramsToCreateExpense.employmentId) &&
        Objects.equals(this.expenseDate, paramsToCreateExpense.expenseDate) &&
        Objects.equals(this.receipt, paramsToCreateExpense.receipt) &&
        Objects.equals(this.receipts, paramsToCreateExpense.receipts) &&
        Objects.equals(this.reviewedAt, paramsToCreateExpense.reviewedAt) &&
        Objects.equals(this.reviewerId, paramsToCreateExpense.reviewerId) &&
        Objects.equals(this.taxAmount, paramsToCreateExpense.taxAmount) &&
        Objects.equals(this.timezone, paramsToCreateExpense.timezone)&&
        Objects.equals(this.additionalProperties, paramsToCreateExpense.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, amount, category, currency, employmentId, expenseDate, receipt, receipts, reviewedAt, reviewerId, taxAmount, timezone, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParamsToCreateExpense {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    employmentId: ").append(toIndentedString(employmentId)).append("\n");
    sb.append("    expenseDate: ").append(toIndentedString(expenseDate)).append("\n");
    sb.append("    receipt: ").append(toIndentedString(receipt)).append("\n");
    sb.append("    receipts: ").append(toIndentedString(receipts)).append("\n");
    sb.append("    reviewedAt: ").append(toIndentedString(reviewedAt)).append("\n");
    sb.append("    reviewerId: ").append(toIndentedString(reviewerId)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("amount");
    openapiFields.add("category");
    openapiFields.add("currency");
    openapiFields.add("employment_id");
    openapiFields.add("expense_date");
    openapiFields.add("receipt");
    openapiFields.add("receipts");
    openapiFields.add("reviewed_at");
    openapiFields.add("reviewer_id");
    openapiFields.add("tax_amount");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("employment_id");
    openapiRequiredFields.add("expense_date");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ParamsToCreateExpense
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ParamsToCreateExpense.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParamsToCreateExpense is not found in the empty JSON string", ParamsToCreateExpense.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParamsToCreateExpense.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("employment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment_id").toString()));
      }
      if (!jsonObj.get("expense_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expense_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expense_date").toString()));
      }
      // validate the optional field `receipt`
      if (jsonObj.get("receipt") != null && !jsonObj.get("receipt").isJsonNull()) {
        Base64File.validateJsonObject(jsonObj.getAsJsonObject("receipt"));
      }
      if (jsonObj.get("receipts") != null && !jsonObj.get("receipts").isJsonNull()) {
        JsonArray jsonArrayreceipts = jsonObj.getAsJsonArray("receipts");
        if (jsonArrayreceipts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("receipts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `receipts` to be an array in the JSON string but got `%s`", jsonObj.get("receipts").toString()));
          }

          // validate the optional field `receipts` (array)
          for (int i = 0; i < jsonArrayreceipts.size(); i++) {
            Base64File.validateJsonObject(jsonArrayreceipts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("reviewer_id") != null && !jsonObj.get("reviewer_id").isJsonNull()) && !jsonObj.get("reviewer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewer_id").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParamsToCreateExpense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParamsToCreateExpense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParamsToCreateExpense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParamsToCreateExpense.class));

       return (TypeAdapter<T>) new TypeAdapter<ParamsToCreateExpense>() {
           @Override
           public void write(JsonWriter out, ParamsToCreateExpense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ParamsToCreateExpense read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ParamsToCreateExpense instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ParamsToCreateExpense given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ParamsToCreateExpense
  * @throws IOException if the JSON string is invalid with respect to ParamsToCreateExpense
  */
  public static ParamsToCreateExpense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParamsToCreateExpense.class);
  }

 /**
  * Convert an instance of ParamsToCreateExpense to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

