/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Detailed breakdown of an employment&#39;s time off balance. 
 */
@ApiModel(description = "Detailed breakdown of an employment's time off balance. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeoffEntitlement {
  public static final String SERIALIZED_NAME_CAN_EXPIRE = "can_expire";
  @SerializedName(SERIALIZED_NAME_CAN_EXPIRE)
  private Boolean canExpire;

  public static final String SERIALIZED_NAME_ENTITLED = "entitled";
  @SerializedName(SERIALIZED_NAME_ENTITLED)
  private Object entitled = null;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiry_date";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private LocalDate expiryDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REMAINING = "remaining";
  @SerializedName(SERIALIZED_NAME_REMAINING)
  private Object remaining = null;

  public static final String SERIALIZED_NAME_TAKEN = "taken";
  @SerializedName(SERIALIZED_NAME_TAKEN)
  private Object taken = null;

  /**
   * Indicates the type of the time off entitlement.  &#x60;annual_paid_timeoff&#x60; entitlements are calculated from the employment&#39;s contract. All other time off entitlements are granted by the employer or automatically by the country of employment. 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    CARRYOVER_PTO("carryover_pto"),
    
    ADDITIONAL_PTO("additional_pto"),
    
    TRANSFER_PTO("transfer_pto"),
    
    ANNUAL_PAID_TIMEOFF("annual_paid_timeoff");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public TimeoffEntitlement() {
  }

  public TimeoffEntitlement canExpire(Boolean canExpire) {
    
    
    
    
    this.canExpire = canExpire;
    return this;
  }

   /**
   * Indicates whether this entitlement can expire.  When &#x60;false&#x60;, &#x60;expiry_date&#x60; will be &#x60;nil&#x60;. 
   * @return canExpire
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether this entitlement can expire.  When `false`, `expiry_date` will be `nil`. ")

  public Boolean getCanExpire() {
    return canExpire;
  }


  public void setCanExpire(Boolean canExpire) {
    
    
    
    this.canExpire = canExpire;
  }


  public TimeoffEntitlement entitled(Object entitled) {
    
    
    
    
    this.entitled = entitled;
    return this;
  }

   /**
   * Get entitled
   * @return entitled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getEntitled() {
    return entitled;
  }


  public void setEntitled(Object entitled) {
    
    
    
    this.entitled = entitled;
  }


  public TimeoffEntitlement expiryDate(LocalDate expiryDate) {
    
    
    
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Indicates the date this entitlement expires and is no longer counted towards the total time off entitlement for the employment.  When this entitlement doesn&#39;t expire, &#x60;expiry_date&#x60; will be set to &#x60;nil&#x60;. Use the &#x60;can_expire&#x60; parameter to determine whether an entitlement can expire or not. 
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Dec 30 16:00:00 PST 2022", required = true, value = "Indicates the date this entitlement expires and is no longer counted towards the total time off entitlement for the employment.  When this entitlement doesn't expire, `expiry_date` will be set to `nil`. Use the `can_expire` parameter to determine whether an entitlement can expire or not. ")

  public LocalDate getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(LocalDate expiryDate) {
    
    
    
    this.expiryDate = expiryDate;
  }


  public TimeoffEntitlement name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Extra days for good performance", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TimeoffEntitlement remaining(Object remaining) {
    
    
    
    
    this.remaining = remaining;
    return this;
  }

   /**
   * Get remaining
   * @return remaining
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getRemaining() {
    return remaining;
  }


  public void setRemaining(Object remaining) {
    
    
    
    this.remaining = remaining;
  }


  public TimeoffEntitlement taken(Object taken) {
    
    
    
    
    this.taken = taken;
    return this;
  }

   /**
   * Get taken
   * @return taken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getTaken() {
    return taken;
  }


  public void setTaken(Object taken) {
    
    
    
    this.taken = taken;
  }


  public TimeoffEntitlement type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Indicates the type of the time off entitlement.  &#x60;annual_paid_timeoff&#x60; entitlements are calculated from the employment&#39;s contract. All other time off entitlements are granted by the employer or automatically by the country of employment. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ADDITIONAL_PTO", required = true, value = "Indicates the type of the time off entitlement.  `annual_paid_timeoff` entitlements are calculated from the employment's contract. All other time off entitlements are granted by the employer or automatically by the country of employment. ")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeoffEntitlement instance itself
   */
  public TimeoffEntitlement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeoffEntitlement timeoffEntitlement = (TimeoffEntitlement) o;
    return Objects.equals(this.canExpire, timeoffEntitlement.canExpire) &&
        Objects.equals(this.entitled, timeoffEntitlement.entitled) &&
        Objects.equals(this.expiryDate, timeoffEntitlement.expiryDate) &&
        Objects.equals(this.name, timeoffEntitlement.name) &&
        Objects.equals(this.remaining, timeoffEntitlement.remaining) &&
        Objects.equals(this.taken, timeoffEntitlement.taken) &&
        Objects.equals(this.type, timeoffEntitlement.type)&&
        Objects.equals(this.additionalProperties, timeoffEntitlement.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canExpire, entitled, expiryDate, name, remaining, taken, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeoffEntitlement {\n");
    sb.append("    canExpire: ").append(toIndentedString(canExpire)).append("\n");
    sb.append("    entitled: ").append(toIndentedString(entitled)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    taken: ").append(toIndentedString(taken)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_expire");
    openapiFields.add("entitled");
    openapiFields.add("expiry_date");
    openapiFields.add("name");
    openapiFields.add("remaining");
    openapiFields.add("taken");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("can_expire");
    openapiRequiredFields.add("entitled");
    openapiRequiredFields.add("expiry_date");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("remaining");
    openapiRequiredFields.add("taken");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeoffEntitlement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeoffEntitlement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeoffEntitlement is not found in the empty JSON string", TimeoffEntitlement.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeoffEntitlement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeoffEntitlement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeoffEntitlement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeoffEntitlement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeoffEntitlement.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeoffEntitlement>() {
           @Override
           public void write(JsonWriter out, TimeoffEntitlement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeoffEntitlement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeoffEntitlement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeoffEntitlement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeoffEntitlement
  * @throws IOException if the JSON string is invalid with respect to TimeoffEntitlement
  */
  public static TimeoffEntitlement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeoffEntitlement.class);
  }

 /**
  * Convert an instance of TimeoffEntitlement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

