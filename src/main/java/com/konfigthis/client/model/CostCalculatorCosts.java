/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CostCalculatorCost;
import com.konfigthis.client.model.Currency;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CostCalculatorCosts
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CostCalculatorCosts {
  public static final String SERIALIZED_NAME_ANNUAL_BENEFITS_BREAKDOWN = "annual_benefits_breakdown";
  @SerializedName(SERIALIZED_NAME_ANNUAL_BENEFITS_BREAKDOWN)
  private List<CostCalculatorCost> annualBenefitsBreakdown = null;

  public static final String SERIALIZED_NAME_ANNUAL_BENEFITS_TOTAL = "annual_benefits_total";
  @SerializedName(SERIALIZED_NAME_ANNUAL_BENEFITS_TOTAL)
  private Integer annualBenefitsTotal;

  public static final String SERIALIZED_NAME_ANNUAL_CONTRIBUTIONS_BREAKDOWN = "annual_contributions_breakdown";
  @SerializedName(SERIALIZED_NAME_ANNUAL_CONTRIBUTIONS_BREAKDOWN)
  private List<CostCalculatorCost> annualContributionsBreakdown = null;

  public static final String SERIALIZED_NAME_ANNUAL_CONTRIBUTIONS_TOTAL = "annual_contributions_total";
  @SerializedName(SERIALIZED_NAME_ANNUAL_CONTRIBUTIONS_TOTAL)
  private Integer annualContributionsTotal;

  public static final String SERIALIZED_NAME_ANNUAL_GROSS_SALARY = "annual_gross_salary";
  @SerializedName(SERIALIZED_NAME_ANNUAL_GROSS_SALARY)
  private Integer annualGrossSalary;

  public static final String SERIALIZED_NAME_ANNUAL_TOTAL = "annual_total";
  @SerializedName(SERIALIZED_NAME_ANNUAL_TOTAL)
  private Integer annualTotal;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_EXTRA_STATUTORY_PAYMENTS_BREAKDOWN = "extra_statutory_payments_breakdown";
  @SerializedName(SERIALIZED_NAME_EXTRA_STATUTORY_PAYMENTS_BREAKDOWN)
  private List<CostCalculatorCost> extraStatutoryPaymentsBreakdown = null;

  public static final String SERIALIZED_NAME_EXTRA_STATUTORY_PAYMENTS_TOTAL = "extra_statutory_payments_total";
  @SerializedName(SERIALIZED_NAME_EXTRA_STATUTORY_PAYMENTS_TOTAL)
  private Integer extraStatutoryPaymentsTotal;

  public static final String SERIALIZED_NAME_MONTHLY_BENEFITS_BREAKDOWN = "monthly_benefits_breakdown";
  @SerializedName(SERIALIZED_NAME_MONTHLY_BENEFITS_BREAKDOWN)
  private List<CostCalculatorCost> monthlyBenefitsBreakdown = null;

  public static final String SERIALIZED_NAME_MONTHLY_BENEFITS_TOTAL = "monthly_benefits_total";
  @SerializedName(SERIALIZED_NAME_MONTHLY_BENEFITS_TOTAL)
  private Integer monthlyBenefitsTotal;

  public static final String SERIALIZED_NAME_MONTHLY_CONTRIBUTIONS_BREAKDOWN = "monthly_contributions_breakdown";
  @SerializedName(SERIALIZED_NAME_MONTHLY_CONTRIBUTIONS_BREAKDOWN)
  private List<CostCalculatorCost> monthlyContributionsBreakdown = null;

  public static final String SERIALIZED_NAME_MONTHLY_CONTRIBUTIONS_TOTAL = "monthly_contributions_total";
  @SerializedName(SERIALIZED_NAME_MONTHLY_CONTRIBUTIONS_TOTAL)
  private Integer monthlyContributionsTotal;

  public static final String SERIALIZED_NAME_MONTHLY_GROSS_SALARY = "monthly_gross_salary";
  @SerializedName(SERIALIZED_NAME_MONTHLY_GROSS_SALARY)
  private Integer monthlyGrossSalary;

  public static final String SERIALIZED_NAME_MONTHLY_TCE = "monthly_tce";
  @SerializedName(SERIALIZED_NAME_MONTHLY_TCE)
  private Integer monthlyTce;

  public static final String SERIALIZED_NAME_MONTHLY_TOTAL = "monthly_total";
  @SerializedName(SERIALIZED_NAME_MONTHLY_TOTAL)
  private Integer monthlyTotal;

  public CostCalculatorCosts() {
  }

  public CostCalculatorCosts annualBenefitsBreakdown(List<CostCalculatorCost> annualBenefitsBreakdown) {
    
    
    
    
    this.annualBenefitsBreakdown = annualBenefitsBreakdown;
    return this;
  }

  public CostCalculatorCosts addAnnualBenefitsBreakdownItem(CostCalculatorCost annualBenefitsBreakdownItem) {
    if (this.annualBenefitsBreakdown == null) {
      this.annualBenefitsBreakdown = new ArrayList<>();
    }
    this.annualBenefitsBreakdown.add(annualBenefitsBreakdownItem);
    return this;
  }

   /**
   * The list of all annual benefit costs
   * @return annualBenefitsBreakdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of all annual benefit costs")

  public List<CostCalculatorCost> getAnnualBenefitsBreakdown() {
    return annualBenefitsBreakdown;
  }


  public void setAnnualBenefitsBreakdown(List<CostCalculatorCost> annualBenefitsBreakdown) {
    
    
    
    this.annualBenefitsBreakdown = annualBenefitsBreakdown;
  }


  public CostCalculatorCosts annualBenefitsTotal(Integer annualBenefitsTotal) {
    
    
    
    
    this.annualBenefitsTotal = annualBenefitsTotal;
    return this;
  }

   /**
   * The annual benefits total that a company must pay for this employment
   * @return annualBenefitsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1441200", value = "The annual benefits total that a company must pay for this employment")

  public Integer getAnnualBenefitsTotal() {
    return annualBenefitsTotal;
  }


  public void setAnnualBenefitsTotal(Integer annualBenefitsTotal) {
    
    
    
    this.annualBenefitsTotal = annualBenefitsTotal;
  }


  public CostCalculatorCosts annualContributionsBreakdown(List<CostCalculatorCost> annualContributionsBreakdown) {
    
    
    
    
    this.annualContributionsBreakdown = annualContributionsBreakdown;
    return this;
  }

  public CostCalculatorCosts addAnnualContributionsBreakdownItem(CostCalculatorCost annualContributionsBreakdownItem) {
    if (this.annualContributionsBreakdown == null) {
      this.annualContributionsBreakdown = new ArrayList<>();
    }
    this.annualContributionsBreakdown.add(annualContributionsBreakdownItem);
    return this;
  }

   /**
   * The list of all annual employer contribution costs
   * @return annualContributionsBreakdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of all annual employer contribution costs")

  public List<CostCalculatorCost> getAnnualContributionsBreakdown() {
    return annualContributionsBreakdown;
  }


  public void setAnnualContributionsBreakdown(List<CostCalculatorCost> annualContributionsBreakdown) {
    
    
    
    this.annualContributionsBreakdown = annualContributionsBreakdown;
  }


  public CostCalculatorCosts annualContributionsTotal(Integer annualContributionsTotal) {
    
    
    
    
    this.annualContributionsTotal = annualContributionsTotal;
    return this;
  }

   /**
   * The annual contributions that a company must pay for this employment
   * @return annualContributionsTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1441200", required = true, value = "The annual contributions that a company must pay for this employment")

  public Integer getAnnualContributionsTotal() {
    return annualContributionsTotal;
  }


  public void setAnnualContributionsTotal(Integer annualContributionsTotal) {
    
    
    
    this.annualContributionsTotal = annualContributionsTotal;
  }


  public CostCalculatorCosts annualGrossSalary(Integer annualGrossSalary) {
    
    
    
    
    this.annualGrossSalary = annualGrossSalary;
    return this;
  }

   /**
   * The annual gross salary that the employee is going to earn
   * @return annualGrossSalary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "12000000", required = true, value = "The annual gross salary that the employee is going to earn")

  public Integer getAnnualGrossSalary() {
    return annualGrossSalary;
  }


  public void setAnnualGrossSalary(Integer annualGrossSalary) {
    
    
    
    this.annualGrossSalary = annualGrossSalary;
  }


  public CostCalculatorCosts annualTotal(Integer annualTotal) {
    
    
    
    
    this.annualTotal = annualTotal;
    return this;
  }

   /**
   * The annual gross salary + annual contributions + annual fee (monthly fee * 12) + extra statutory payments if applicable
   * @return annualTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "13441200", required = true, value = "The annual gross salary + annual contributions + annual fee (monthly fee * 12) + extra statutory payments if applicable")

  public Integer getAnnualTotal() {
    return annualTotal;
  }


  public void setAnnualTotal(Integer annualTotal) {
    
    
    
    this.annualTotal = annualTotal;
  }


  public CostCalculatorCosts currency(Currency currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    
    
    
    this.currency = currency;
  }


  public CostCalculatorCosts extraStatutoryPaymentsBreakdown(List<CostCalculatorCost> extraStatutoryPaymentsBreakdown) {
    
    
    
    
    this.extraStatutoryPaymentsBreakdown = extraStatutoryPaymentsBreakdown;
    return this;
  }

  public CostCalculatorCosts addExtraStatutoryPaymentsBreakdownItem(CostCalculatorCost extraStatutoryPaymentsBreakdownItem) {
    if (this.extraStatutoryPaymentsBreakdown == null) {
      this.extraStatutoryPaymentsBreakdown = new ArrayList<>();
    }
    this.extraStatutoryPaymentsBreakdown.add(extraStatutoryPaymentsBreakdownItem);
    return this;
  }

   /**
   * The list of all annual extra statutory payment costs
   * @return extraStatutoryPaymentsBreakdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of all annual extra statutory payment costs")

  public List<CostCalculatorCost> getExtraStatutoryPaymentsBreakdown() {
    return extraStatutoryPaymentsBreakdown;
  }


  public void setExtraStatutoryPaymentsBreakdown(List<CostCalculatorCost> extraStatutoryPaymentsBreakdown) {
    
    
    
    this.extraStatutoryPaymentsBreakdown = extraStatutoryPaymentsBreakdown;
  }


  public CostCalculatorCosts extraStatutoryPaymentsTotal(Integer extraStatutoryPaymentsTotal) {
    
    
    
    
    this.extraStatutoryPaymentsTotal = extraStatutoryPaymentsTotal;
    return this;
  }

   /**
   * 13th month salary, this happens for countries such as Philippines
   * @return extraStatutoryPaymentsTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "13th month salary, this happens for countries such as Philippines")

  public Integer getExtraStatutoryPaymentsTotal() {
    return extraStatutoryPaymentsTotal;
  }


  public void setExtraStatutoryPaymentsTotal(Integer extraStatutoryPaymentsTotal) {
    
    
    
    this.extraStatutoryPaymentsTotal = extraStatutoryPaymentsTotal;
  }


  public CostCalculatorCosts monthlyBenefitsBreakdown(List<CostCalculatorCost> monthlyBenefitsBreakdown) {
    
    
    
    
    this.monthlyBenefitsBreakdown = monthlyBenefitsBreakdown;
    return this;
  }

  public CostCalculatorCosts addMonthlyBenefitsBreakdownItem(CostCalculatorCost monthlyBenefitsBreakdownItem) {
    if (this.monthlyBenefitsBreakdown == null) {
      this.monthlyBenefitsBreakdown = new ArrayList<>();
    }
    this.monthlyBenefitsBreakdown.add(monthlyBenefitsBreakdownItem);
    return this;
  }

   /**
   * The list of all monthly benefit costs
   * @return monthlyBenefitsBreakdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of all monthly benefit costs")

  public List<CostCalculatorCost> getMonthlyBenefitsBreakdown() {
    return monthlyBenefitsBreakdown;
  }


  public void setMonthlyBenefitsBreakdown(List<CostCalculatorCost> monthlyBenefitsBreakdown) {
    
    
    
    this.monthlyBenefitsBreakdown = monthlyBenefitsBreakdown;
  }


  public CostCalculatorCosts monthlyBenefitsTotal(Integer monthlyBenefitsTotal) {
    
    
    
    
    this.monthlyBenefitsTotal = monthlyBenefitsTotal;
    return this;
  }

   /**
   * The benefits total that the company pays monthly
   * @return monthlyBenefitsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "120100", value = "The benefits total that the company pays monthly")

  public Integer getMonthlyBenefitsTotal() {
    return monthlyBenefitsTotal;
  }


  public void setMonthlyBenefitsTotal(Integer monthlyBenefitsTotal) {
    
    
    
    this.monthlyBenefitsTotal = monthlyBenefitsTotal;
  }


  public CostCalculatorCosts monthlyContributionsBreakdown(List<CostCalculatorCost> monthlyContributionsBreakdown) {
    
    
    
    
    this.monthlyContributionsBreakdown = monthlyContributionsBreakdown;
    return this;
  }

  public CostCalculatorCosts addMonthlyContributionsBreakdownItem(CostCalculatorCost monthlyContributionsBreakdownItem) {
    if (this.monthlyContributionsBreakdown == null) {
      this.monthlyContributionsBreakdown = new ArrayList<>();
    }
    this.monthlyContributionsBreakdown.add(monthlyContributionsBreakdownItem);
    return this;
  }

   /**
   * The list of all monthly employer contribution costs
   * @return monthlyContributionsBreakdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of all monthly employer contribution costs")

  public List<CostCalculatorCost> getMonthlyContributionsBreakdown() {
    return monthlyContributionsBreakdown;
  }


  public void setMonthlyContributionsBreakdown(List<CostCalculatorCost> monthlyContributionsBreakdown) {
    
    
    
    this.monthlyContributionsBreakdown = monthlyContributionsBreakdown;
  }


  public CostCalculatorCosts monthlyContributionsTotal(Integer monthlyContributionsTotal) {
    
    
    
    
    this.monthlyContributionsTotal = monthlyContributionsTotal;
    return this;
  }

   /**
   * The contributions that the company pays monthly
   * @return monthlyContributionsTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "120100", required = true, value = "The contributions that the company pays monthly")

  public Integer getMonthlyContributionsTotal() {
    return monthlyContributionsTotal;
  }


  public void setMonthlyContributionsTotal(Integer monthlyContributionsTotal) {
    
    
    
    this.monthlyContributionsTotal = monthlyContributionsTotal;
  }


  public CostCalculatorCosts monthlyGrossSalary(Integer monthlyGrossSalary) {
    
    
    
    
    this.monthlyGrossSalary = monthlyGrossSalary;
    return this;
  }

   /**
   * The gross monthly salary for the Employee
   * @return monthlyGrossSalary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000000", required = true, value = "The gross monthly salary for the Employee")

  public Integer getMonthlyGrossSalary() {
    return monthlyGrossSalary;
  }


  public void setMonthlyGrossSalary(Integer monthlyGrossSalary) {
    
    
    
    this.monthlyGrossSalary = monthlyGrossSalary;
  }


  public CostCalculatorCosts monthlyTce(Integer monthlyTce) {
    
    
    
    
    this.monthlyTce = monthlyTce;
    return this;
  }

   /**
   * Monthly gross salary + monthly contributions  (doesn&#39;t include fee)
   * @return monthlyTce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1120000", required = true, value = "Monthly gross salary + monthly contributions  (doesn't include fee)")

  public Integer getMonthlyTce() {
    return monthlyTce;
  }


  public void setMonthlyTce(Integer monthlyTce) {
    
    
    
    this.monthlyTce = monthlyTce;
  }


  public CostCalculatorCosts monthlyTotal(Integer monthlyTotal) {
    
    
    
    
    this.monthlyTotal = monthlyTotal;
    return this;
  }

   /**
   * Monthly gross salary + monthly contributions + monthly fee
   * @return monthlyTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1120100", required = true, value = "Monthly gross salary + monthly contributions + monthly fee")

  public Integer getMonthlyTotal() {
    return monthlyTotal;
  }


  public void setMonthlyTotal(Integer monthlyTotal) {
    
    
    
    this.monthlyTotal = monthlyTotal;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CostCalculatorCosts instance itself
   */
  public CostCalculatorCosts putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostCalculatorCosts costCalculatorCosts = (CostCalculatorCosts) o;
    return Objects.equals(this.annualBenefitsBreakdown, costCalculatorCosts.annualBenefitsBreakdown) &&
        Objects.equals(this.annualBenefitsTotal, costCalculatorCosts.annualBenefitsTotal) &&
        Objects.equals(this.annualContributionsBreakdown, costCalculatorCosts.annualContributionsBreakdown) &&
        Objects.equals(this.annualContributionsTotal, costCalculatorCosts.annualContributionsTotal) &&
        Objects.equals(this.annualGrossSalary, costCalculatorCosts.annualGrossSalary) &&
        Objects.equals(this.annualTotal, costCalculatorCosts.annualTotal) &&
        Objects.equals(this.currency, costCalculatorCosts.currency) &&
        Objects.equals(this.extraStatutoryPaymentsBreakdown, costCalculatorCosts.extraStatutoryPaymentsBreakdown) &&
        Objects.equals(this.extraStatutoryPaymentsTotal, costCalculatorCosts.extraStatutoryPaymentsTotal) &&
        Objects.equals(this.monthlyBenefitsBreakdown, costCalculatorCosts.monthlyBenefitsBreakdown) &&
        Objects.equals(this.monthlyBenefitsTotal, costCalculatorCosts.monthlyBenefitsTotal) &&
        Objects.equals(this.monthlyContributionsBreakdown, costCalculatorCosts.monthlyContributionsBreakdown) &&
        Objects.equals(this.monthlyContributionsTotal, costCalculatorCosts.monthlyContributionsTotal) &&
        Objects.equals(this.monthlyGrossSalary, costCalculatorCosts.monthlyGrossSalary) &&
        Objects.equals(this.monthlyTce, costCalculatorCosts.monthlyTce) &&
        Objects.equals(this.monthlyTotal, costCalculatorCosts.monthlyTotal)&&
        Objects.equals(this.additionalProperties, costCalculatorCosts.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualBenefitsBreakdown, annualBenefitsTotal, annualContributionsBreakdown, annualContributionsTotal, annualGrossSalary, annualTotal, currency, extraStatutoryPaymentsBreakdown, extraStatutoryPaymentsTotal, monthlyBenefitsBreakdown, monthlyBenefitsTotal, monthlyContributionsBreakdown, monthlyContributionsTotal, monthlyGrossSalary, monthlyTce, monthlyTotal, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostCalculatorCosts {\n");
    sb.append("    annualBenefitsBreakdown: ").append(toIndentedString(annualBenefitsBreakdown)).append("\n");
    sb.append("    annualBenefitsTotal: ").append(toIndentedString(annualBenefitsTotal)).append("\n");
    sb.append("    annualContributionsBreakdown: ").append(toIndentedString(annualContributionsBreakdown)).append("\n");
    sb.append("    annualContributionsTotal: ").append(toIndentedString(annualContributionsTotal)).append("\n");
    sb.append("    annualGrossSalary: ").append(toIndentedString(annualGrossSalary)).append("\n");
    sb.append("    annualTotal: ").append(toIndentedString(annualTotal)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    extraStatutoryPaymentsBreakdown: ").append(toIndentedString(extraStatutoryPaymentsBreakdown)).append("\n");
    sb.append("    extraStatutoryPaymentsTotal: ").append(toIndentedString(extraStatutoryPaymentsTotal)).append("\n");
    sb.append("    monthlyBenefitsBreakdown: ").append(toIndentedString(monthlyBenefitsBreakdown)).append("\n");
    sb.append("    monthlyBenefitsTotal: ").append(toIndentedString(monthlyBenefitsTotal)).append("\n");
    sb.append("    monthlyContributionsBreakdown: ").append(toIndentedString(monthlyContributionsBreakdown)).append("\n");
    sb.append("    monthlyContributionsTotal: ").append(toIndentedString(monthlyContributionsTotal)).append("\n");
    sb.append("    monthlyGrossSalary: ").append(toIndentedString(monthlyGrossSalary)).append("\n");
    sb.append("    monthlyTce: ").append(toIndentedString(monthlyTce)).append("\n");
    sb.append("    monthlyTotal: ").append(toIndentedString(monthlyTotal)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annual_benefits_breakdown");
    openapiFields.add("annual_benefits_total");
    openapiFields.add("annual_contributions_breakdown");
    openapiFields.add("annual_contributions_total");
    openapiFields.add("annual_gross_salary");
    openapiFields.add("annual_total");
    openapiFields.add("currency");
    openapiFields.add("extra_statutory_payments_breakdown");
    openapiFields.add("extra_statutory_payments_total");
    openapiFields.add("monthly_benefits_breakdown");
    openapiFields.add("monthly_benefits_total");
    openapiFields.add("monthly_contributions_breakdown");
    openapiFields.add("monthly_contributions_total");
    openapiFields.add("monthly_gross_salary");
    openapiFields.add("monthly_tce");
    openapiFields.add("monthly_total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("annual_contributions_total");
    openapiRequiredFields.add("annual_gross_salary");
    openapiRequiredFields.add("annual_total");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("extra_statutory_payments_total");
    openapiRequiredFields.add("monthly_contributions_total");
    openapiRequiredFields.add("monthly_gross_salary");
    openapiRequiredFields.add("monthly_tce");
    openapiRequiredFields.add("monthly_total");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CostCalculatorCosts
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CostCalculatorCosts.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostCalculatorCosts is not found in the empty JSON string", CostCalculatorCosts.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CostCalculatorCosts.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("annual_benefits_breakdown") != null && !jsonObj.get("annual_benefits_breakdown").isJsonNull()) {
        JsonArray jsonArrayannualBenefitsBreakdown = jsonObj.getAsJsonArray("annual_benefits_breakdown");
        if (jsonArrayannualBenefitsBreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annual_benefits_breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annual_benefits_breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("annual_benefits_breakdown").toString()));
          }

          // validate the optional field `annual_benefits_breakdown` (array)
          for (int i = 0; i < jsonArrayannualBenefitsBreakdown.size(); i++) {
            CostCalculatorCost.validateJsonObject(jsonArrayannualBenefitsBreakdown.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("annual_contributions_breakdown") != null && !jsonObj.get("annual_contributions_breakdown").isJsonNull()) {
        JsonArray jsonArrayannualContributionsBreakdown = jsonObj.getAsJsonArray("annual_contributions_breakdown");
        if (jsonArrayannualContributionsBreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annual_contributions_breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annual_contributions_breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("annual_contributions_breakdown").toString()));
          }

          // validate the optional field `annual_contributions_breakdown` (array)
          for (int i = 0; i < jsonArrayannualContributionsBreakdown.size(); i++) {
            CostCalculatorCost.validateJsonObject(jsonArrayannualContributionsBreakdown.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `currency`
      Currency.validateJsonObject(jsonObj.getAsJsonObject("currency"));
      if (jsonObj.get("extra_statutory_payments_breakdown") != null && !jsonObj.get("extra_statutory_payments_breakdown").isJsonNull()) {
        JsonArray jsonArrayextraStatutoryPaymentsBreakdown = jsonObj.getAsJsonArray("extra_statutory_payments_breakdown");
        if (jsonArrayextraStatutoryPaymentsBreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extra_statutory_payments_breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extra_statutory_payments_breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("extra_statutory_payments_breakdown").toString()));
          }

          // validate the optional field `extra_statutory_payments_breakdown` (array)
          for (int i = 0; i < jsonArrayextraStatutoryPaymentsBreakdown.size(); i++) {
            CostCalculatorCost.validateJsonObject(jsonArrayextraStatutoryPaymentsBreakdown.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("monthly_benefits_breakdown") != null && !jsonObj.get("monthly_benefits_breakdown").isJsonNull()) {
        JsonArray jsonArraymonthlyBenefitsBreakdown = jsonObj.getAsJsonArray("monthly_benefits_breakdown");
        if (jsonArraymonthlyBenefitsBreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monthly_benefits_breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monthly_benefits_breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("monthly_benefits_breakdown").toString()));
          }

          // validate the optional field `monthly_benefits_breakdown` (array)
          for (int i = 0; i < jsonArraymonthlyBenefitsBreakdown.size(); i++) {
            CostCalculatorCost.validateJsonObject(jsonArraymonthlyBenefitsBreakdown.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("monthly_contributions_breakdown") != null && !jsonObj.get("monthly_contributions_breakdown").isJsonNull()) {
        JsonArray jsonArraymonthlyContributionsBreakdown = jsonObj.getAsJsonArray("monthly_contributions_breakdown");
        if (jsonArraymonthlyContributionsBreakdown != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monthly_contributions_breakdown").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monthly_contributions_breakdown` to be an array in the JSON string but got `%s`", jsonObj.get("monthly_contributions_breakdown").toString()));
          }

          // validate the optional field `monthly_contributions_breakdown` (array)
          for (int i = 0; i < jsonArraymonthlyContributionsBreakdown.size(); i++) {
            CostCalculatorCost.validateJsonObject(jsonArraymonthlyContributionsBreakdown.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostCalculatorCosts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostCalculatorCosts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostCalculatorCosts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostCalculatorCosts.class));

       return (TypeAdapter<T>) new TypeAdapter<CostCalculatorCosts>() {
           @Override
           public void write(JsonWriter out, CostCalculatorCosts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CostCalculatorCosts read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CostCalculatorCosts instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CostCalculatorCosts given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CostCalculatorCosts
  * @throws IOException if the JSON string is invalid with respect to CostCalculatorCosts
  */
  public static CostCalculatorCosts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostCalculatorCosts.class);
  }

 /**
  * Convert an instance of CostCalculatorCosts to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

