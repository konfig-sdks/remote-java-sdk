/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmploymentTermType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CostCalculatorEmploymentParam
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CostCalculatorEmploymentParam {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_ANNUAL_GROSS_SALARY = "annual_gross_salary";
  @SerializedName(SERIALIZED_NAME_ANNUAL_GROSS_SALARY)
  private Integer annualGrossSalary;

  public static final String SERIALIZED_NAME_ANNUAL_GROSS_SALARY_IN_EMPLOYER_CURRENCY = "annual_gross_salary_in_employer_currency";
  @SerializedName(SERIALIZED_NAME_ANNUAL_GROSS_SALARY_IN_EMPLOYER_CURRENCY)
  private Integer annualGrossSalaryInEmployerCurrency;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TERM = "employment_term";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TERM)
  private EmploymentTermType employmentTerm;

  public static final String SERIALIZED_NAME_REGION_SLUG = "region_slug";
  @SerializedName(SERIALIZED_NAME_REGION_SLUG)
  private String regionSlug;

  public static final String SERIALIZED_NAME_REGIONAL_TO_EMPLOYER_EXCHANGE_RATE = "regional_to_employer_exchange_rate";
  @SerializedName(SERIALIZED_NAME_REGIONAL_TO_EMPLOYER_EXCHANGE_RATE)
  private String regionalToEmployerExchangeRate;

  public CostCalculatorEmploymentParam() {
  }

  public CostCalculatorEmploymentParam title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CostCalculatorEmploymentParam age(Integer age) {
    
    
    
    
    this.age = age;
    return this;
  }

   /**
   * Get age
   * @return age
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAge() {
    return age;
  }


  public void setAge(Integer age) {
    
    
    
    this.age = age;
  }


  public CostCalculatorEmploymentParam annualGrossSalary(Integer annualGrossSalary) {
    
    
    
    
    this.annualGrossSalary = annualGrossSalary;
    return this;
  }

   /**
   * Get annualGrossSalary
   * @return annualGrossSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAnnualGrossSalary() {
    return annualGrossSalary;
  }


  public void setAnnualGrossSalary(Integer annualGrossSalary) {
    
    
    
    this.annualGrossSalary = annualGrossSalary;
  }


  public CostCalculatorEmploymentParam annualGrossSalaryInEmployerCurrency(Integer annualGrossSalaryInEmployerCurrency) {
    
    
    
    
    this.annualGrossSalaryInEmployerCurrency = annualGrossSalaryInEmployerCurrency;
    return this;
  }

   /**
   * Get annualGrossSalaryInEmployerCurrency
   * @return annualGrossSalaryInEmployerCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAnnualGrossSalaryInEmployerCurrency() {
    return annualGrossSalaryInEmployerCurrency;
  }


  public void setAnnualGrossSalaryInEmployerCurrency(Integer annualGrossSalaryInEmployerCurrency) {
    
    
    
    this.annualGrossSalaryInEmployerCurrency = annualGrossSalaryInEmployerCurrency;
  }


  public CostCalculatorEmploymentParam employmentTerm(EmploymentTermType employmentTerm) {
    
    
    
    
    this.employmentTerm = employmentTerm;
    return this;
  }

   /**
   * Get employmentTerm
   * @return employmentTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentTermType getEmploymentTerm() {
    return employmentTerm;
  }


  public void setEmploymentTerm(EmploymentTermType employmentTerm) {
    
    
    
    this.employmentTerm = employmentTerm;
  }


  public CostCalculatorEmploymentParam regionSlug(String regionSlug) {
    
    
    
    
    this.regionSlug = regionSlug;
    return this;
  }

   /**
   * Get regionSlug
   * @return regionSlug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRegionSlug() {
    return regionSlug;
  }


  public void setRegionSlug(String regionSlug) {
    
    
    
    this.regionSlug = regionSlug;
  }


  public CostCalculatorEmploymentParam regionalToEmployerExchangeRate(String regionalToEmployerExchangeRate) {
    
    
    
    
    this.regionalToEmployerExchangeRate = regionalToEmployerExchangeRate;
    return this;
  }

   /**
   * Get regionalToEmployerExchangeRate
   * @return regionalToEmployerExchangeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegionalToEmployerExchangeRate() {
    return regionalToEmployerExchangeRate;
  }


  public void setRegionalToEmployerExchangeRate(String regionalToEmployerExchangeRate) {
    
    
    
    this.regionalToEmployerExchangeRate = regionalToEmployerExchangeRate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CostCalculatorEmploymentParam instance itself
   */
  public CostCalculatorEmploymentParam putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CostCalculatorEmploymentParam costCalculatorEmploymentParam = (CostCalculatorEmploymentParam) o;
    return Objects.equals(this.title, costCalculatorEmploymentParam.title) &&
        Objects.equals(this.age, costCalculatorEmploymentParam.age) &&
        Objects.equals(this.annualGrossSalary, costCalculatorEmploymentParam.annualGrossSalary) &&
        Objects.equals(this.annualGrossSalaryInEmployerCurrency, costCalculatorEmploymentParam.annualGrossSalaryInEmployerCurrency) &&
        Objects.equals(this.employmentTerm, costCalculatorEmploymentParam.employmentTerm) &&
        Objects.equals(this.regionSlug, costCalculatorEmploymentParam.regionSlug) &&
        Objects.equals(this.regionalToEmployerExchangeRate, costCalculatorEmploymentParam.regionalToEmployerExchangeRate)&&
        Objects.equals(this.additionalProperties, costCalculatorEmploymentParam.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, age, annualGrossSalary, annualGrossSalaryInEmployerCurrency, employmentTerm, regionSlug, regionalToEmployerExchangeRate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CostCalculatorEmploymentParam {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    annualGrossSalary: ").append(toIndentedString(annualGrossSalary)).append("\n");
    sb.append("    annualGrossSalaryInEmployerCurrency: ").append(toIndentedString(annualGrossSalaryInEmployerCurrency)).append("\n");
    sb.append("    employmentTerm: ").append(toIndentedString(employmentTerm)).append("\n");
    sb.append("    regionSlug: ").append(toIndentedString(regionSlug)).append("\n");
    sb.append("    regionalToEmployerExchangeRate: ").append(toIndentedString(regionalToEmployerExchangeRate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("age");
    openapiFields.add("annual_gross_salary");
    openapiFields.add("annual_gross_salary_in_employer_currency");
    openapiFields.add("employment_term");
    openapiFields.add("region_slug");
    openapiFields.add("regional_to_employer_exchange_rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("region_slug");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CostCalculatorEmploymentParam
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CostCalculatorEmploymentParam.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CostCalculatorEmploymentParam is not found in the empty JSON string", CostCalculatorEmploymentParam.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CostCalculatorEmploymentParam.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("region_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_slug").toString()));
      }
      if ((jsonObj.get("regional_to_employer_exchange_rate") != null && !jsonObj.get("regional_to_employer_exchange_rate").isJsonNull()) && !jsonObj.get("regional_to_employer_exchange_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regional_to_employer_exchange_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regional_to_employer_exchange_rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CostCalculatorEmploymentParam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CostCalculatorEmploymentParam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CostCalculatorEmploymentParam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CostCalculatorEmploymentParam.class));

       return (TypeAdapter<T>) new TypeAdapter<CostCalculatorEmploymentParam>() {
           @Override
           public void write(JsonWriter out, CostCalculatorEmploymentParam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CostCalculatorEmploymentParam read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CostCalculatorEmploymentParam instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CostCalculatorEmploymentParam given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CostCalculatorEmploymentParam
  * @throws IOException if the JSON string is invalid with respect to CostCalculatorEmploymentParam
  */
  public static CostCalculatorEmploymentParam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CostCalculatorEmploymentParam.class);
  }

 /**
  * Convert an instance of CostCalculatorEmploymentParam to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

