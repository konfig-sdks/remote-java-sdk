/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeoffDaysParams;
import com.konfigthis.client.model.TimeoffDocumentParams;
import com.konfigthis.client.model.TimeoffType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Update timeoff params
 */
@ApiModel(description = "Update timeoff params")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateApprovedTimeoffParams {
  public static final String SERIALIZED_NAME_APPROVED_AT = "approved_at";
  @SerializedName(SERIALIZED_NAME_APPROVED_AT)
  private OffsetDateTime approvedAt;

  public static final String SERIALIZED_NAME_APPROVER_ID = "approver_id";
  @SerializedName(SERIALIZED_NAME_APPROVER_ID)
  private String approverId;

  public static final String SERIALIZED_NAME_CANCEL_REASON = "cancel_reason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
  private String cancelReason;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private TimeoffDocumentParams document;

  public static final String SERIALIZED_NAME_EDIT_REASON = "edit_reason";
  @SerializedName(SERIALIZED_NAME_EDIT_REASON)
  private String editReason;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    APPROVED("approved"),
    
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIMEOFF_DAYS = "timeoff_days";
  @SerializedName(SERIALIZED_NAME_TIMEOFF_DAYS)
  private List<TimeoffDaysParams> timeoffDays = null;

  public static final String SERIALIZED_NAME_TIMEOFF_TYPE = "timeoff_type";
  @SerializedName(SERIALIZED_NAME_TIMEOFF_TYPE)
  private TimeoffType timeoffType;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public UpdateApprovedTimeoffParams() {
  }

  public UpdateApprovedTimeoffParams approvedAt(OffsetDateTime approvedAt) {
    
    
    
    
    this.approvedAt = approvedAt;
    return this;
  }

   /**
   * UTC date time in [ISO 8601][] format.  [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 
   * @return approvedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-07-15T18:18:17Z", value = "UTC date time in [ISO 8601][] format.  [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 ")

  public OffsetDateTime getApprovedAt() {
    return approvedAt;
  }


  public void setApprovedAt(OffsetDateTime approvedAt) {
    
    
    
    this.approvedAt = approvedAt;
  }


  public UpdateApprovedTimeoffParams approverId(String approverId) {
    
    
    
    
    this.approverId = approverId;
    return this;
  }

   /**
   * The field matches the &#x60;id&#x60; of a user in the Remote Platform that has permission to approve time off requests. [Available users][] can be found fetching the [List Company Manager][] endpoint.  [Available users]: https://support.remote.com/hc/en-us/articles/360054668651-Approving-Declining-time-off-requests#h_01G0014GZKZ3EMN6P7C99HAK55 [List Company Manager]: https://gateway.remote.com/v1/docs/openapi.html#tag/Company-Managers 
   * @return approverId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "51546f60-dd71-4223-9312-4efede68a497", value = "The field matches the `id` of a user in the Remote Platform that has permission to approve time off requests. [Available users][] can be found fetching the [List Company Manager][] endpoint.  [Available users]: https://support.remote.com/hc/en-us/articles/360054668651-Approving-Declining-time-off-requests#h_01G0014GZKZ3EMN6P7C99HAK55 [List Company Manager]: https://gateway.remote.com/v1/docs/openapi.html#tag/Company-Managers ")

  public String getApproverId() {
    return approverId;
  }


  public void setApproverId(String approverId) {
    
    
    
    this.approverId = approverId;
  }


  public UpdateApprovedTimeoffParams cancelReason(String cancelReason) {
    
    
    
    
    this.cancelReason = cancelReason;
    return this;
  }

   /**
   * The reason for cancelling a time off. Required when updating to status &#x60;cancelled&#x60;.
   * @return cancelReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason for cancelling a time off. Required when updating to status `cancelled`.")

  public String getCancelReason() {
    return cancelReason;
  }


  public void setCancelReason(String cancelReason) {
    
    
    
    this.cancelReason = cancelReason;
  }


  public UpdateApprovedTimeoffParams document(TimeoffDocumentParams document) {
    
    
    
    
    this.document = document;
    return this;
  }

   /**
   * Get document
   * @return document
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeoffDocumentParams getDocument() {
    return document;
  }


  public void setDocument(TimeoffDocumentParams document) {
    
    
    
    this.document = document;
  }


  public UpdateApprovedTimeoffParams editReason(String editReason) {
    
    
    
    
    this.editReason = editReason;
    return this;
  }

   /**
   * The reason for the update. Required when updating the time off data but not changing the status.
   * @return editReason
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The reason for the update. Required when updating the time off data but not changing the status.")

  public String getEditReason() {
    return editReason;
  }


  public void setEditReason(String editReason) {
    
    
    
    this.editReason = editReason;
  }


  public UpdateApprovedTimeoffParams endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Wed Jun 30 17:00:00 PDT 2021", value = "UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public UpdateApprovedTimeoffParams notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public UpdateApprovedTimeoffParams startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Wed Jun 30 17:00:00 PDT 2021", value = "UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public UpdateApprovedTimeoffParams status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public UpdateApprovedTimeoffParams timeoffDays(List<TimeoffDaysParams> timeoffDays) {
    
    
    
    
    this.timeoffDays = timeoffDays;
    return this;
  }

  public UpdateApprovedTimeoffParams addTimeoffDaysItem(TimeoffDaysParams timeoffDaysItem) {
    if (this.timeoffDays == null) {
      this.timeoffDays = new ArrayList<>();
    }
    this.timeoffDays.add(timeoffDaysItem);
    return this;
  }

   /**
   * Get timeoffDays
   * @return timeoffDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TimeoffDaysParams> getTimeoffDays() {
    return timeoffDays;
  }


  public void setTimeoffDays(List<TimeoffDaysParams> timeoffDays) {
    
    
    
    this.timeoffDays = timeoffDays;
  }


  public UpdateApprovedTimeoffParams timeoffType(TimeoffType timeoffType) {
    
    
    
    
    this.timeoffType = timeoffType;
    return this;
  }

   /**
   * Get timeoffType
   * @return timeoffType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeoffType getTimeoffType() {
    return timeoffType;
  }


  public void setTimeoffType(TimeoffType timeoffType) {
    
    
    
    this.timeoffType = timeoffType;
  }


  public UpdateApprovedTimeoffParams timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * [TZ identifier](https://www.iana.org/time-zones)
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Etc/UTC", value = "[TZ identifier](https://www.iana.org/time-zones)")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateApprovedTimeoffParams instance itself
   */
  public UpdateApprovedTimeoffParams putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApprovedTimeoffParams updateApprovedTimeoffParams = (UpdateApprovedTimeoffParams) o;
    return Objects.equals(this.approvedAt, updateApprovedTimeoffParams.approvedAt) &&
        Objects.equals(this.approverId, updateApprovedTimeoffParams.approverId) &&
        Objects.equals(this.cancelReason, updateApprovedTimeoffParams.cancelReason) &&
        Objects.equals(this.document, updateApprovedTimeoffParams.document) &&
        Objects.equals(this.editReason, updateApprovedTimeoffParams.editReason) &&
        Objects.equals(this.endDate, updateApprovedTimeoffParams.endDate) &&
        Objects.equals(this.notes, updateApprovedTimeoffParams.notes) &&
        Objects.equals(this.startDate, updateApprovedTimeoffParams.startDate) &&
        Objects.equals(this.status, updateApprovedTimeoffParams.status) &&
        Objects.equals(this.timeoffDays, updateApprovedTimeoffParams.timeoffDays) &&
        Objects.equals(this.timeoffType, updateApprovedTimeoffParams.timeoffType) &&
        Objects.equals(this.timezone, updateApprovedTimeoffParams.timezone)&&
        Objects.equals(this.additionalProperties, updateApprovedTimeoffParams.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvedAt, approverId, cancelReason, document, editReason, endDate, notes, startDate, status, timeoffDays, timeoffType, timezone, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApprovedTimeoffParams {\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    approverId: ").append(toIndentedString(approverId)).append("\n");
    sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    editReason: ").append(toIndentedString(editReason)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeoffDays: ").append(toIndentedString(timeoffDays)).append("\n");
    sb.append("    timeoffType: ").append(toIndentedString(timeoffType)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approved_at");
    openapiFields.add("approver_id");
    openapiFields.add("cancel_reason");
    openapiFields.add("document");
    openapiFields.add("edit_reason");
    openapiFields.add("end_date");
    openapiFields.add("notes");
    openapiFields.add("start_date");
    openapiFields.add("status");
    openapiFields.add("timeoff_days");
    openapiFields.add("timeoff_type");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancel_reason");
    openapiRequiredFields.add("edit_reason");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateApprovedTimeoffParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateApprovedTimeoffParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApprovedTimeoffParams is not found in the empty JSON string", UpdateApprovedTimeoffParams.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApprovedTimeoffParams.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("approver_id").isJsonNull() && (jsonObj.get("approver_id") != null && !jsonObj.get("approver_id").isJsonNull()) && !jsonObj.get("approver_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approver_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approver_id").toString()));
      }
      if (!jsonObj.get("cancel_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_reason").toString()));
      }
      // validate the optional field `document`
      if (jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) {
        TimeoffDocumentParams.validateJsonObject(jsonObj.getAsJsonObject("document"));
      }
      if (!jsonObj.get("edit_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edit_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edit_reason").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("timeoff_days") != null && !jsonObj.get("timeoff_days").isJsonNull()) {
        JsonArray jsonArraytimeoffDays = jsonObj.getAsJsonArray("timeoff_days");
        if (jsonArraytimeoffDays != null) {
          // ensure the json data is an array
          if (!jsonObj.get("timeoff_days").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `timeoff_days` to be an array in the JSON string but got `%s`", jsonObj.get("timeoff_days").toString()));
          }

          // validate the optional field `timeoff_days` (array)
          for (int i = 0; i < jsonArraytimeoffDays.size(); i++) {
            TimeoffDaysParams.validateJsonObject(jsonArraytimeoffDays.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApprovedTimeoffParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApprovedTimeoffParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApprovedTimeoffParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApprovedTimeoffParams.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApprovedTimeoffParams>() {
           @Override
           public void write(JsonWriter out, UpdateApprovedTimeoffParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApprovedTimeoffParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateApprovedTimeoffParams instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateApprovedTimeoffParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateApprovedTimeoffParams
  * @throws IOException if the JSON string is invalid with respect to UpdateApprovedTimeoffParams
  */
  public static UpdateApprovedTimeoffParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApprovedTimeoffParams.class);
  }

 /**
  * Convert an instance of UpdateApprovedTimeoffParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

