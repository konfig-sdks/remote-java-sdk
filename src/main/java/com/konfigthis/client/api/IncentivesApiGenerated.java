/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AmountTaxType;
import com.konfigthis.client.model.CreateOneTimeIncentiveParams;
import com.konfigthis.client.model.IncentiveResponse;
import com.konfigthis.client.model.ListIncentivesResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.SuccessResponse;
import com.konfigthis.client.model.UpdateIncentiveParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IncentivesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IncentivesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public IncentivesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createIncentiveCall(CreateOneTimeIncentiveParams createOneTimeIncentiveParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOneTimeIncentiveParams;

        // create path and map variables
        String localVarPath = "/v1/incentives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIncentiveValidateBeforeCall(CreateOneTimeIncentiveParams createOneTimeIncentiveParams, final ApiCallback _callback) throws ApiException {
        return createIncentiveCall(createOneTimeIncentiveParams, _callback);

    }


    private ApiResponse<IncentiveResponse> createIncentiveWithHttpInfo(CreateOneTimeIncentiveParams createOneTimeIncentiveParams) throws ApiException {
        okhttp3.Call localVarCall = createIncentiveValidateBeforeCall(createOneTimeIncentiveParams, null);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIncentiveAsync(CreateOneTimeIncentiveParams createOneTimeIncentiveParams, final ApiCallback<IncentiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIncentiveValidateBeforeCall(createOneTimeIncentiveParams, _callback);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIncentiveRequestBuilder {
        private final Integer amount;
        private final AmountTaxType amountTaxType;
        private final LocalDate effectiveDate;
        private final String employmentId;
        private final String type;
        private String note;

        private CreateIncentiveRequestBuilder(Integer amount, AmountTaxType amountTaxType, LocalDate effectiveDate, String employmentId, String type) {
            this.amount = amount;
            this.amountTaxType = amountTaxType;
            this.effectiveDate = effectiveDate;
            this.employmentId = employmentId;
            this.type = type;
        }

        /**
         * Set note
         * @param note  (optional)
         * @return CreateIncentiveRequestBuilder
         */
        public CreateIncentiveRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for createIncentive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOneTimeIncentiveParams createOneTimeIncentiveParams = buildBodyParams();
            return createIncentiveCall(createOneTimeIncentiveParams, _callback);
        }

        private CreateOneTimeIncentiveParams buildBodyParams() {
            CreateOneTimeIncentiveParams createOneTimeIncentiveParams = new CreateOneTimeIncentiveParams();
            createOneTimeIncentiveParams.amount(this.amount);
            createOneTimeIncentiveParams.amountTaxType(this.amountTaxType);
            createOneTimeIncentiveParams.effectiveDate(this.effectiveDate);
            createOneTimeIncentiveParams.employmentId(this.employmentId);
            createOneTimeIncentiveParams.note(this.note);
            createOneTimeIncentiveParams.type(this.type);
            return createOneTimeIncentiveParams;
        }

        /**
         * Execute createIncentive request
         * @return IncentiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IncentiveResponse execute() throws ApiException {
            CreateOneTimeIncentiveParams createOneTimeIncentiveParams = buildBodyParams();
            ApiResponse<IncentiveResponse> localVarResp = createIncentiveWithHttpInfo(createOneTimeIncentiveParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIncentive request with HTTP info returned
         * @return ApiResponse&lt;IncentiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IncentiveResponse> executeWithHttpInfo() throws ApiException {
            CreateOneTimeIncentiveParams createOneTimeIncentiveParams = buildBodyParams();
            return createIncentiveWithHttpInfo(createOneTimeIncentiveParams);
        }

        /**
         * Execute createIncentive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IncentiveResponse> _callback) throws ApiException {
            CreateOneTimeIncentiveParams createOneTimeIncentiveParams = buildBodyParams();
            return createIncentiveAsync(createOneTimeIncentiveParams, _callback);
        }
    }

    /**
     * Create Incentive
     * Creates an Incentive.  Incentives use the currency of the employment specified provided in the &#x60;employment_id&#x60; field. 
     * @return CreateIncentiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateIncentiveRequestBuilder createIncentive(Integer amount, AmountTaxType amountTaxType, LocalDate effectiveDate, String employmentId, String type) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (amountTaxType == null) throw new IllegalArgumentException("\"amountTaxType\" is required but got null");
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateIncentiveRequestBuilder(amount, amountTaxType, effectiveDate, employmentId, type);
    }
    private okhttp3.Call listAllCall(String employmentId, String status, String recurringIncentiveId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incentives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_id", employmentId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (recurringIncentiveId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recurring_incentive_id", recurringIncentiveId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String employmentId, String status, String recurringIncentiveId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listAllCall(employmentId, status, recurringIncentiveId, page, pageSize, _callback);

    }


    private ApiResponse<ListIncentivesResponse> listAllWithHttpInfo(String employmentId, String status, String recurringIncentiveId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(employmentId, status, recurringIncentiveId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListIncentivesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String employmentId, String status, String recurringIncentiveId, Integer page, Integer pageSize, final ApiCallback<ListIncentivesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(employmentId, status, recurringIncentiveId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListIncentivesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String employmentId;
        private String status;
        private String recurringIncentiveId;
        private Integer page;
        private Integer pageSize;

        private ListAllRequestBuilder() {
        }

        /**
         * Set employmentId
         * @param employmentId Filter by Employment ID (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Set status
         * @param status Filter by Incentive status (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set recurringIncentiveId
         * @param recurringIncentiveId Filter by Recurring Incentive id (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder recurringIncentiveId(String recurringIncentiveId) {
            this.recurringIncentiveId = recurringIncentiveId;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(employmentId, status, recurringIncentiveId, page, pageSize, _callback);
        }


        /**
         * Execute listAll request
         * @return ListIncentivesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListIncentivesResponse execute() throws ApiException {
            ApiResponse<ListIncentivesResponse> localVarResp = listAllWithHttpInfo(employmentId, status, recurringIncentiveId, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;ListIncentivesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListIncentivesResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(employmentId, status, recurringIncentiveId, page, pageSize);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListIncentivesResponse> _callback) throws ApiException {
            return listAllAsync(employmentId, status, recurringIncentiveId, page, pageSize, _callback);
        }
    }

    /**
     * List Incentives
     * Lists all Incentives of a company
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call removeIncentiveCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incentives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIncentiveValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeIncentive(Async)");
        }

        return removeIncentiveCall(id, _callback);

    }


    private ApiResponse<SuccessResponse> removeIncentiveWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeIncentiveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeIncentiveAsync(String id, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIncentiveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveIncentiveRequestBuilder {
        private final String id;

        private RemoveIncentiveRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeIncentive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeIncentiveCall(id, _callback);
        }


        /**
         * Execute removeIncentive request
         * @return SuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SuccessResponse execute() throws ApiException {
            ApiResponse<SuccessResponse> localVarResp = removeIncentiveWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeIncentive request with HTTP info returned
         * @return ApiResponse&lt;SuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessResponse> executeWithHttpInfo() throws ApiException {
            return removeIncentiveWithHttpInfo(id);
        }

        /**
         * Execute removeIncentive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessResponse> _callback) throws ApiException {
            return removeIncentiveAsync(id, _callback);
        }
    }

    /**
     * Delete an Incentive
     * Delete an incentive.  &#x60;one_time&#x60; incentives that have the following status **CANNOT** be deleted: * &#x60;processing&#x60; * &#x60;paid&#x60; 
     * @param id Incentive ID (required)
     * @return RemoveIncentiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public RemoveIncentiveRequestBuilder removeIncentive(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveIncentiveRequestBuilder(id);
    }
    private okhttp3.Call showDetailsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incentives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showDetails(Async)");
        }

        return showDetailsCall(id, _callback);

    }


    private ApiResponse<IncentiveResponse> showDetailsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(String id, final ApiCallback<IncentiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final String id;

        private ShowDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(id, _callback);
        }


        /**
         * Execute showDetails request
         * @return IncentiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IncentiveResponse execute() throws ApiException {
            ApiResponse<IncentiveResponse> localVarResp = showDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;IncentiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IncentiveResponse> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(id);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IncentiveResponse> _callback) throws ApiException {
            return showDetailsAsync(id, _callback);
        }
    }

    /**
     * Show Incentive
     * Show an Incentive&#39;s details
     * @param id Incentive ID (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowDetailsRequestBuilder(id);
    }
    private okhttp3.Call updateIncentiveCall(String id, UpdateIncentiveParams updateIncentiveParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIncentiveParams;

        // create path and map variables
        String localVarPath = "/v1/incentives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIncentiveValidateBeforeCall(String id, UpdateIncentiveParams updateIncentiveParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIncentive(Async)");
        }

        return updateIncentiveCall(id, updateIncentiveParams, _callback);

    }


    private ApiResponse<IncentiveResponse> updateIncentiveWithHttpInfo(String id, UpdateIncentiveParams updateIncentiveParams) throws ApiException {
        okhttp3.Call localVarCall = updateIncentiveValidateBeforeCall(id, updateIncentiveParams, null);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateIncentiveAsync(String id, UpdateIncentiveParams updateIncentiveParams, final ApiCallback<IncentiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIncentiveValidateBeforeCall(id, updateIncentiveParams, _callback);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateIncentiveRequestBuilder {
        private final String id;
        private Integer amount;
        private AmountTaxType amountTaxType;
        private LocalDate effectiveDate;
        private String note;
        private String type;

        private UpdateIncentiveRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set amount
         * @param amount The amount (in the currency of the employment) to be given to the employee.  This field accepts fractional amounts as well. However to avoid precision issues and errors that can arise from storing fractional amounts, the Remote API only accepts currencies and their fractional amounts as integers. This means you should append fractional amounts to the end of the amount you&#39;re passing in with this field.  For example, if the incentive you&#39;re offering is EUR 500.25, you would specify &#x60;50025&#x60; as the amount for this field.  (optional)
         * @return UpdateIncentiveRequestBuilder
         */
        public UpdateIncentiveRequestBuilder amount(Integer amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set amountTaxType
         * @param amountTaxType  (optional)
         * @return UpdateIncentiveRequestBuilder
         */
        public UpdateIncentiveRequestBuilder amountTaxType(AmountTaxType amountTaxType) {
            this.amountTaxType = amountTaxType;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date at which the incentive should take effect.  Note that the incentive is not paid out on the effective date, but during the next payroll cycle. The effective date determines which payroll cycle the incentive will be paid out in.  The effective date needs to be today or a future date.  Note for recurring incentives: since the months don&#39;t have the same amount of days, if day of month of &#x60;effective_date&#x60; is one of [28, 29, 30, 31] it will be transformed to the last day of each month, avoiding the possibility of skipping a month in the recurrence.  (optional)
         * @return UpdateIncentiveRequestBuilder
         */
        public UpdateIncentiveRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return UpdateIncentiveRequestBuilder
         */
        public UpdateIncentiveRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set type
         * @param type A valid type according to the payment frequency (optional)
         * @return UpdateIncentiveRequestBuilder
         */
        public UpdateIncentiveRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateIncentive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            return updateIncentiveCall(id, updateIncentiveParams, _callback);
        }

        private UpdateIncentiveParams buildBodyParams() {
            UpdateIncentiveParams updateIncentiveParams = new UpdateIncentiveParams();
            updateIncentiveParams.amount(this.amount);
            updateIncentiveParams.amountTaxType(this.amountTaxType);
            updateIncentiveParams.effectiveDate(this.effectiveDate);
            updateIncentiveParams.note(this.note);
            updateIncentiveParams.type(this.type);
            return updateIncentiveParams;
        }

        /**
         * Execute updateIncentive request
         * @return IncentiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IncentiveResponse execute() throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            ApiResponse<IncentiveResponse> localVarResp = updateIncentiveWithHttpInfo(id, updateIncentiveParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateIncentive request with HTTP info returned
         * @return ApiResponse&lt;IncentiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IncentiveResponse> executeWithHttpInfo() throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            return updateIncentiveWithHttpInfo(id, updateIncentiveParams);
        }

        /**
         * Execute updateIncentive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IncentiveResponse> _callback) throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            return updateIncentiveAsync(id, updateIncentiveParams, _callback);
        }
    }

    /**
     * Update Incentive
     * Updates an Incentive.  Incentives use the currency of the employment specified provided in the &#x60;employment_id&#x60; field.  The API doesn&#39;t support updating paid incentives. 
     * @param id Incentive ID (required)
     * @return UpdateIncentiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIncentiveRequestBuilder updateIncentive(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateIncentiveRequestBuilder(id);
    }
    private okhttp3.Call updateIncentive_0Call(String id, UpdateIncentiveParams updateIncentiveParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIncentiveParams;

        // create path and map variables
        String localVarPath = "/v1/incentives/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIncentive_0ValidateBeforeCall(String id, UpdateIncentiveParams updateIncentiveParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateIncentive_0(Async)");
        }

        return updateIncentive_0Call(id, updateIncentiveParams, _callback);

    }


    private ApiResponse<IncentiveResponse> updateIncentive_0WithHttpInfo(String id, UpdateIncentiveParams updateIncentiveParams) throws ApiException {
        okhttp3.Call localVarCall = updateIncentive_0ValidateBeforeCall(id, updateIncentiveParams, null);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateIncentive_0Async(String id, UpdateIncentiveParams updateIncentiveParams, final ApiCallback<IncentiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIncentive_0ValidateBeforeCall(id, updateIncentiveParams, _callback);
        Type localVarReturnType = new TypeToken<IncentiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateIncentive0RequestBuilder {
        private final String id;
        private Integer amount;
        private AmountTaxType amountTaxType;
        private LocalDate effectiveDate;
        private String note;
        private String type;

        private UpdateIncentive0RequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set amount
         * @param amount The amount (in the currency of the employment) to be given to the employee.  This field accepts fractional amounts as well. However to avoid precision issues and errors that can arise from storing fractional amounts, the Remote API only accepts currencies and their fractional amounts as integers. This means you should append fractional amounts to the end of the amount you&#39;re passing in with this field.  For example, if the incentive you&#39;re offering is EUR 500.25, you would specify &#x60;50025&#x60; as the amount for this field.  (optional)
         * @return UpdateIncentive0RequestBuilder
         */
        public UpdateIncentive0RequestBuilder amount(Integer amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set amountTaxType
         * @param amountTaxType  (optional)
         * @return UpdateIncentive0RequestBuilder
         */
        public UpdateIncentive0RequestBuilder amountTaxType(AmountTaxType amountTaxType) {
            this.amountTaxType = amountTaxType;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date at which the incentive should take effect.  Note that the incentive is not paid out on the effective date, but during the next payroll cycle. The effective date determines which payroll cycle the incentive will be paid out in.  The effective date needs to be today or a future date.  Note for recurring incentives: since the months don&#39;t have the same amount of days, if day of month of &#x60;effective_date&#x60; is one of [28, 29, 30, 31] it will be transformed to the last day of each month, avoiding the possibility of skipping a month in the recurrence.  (optional)
         * @return UpdateIncentive0RequestBuilder
         */
        public UpdateIncentive0RequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return UpdateIncentive0RequestBuilder
         */
        public UpdateIncentive0RequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set type
         * @param type A valid type according to the payment frequency (optional)
         * @return UpdateIncentive0RequestBuilder
         */
        public UpdateIncentive0RequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for updateIncentive_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            return updateIncentive_0Call(id, updateIncentiveParams, _callback);
        }

        private UpdateIncentiveParams buildBodyParams() {
            UpdateIncentiveParams updateIncentiveParams = new UpdateIncentiveParams();
            updateIncentiveParams.amount(this.amount);
            updateIncentiveParams.amountTaxType(this.amountTaxType);
            updateIncentiveParams.effectiveDate(this.effectiveDate);
            updateIncentiveParams.note(this.note);
            updateIncentiveParams.type(this.type);
            return updateIncentiveParams;
        }

        /**
         * Execute updateIncentive_0 request
         * @return IncentiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public IncentiveResponse execute() throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            ApiResponse<IncentiveResponse> localVarResp = updateIncentive_0WithHttpInfo(id, updateIncentiveParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateIncentive_0 request with HTTP info returned
         * @return ApiResponse&lt;IncentiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IncentiveResponse> executeWithHttpInfo() throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            return updateIncentive_0WithHttpInfo(id, updateIncentiveParams);
        }

        /**
         * Execute updateIncentive_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IncentiveResponse> _callback) throws ApiException {
            UpdateIncentiveParams updateIncentiveParams = buildBodyParams();
            return updateIncentive_0Async(id, updateIncentiveParams, _callback);
        }
    }

    /**
     * Update Incentive
     * Updates an Incentive.  Incentives use the currency of the employment specified provided in the &#x60;employment_id&#x60; field.  The API doesn&#39;t support updating paid incentives. 
     * @param id Incentive ID (required)
     * @return UpdateIncentive0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIncentive0RequestBuilder updateIncentive_0(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateIncentive0RequestBuilder(id);
    }
}
