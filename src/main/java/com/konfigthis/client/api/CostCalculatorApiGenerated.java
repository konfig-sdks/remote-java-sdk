/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CostCalculatorEmploymentParam;
import com.konfigthis.client.model.CostCalculatorEstimatePDFResponse;
import com.konfigthis.client.model.CostCalculatorEstimateParams;
import com.konfigthis.client.model.CostCalculatorEstimateResponse;
import com.konfigthis.client.model.CostCalculatorListCountryResponse;
import com.konfigthis.client.model.JSONSchemaResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CostCalculatorApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CostCalculatorApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CostCalculatorApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmploymentEstimationCall(CostCalculatorEstimateParams costCalculatorEstimateParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = costCalculatorEstimateParams;

        // create path and map variables
        String localVarPath = "/v1/cost-calculator/estimation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmploymentEstimationValidateBeforeCall(CostCalculatorEstimateParams costCalculatorEstimateParams, final ApiCallback _callback) throws ApiException {
        return createEmploymentEstimationCall(costCalculatorEstimateParams, _callback);

    }


    private ApiResponse<CostCalculatorEstimateResponse> createEmploymentEstimationWithHttpInfo(CostCalculatorEstimateParams costCalculatorEstimateParams) throws ApiException {
        okhttp3.Call localVarCall = createEmploymentEstimationValidateBeforeCall(costCalculatorEstimateParams, null);
        Type localVarReturnType = new TypeToken<CostCalculatorEstimateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmploymentEstimationAsync(CostCalculatorEstimateParams costCalculatorEstimateParams, final ApiCallback<CostCalculatorEstimateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmploymentEstimationValidateBeforeCall(costCalculatorEstimateParams, _callback);
        Type localVarReturnType = new TypeToken<CostCalculatorEstimateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmploymentEstimationRequestBuilder {
        private final String employerCurrencySlug;
        private final List<CostCalculatorEmploymentParam> employments;
        private Boolean includeBenefits;
        private Boolean includeCostBreakdowns;

        private CreateEmploymentEstimationRequestBuilder(String employerCurrencySlug, List<CostCalculatorEmploymentParam> employments) {
            this.employerCurrencySlug = employerCurrencySlug;
            this.employments = employments;
        }

        /**
         * Set includeBenefits
         * @param includeBenefits  (optional)
         * @return CreateEmploymentEstimationRequestBuilder
         */
        public CreateEmploymentEstimationRequestBuilder includeBenefits(Boolean includeBenefits) {
            this.includeBenefits = includeBenefits;
            return this;
        }
        
        /**
         * Set includeCostBreakdowns
         * @param includeCostBreakdowns  (optional)
         * @return CreateEmploymentEstimationRequestBuilder
         */
        public CreateEmploymentEstimationRequestBuilder includeCostBreakdowns(Boolean includeCostBreakdowns) {
            this.includeCostBreakdowns = includeCostBreakdowns;
            return this;
        }
        
        /**
         * Build call for createEmploymentEstimation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            return createEmploymentEstimationCall(costCalculatorEstimateParams, _callback);
        }

        private CostCalculatorEstimateParams buildBodyParams() {
            CostCalculatorEstimateParams costCalculatorEstimateParams = new CostCalculatorEstimateParams();
            costCalculatorEstimateParams.employerCurrencySlug(this.employerCurrencySlug);
            costCalculatorEstimateParams.employments(this.employments);
            costCalculatorEstimateParams.includeBenefits(this.includeBenefits);
            costCalculatorEstimateParams.includeCostBreakdowns(this.includeCostBreakdowns);
            return costCalculatorEstimateParams;
        }

        /**
         * Execute createEmploymentEstimation request
         * @return CostCalculatorEstimateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CostCalculatorEstimateResponse execute() throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            ApiResponse<CostCalculatorEstimateResponse> localVarResp = createEmploymentEstimationWithHttpInfo(costCalculatorEstimateParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmploymentEstimation request with HTTP info returned
         * @return ApiResponse&lt;CostCalculatorEstimateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCalculatorEstimateResponse> executeWithHttpInfo() throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            return createEmploymentEstimationWithHttpInfo(costCalculatorEstimateParams);
        }

        /**
         * Execute createEmploymentEstimation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCalculatorEstimateResponse> _callback) throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            return createEmploymentEstimationAsync(costCalculatorEstimateParams, _callback);
        }
    }

    /**
     * Creates a cost estimation of employments
     * 
     * @return CreateEmploymentEstimationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmploymentEstimationRequestBuilder createEmploymentEstimation(String employerCurrencySlug, List<CostCalculatorEmploymentParam> employments) throws IllegalArgumentException {
        if (employerCurrencySlug == null) throw new IllegalArgumentException("\"employerCurrencySlug\" is required but got null");
            

        if (employments == null) throw new IllegalArgumentException("\"employments\" is required but got null");
        return new CreateEmploymentEstimationRequestBuilder(employerCurrencySlug, employments);
    }
    private okhttp3.Call generateEstimationPdfCall(CostCalculatorEstimateParams costCalculatorEstimateParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = costCalculatorEstimateParams;

        // create path and map variables
        String localVarPath = "/v1/cost-calculator/estimation-pdf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateEstimationPdfValidateBeforeCall(CostCalculatorEstimateParams costCalculatorEstimateParams, final ApiCallback _callback) throws ApiException {
        return generateEstimationPdfCall(costCalculatorEstimateParams, _callback);

    }


    private ApiResponse<CostCalculatorEstimatePDFResponse> generateEstimationPdfWithHttpInfo(CostCalculatorEstimateParams costCalculatorEstimateParams) throws ApiException {
        okhttp3.Call localVarCall = generateEstimationPdfValidateBeforeCall(costCalculatorEstimateParams, null);
        Type localVarReturnType = new TypeToken<CostCalculatorEstimatePDFResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateEstimationPdfAsync(CostCalculatorEstimateParams costCalculatorEstimateParams, final ApiCallback<CostCalculatorEstimatePDFResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateEstimationPdfValidateBeforeCall(costCalculatorEstimateParams, _callback);
        Type localVarReturnType = new TypeToken<CostCalculatorEstimatePDFResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateEstimationPdfRequestBuilder {
        private final String employerCurrencySlug;
        private final List<CostCalculatorEmploymentParam> employments;
        private Boolean includeBenefits;
        private Boolean includeCostBreakdowns;

        private GenerateEstimationPdfRequestBuilder(String employerCurrencySlug, List<CostCalculatorEmploymentParam> employments) {
            this.employerCurrencySlug = employerCurrencySlug;
            this.employments = employments;
        }

        /**
         * Set includeBenefits
         * @param includeBenefits  (optional)
         * @return GenerateEstimationPdfRequestBuilder
         */
        public GenerateEstimationPdfRequestBuilder includeBenefits(Boolean includeBenefits) {
            this.includeBenefits = includeBenefits;
            return this;
        }
        
        /**
         * Set includeCostBreakdowns
         * @param includeCostBreakdowns  (optional)
         * @return GenerateEstimationPdfRequestBuilder
         */
        public GenerateEstimationPdfRequestBuilder includeCostBreakdowns(Boolean includeCostBreakdowns) {
            this.includeCostBreakdowns = includeCostBreakdowns;
            return this;
        }
        
        /**
         * Build call for generateEstimationPdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            return generateEstimationPdfCall(costCalculatorEstimateParams, _callback);
        }

        private CostCalculatorEstimateParams buildBodyParams() {
            CostCalculatorEstimateParams costCalculatorEstimateParams = new CostCalculatorEstimateParams();
            costCalculatorEstimateParams.employerCurrencySlug(this.employerCurrencySlug);
            costCalculatorEstimateParams.employments(this.employments);
            costCalculatorEstimateParams.includeBenefits(this.includeBenefits);
            costCalculatorEstimateParams.includeCostBreakdowns(this.includeCostBreakdowns);
            return costCalculatorEstimateParams;
        }

        /**
         * Execute generateEstimationPdf request
         * @return CostCalculatorEstimatePDFResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CostCalculatorEstimatePDFResponse execute() throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            ApiResponse<CostCalculatorEstimatePDFResponse> localVarResp = generateEstimationPdfWithHttpInfo(costCalculatorEstimateParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateEstimationPdf request with HTTP info returned
         * @return ApiResponse&lt;CostCalculatorEstimatePDFResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCalculatorEstimatePDFResponse> executeWithHttpInfo() throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            return generateEstimationPdfWithHttpInfo(costCalculatorEstimateParams);
        }

        /**
         * Execute generateEstimationPdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCalculatorEstimatePDFResponse> _callback) throws ApiException {
            CostCalculatorEstimateParams costCalculatorEstimateParams = buildBodyParams();
            return generateEstimationPdfAsync(costCalculatorEstimateParams, _callback);
        }
    }

    /**
     * Creates a cost estimation of employments
     * 
     * @return GenerateEstimationPdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenerateEstimationPdfRequestBuilder generateEstimationPdf(String employerCurrencySlug, List<CostCalculatorEmploymentParam> employments) throws IllegalArgumentException {
        if (employerCurrencySlug == null) throw new IllegalArgumentException("\"employerCurrencySlug\" is required but got null");
            

        if (employments == null) throw new IllegalArgumentException("\"employments\" is required but got null");
        return new GenerateEstimationPdfRequestBuilder(employerCurrencySlug, employments);
    }
    private okhttp3.Call listCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cost-calculator/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCountriesCall(_callback);

    }


    private ApiResponse<CostCalculatorListCountryResponse> listCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CostCalculatorListCountryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCountriesAsync(final ApiCallback<CostCalculatorListCountryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CostCalculatorListCountryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCountriesRequestBuilder {

        private ListCountriesRequestBuilder() {
        }

        /**
         * Build call for listCountries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCountriesCall(_callback);
        }


        /**
         * Execute listCountries request
         * @return CostCalculatorListCountryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CostCalculatorListCountryResponse execute() throws ApiException {
            ApiResponse<CostCalculatorListCountryResponse> localVarResp = listCountriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCountries request with HTTP info returned
         * @return ApiResponse&lt;CostCalculatorListCountryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CostCalculatorListCountryResponse> executeWithHttpInfo() throws ApiException {
            return listCountriesWithHttpInfo();
        }

        /**
         * Execute listCountries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CostCalculatorListCountryResponse> _callback) throws ApiException {
            return listCountriesAsync(_callback);
        }
    }

    /**
     * List countries
     * Lists active and processing countries
     * @return ListCountriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCountriesRequestBuilder listCountries() throws IllegalArgumentException {
        return new ListCountriesRequestBuilder();
    }
    private okhttp3.Call showRegionFieldsCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cost-calculator/regions/{slug}/fields"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showRegionFieldsValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling showRegionFields(Async)");
        }

        return showRegionFieldsCall(slug, _callback);

    }


    private ApiResponse<JSONSchemaResponse> showRegionFieldsWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = showRegionFieldsValidateBeforeCall(slug, null);
        Type localVarReturnType = new TypeToken<JSONSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showRegionFieldsAsync(String slug, final ApiCallback<JSONSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showRegionFieldsValidateBeforeCall(slug, _callback);
        Type localVarReturnType = new TypeToken<JSONSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowRegionFieldsRequestBuilder {
        private final String slug;

        private ShowRegionFieldsRequestBuilder(String slug) {
            this.slug = slug;
        }

        /**
         * Build call for showRegionFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showRegionFieldsCall(slug, _callback);
        }


        /**
         * Execute showRegionFields request
         * @return JSONSchemaResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JSONSchemaResponse execute() throws ApiException {
            ApiResponse<JSONSchemaResponse> localVarResp = showRegionFieldsWithHttpInfo(slug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showRegionFields request with HTTP info returned
         * @return ApiResponse&lt;JSONSchemaResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JSONSchemaResponse> executeWithHttpInfo() throws ApiException {
            return showRegionFieldsWithHttpInfo(slug);
        }

        /**
         * Execute showRegionFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JSONSchemaResponse> _callback) throws ApiException {
            return showRegionFieldsAsync(slug, _callback);
        }
    }

    /**
     * Show region fields
     * Returns required fields JSON Schema for a given region. These are required in order to calculate       the cost of employment for the region. These fields are based on employer contributions that are associated       with the region or any of it&#39;s parent regions.
     * @param slug Slug (required)
     * @return ShowRegionFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowRegionFieldsRequestBuilder showRegionFields(String slug) throws IllegalArgumentException {
        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        return new ShowRegionFieldsRequestBuilder(slug);
    }
}
