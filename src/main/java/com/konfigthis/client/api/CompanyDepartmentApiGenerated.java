/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompanyDepartmentCreatedResponse;
import com.konfigthis.client.model.CreateCompanyDepartmentParams;
import com.konfigthis.client.model.ListCompanyDepartmentsPaginatedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompanyDepartmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanyDepartmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyDepartmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDepartmentCall(CreateCompanyDepartmentParams createCompanyDepartmentParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCompanyDepartmentParams;

        // create path and map variables
        String localVarPath = "/v1/company-departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDepartmentValidateBeforeCall(CreateCompanyDepartmentParams createCompanyDepartmentParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCompanyDepartmentParams' is set
        if (createCompanyDepartmentParams == null) {
            throw new ApiException("Missing the required parameter 'createCompanyDepartmentParams' when calling createNewDepartment(Async)");
        }

        return createNewDepartmentCall(createCompanyDepartmentParams, _callback);

    }


    private ApiResponse<CompanyDepartmentCreatedResponse> createNewDepartmentWithHttpInfo(CreateCompanyDepartmentParams createCompanyDepartmentParams) throws ApiException {
        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(createCompanyDepartmentParams, null);
        Type localVarReturnType = new TypeToken<CompanyDepartmentCreatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDepartmentAsync(CreateCompanyDepartmentParams createCompanyDepartmentParams, final ApiCallback<CompanyDepartmentCreatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(createCompanyDepartmentParams, _callback);
        Type localVarReturnType = new TypeToken<CompanyDepartmentCreatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDepartmentRequestBuilder {
        private final String companyId;
        private final String name;

        private CreateNewDepartmentRequestBuilder(String companyId, String name) {
            this.companyId = companyId;
            this.name = name;
        }

        /**
         * Build call for createNewDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCompanyDepartmentParams createCompanyDepartmentParams = buildBodyParams();
            return createNewDepartmentCall(createCompanyDepartmentParams, _callback);
        }

        private CreateCompanyDepartmentParams buildBodyParams() {
            CreateCompanyDepartmentParams createCompanyDepartmentParams = new CreateCompanyDepartmentParams();
            createCompanyDepartmentParams.companyId(this.companyId);
            createCompanyDepartmentParams.name(this.name);
            return createCompanyDepartmentParams;
        }

        /**
         * Execute createNewDepartment request
         * @return CompanyDepartmentCreatedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CompanyDepartmentCreatedResponse execute() throws ApiException {
            CreateCompanyDepartmentParams createCompanyDepartmentParams = buildBodyParams();
            ApiResponse<CompanyDepartmentCreatedResponse> localVarResp = createNewDepartmentWithHttpInfo(createCompanyDepartmentParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDepartment request with HTTP info returned
         * @return ApiResponse&lt;CompanyDepartmentCreatedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyDepartmentCreatedResponse> executeWithHttpInfo() throws ApiException {
            CreateCompanyDepartmentParams createCompanyDepartmentParams = buildBodyParams();
            return createNewDepartmentWithHttpInfo(createCompanyDepartmentParams);
        }

        /**
         * Execute createNewDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyDepartmentCreatedResponse> _callback) throws ApiException {
            CreateCompanyDepartmentParams createCompanyDepartmentParams = buildBodyParams();
            return createNewDepartmentAsync(createCompanyDepartmentParams, _callback);
        }
    }

    /**
     * Create New Department
     * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
     * @param createCompanyDepartmentParams Create Company Department request params (required)
     * @return CreateNewDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDepartmentRequestBuilder createNewDepartment(String companyId, String name) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewDepartmentRequestBuilder(companyId, name);
    }
    private okhttp3.Call listCall(String companyId, Boolean paginate, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company-departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (paginate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paginate", paginate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String companyId, Boolean paginate, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling list(Async)");
        }

        return listCall(companyId, paginate, page, pageSize, _callback);

    }


    private ApiResponse<ListCompanyDepartmentsPaginatedResponse> listWithHttpInfo(String companyId, Boolean paginate, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, paginate, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListCompanyDepartmentsPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String companyId, Boolean paginate, Integer page, Integer pageSize, final ApiCallback<ListCompanyDepartmentsPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(companyId, paginate, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListCompanyDepartmentsPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String companyId;
        private Boolean paginate;
        private Integer page;
        private Integer pageSize;

        private ListRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set paginate
         * @param paginate Paginate option. Default: true. When true, paginates response; otherwise, does not. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder paginate(Boolean paginate) {
            this.paginate = paginate;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional, default to 1)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of items per page (optional, default to 20)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(companyId, paginate, page, pageSize, _callback);
        }


        /**
         * Execute list request
         * @return ListCompanyDepartmentsPaginatedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListCompanyDepartmentsPaginatedResponse execute() throws ApiException {
            ApiResponse<ListCompanyDepartmentsPaginatedResponse> localVarResp = listWithHttpInfo(companyId, paginate, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ListCompanyDepartmentsPaginatedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListCompanyDepartmentsPaginatedResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(companyId, paginate, page, pageSize);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListCompanyDepartmentsPaginatedResponse> _callback) throws ApiException {
            return listAsync(companyId, paginate, page, pageSize, _callback);
        }
    }

    /**
     * List Company Departments
     * Lists all departments for the authorized company specified in the request. 
     * @param companyId Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListRequestBuilder(companyId);
    }
}
