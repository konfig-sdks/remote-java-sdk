/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateApprovedTimeoffParams;
import com.konfigthis.client.model.ListTimeoffResponse;
import com.konfigthis.client.model.ListTimeoffTypesResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TimeoffDaysParams;
import com.konfigthis.client.model.TimeoffDocumentParams;
import com.konfigthis.client.model.TimeoffResponse;
import com.konfigthis.client.model.TimeoffStatus;
import com.konfigthis.client.model.TimeoffType;
import com.konfigthis.client.model.UpdateApprovedTimeoffParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getRecordCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeoff/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecord(Async)");
        }

        return getRecordCall(id, _callback);

    }


    private ApiResponse<TimeoffResponse> getRecordWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String id, final ApiCallback<TimeoffResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private final String id;

        private GetRecordRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(id, _callback);
        }


        /**
         * Execute getRecord request
         * @return TimeoffResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffResponse execute() throws ApiException {
            ApiResponse<TimeoffResponse> localVarResp = getRecordWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;TimeoffResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(id);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffResponse> _callback) throws ApiException {
            return getRecordAsync(id, _callback);
        }
    }

    /**
     * Show Time Off
     * Shows a single Time Off record
     * @param id Timeoff ID (required)
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRecordRequestBuilder(id);
    }
    private okhttp3.Call listRecordsCall(String employmentId, TimeoffType timeoffType, TimeoffStatus status, String order, String sortBy, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeoff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_id", employmentId));
        }

        if (timeoffType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoff_type", timeoffType));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecordsValidateBeforeCall(String employmentId, TimeoffType timeoffType, TimeoffStatus status, String order, String sortBy, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listRecordsCall(employmentId, timeoffType, status, order, sortBy, page, pageSize, _callback);

    }


    private ApiResponse<ListTimeoffResponse> listRecordsWithHttpInfo(String employmentId, TimeoffType timeoffType, TimeoffStatus status, String order, String sortBy, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listRecordsValidateBeforeCall(employmentId, timeoffType, status, order, sortBy, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListTimeoffResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecordsAsync(String employmentId, TimeoffType timeoffType, TimeoffStatus status, String order, String sortBy, Integer page, Integer pageSize, final ApiCallback<ListTimeoffResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecordsValidateBeforeCall(employmentId, timeoffType, status, order, sortBy, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListTimeoffResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRecordsRequestBuilder {
        private String employmentId;
        private TimeoffType timeoffType;
        private TimeoffStatus status;
        private String order;
        private String sortBy;
        private Integer page;
        private Integer pageSize;

        private ListRecordsRequestBuilder() {
        }

        /**
         * Set employmentId
         * @param employmentId Only show time off for a specific employment (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Set timeoffType
         * @param timeoffType Filter time off by its type (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder timeoffType(TimeoffType timeoffType) {
            this.timeoffType = timeoffType;
            return this;
        }
        
        /**
         * Set status
         * @param status Filter time off by its status (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder status(TimeoffStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set order
         * @param order Sort order (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field to sort by (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional, default to 1)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Number of items per page (optional, default to 20)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecordsCall(employmentId, timeoffType, status, order, sortBy, page, pageSize, _callback);
        }


        /**
         * Execute listRecords request
         * @return ListTimeoffResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListTimeoffResponse execute() throws ApiException {
            ApiResponse<ListTimeoffResponse> localVarResp = listRecordsWithHttpInfo(employmentId, timeoffType, status, order, sortBy, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRecords request with HTTP info returned
         * @return ApiResponse&lt;ListTimeoffResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListTimeoffResponse> executeWithHttpInfo() throws ApiException {
            return listRecordsWithHttpInfo(employmentId, timeoffType, status, order, sortBy, page, pageSize);
        }

        /**
         * Execute listRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListTimeoffResponse> _callback) throws ApiException {
            return listRecordsAsync(employmentId, timeoffType, status, order, sortBy, page, pageSize, _callback);
        }
    }

    /**
     * List Time Off
     * Lists all Time Off records.
     * @return ListRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRecordsRequestBuilder listRecords() throws IllegalArgumentException {
        return new ListRecordsRequestBuilder();
    }
    private okhttp3.Call listTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/timeoff/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listTypesCall(_callback);

    }


    private ApiResponse<ListTimeoffTypesResponse> listTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListTimeoffTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTypesAsync(final ApiCallback<ListTimeoffTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListTimeoffTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTypesRequestBuilder {

        private ListTypesRequestBuilder() {
        }

        /**
         * Build call for listTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTypesCall(_callback);
        }


        /**
         * Execute listTypes request
         * @return ListTimeoffTypesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListTimeoffTypesResponse execute() throws ApiException {
            ApiResponse<ListTimeoffTypesResponse> localVarResp = listTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTypes request with HTTP info returned
         * @return ApiResponse&lt;ListTimeoffTypesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListTimeoffTypesResponse> executeWithHttpInfo() throws ApiException {
            return listTypesWithHttpInfo();
        }

        /**
         * Execute listTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListTimeoffTypesResponse> _callback) throws ApiException {
            return listTypesAsync(_callback);
        }
    }

    /**
     * List Time Off Types
     * Lists all time off types that can be used for the &#x60;timeoff_type&#x60; parameter
     * @return ListTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListTypesRequestBuilder listTypes() throws IllegalArgumentException {
        return new ListTypesRequestBuilder();
    }
    private okhttp3.Call recordCreateCall(CreateApprovedTimeoffParams createApprovedTimeoffParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApprovedTimeoffParams;

        // create path and map variables
        String localVarPath = "/v1/timeoff";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordCreateValidateBeforeCall(CreateApprovedTimeoffParams createApprovedTimeoffParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createApprovedTimeoffParams' is set
        if (createApprovedTimeoffParams == null) {
            throw new ApiException("Missing the required parameter 'createApprovedTimeoffParams' when calling recordCreate(Async)");
        }

        return recordCreateCall(createApprovedTimeoffParams, _callback);

    }


    private ApiResponse<TimeoffResponse> recordCreateWithHttpInfo(CreateApprovedTimeoffParams createApprovedTimeoffParams) throws ApiException {
        okhttp3.Call localVarCall = recordCreateValidateBeforeCall(createApprovedTimeoffParams, null);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordCreateAsync(CreateApprovedTimeoffParams createApprovedTimeoffParams, final ApiCallback<TimeoffResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordCreateValidateBeforeCall(createApprovedTimeoffParams, _callback);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RecordCreateRequestBuilder {
        private final OffsetDateTime approvedAt;
        private final String approverId;
        private final String status;
        private TimeoffDocumentParams document;
        private String employmentId;
        private String endDate;
        private String notes;
        private String startDate;
        private List<TimeoffDaysParams> timeoffDays;
        private TimeoffType timeoffType;
        private String timezone;

        private RecordCreateRequestBuilder(OffsetDateTime approvedAt, String approverId, String status) {
            this.approvedAt = approvedAt;
            this.approverId = approverId;
            this.status = status;
        }

        /**
         * Set document
         * @param document  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder document(TimeoffDocumentParams document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set employmentId
         * @param employmentId  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set timeoffDays
         * @param timeoffDays  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder timeoffDays(List<TimeoffDaysParams> timeoffDays) {
            this.timeoffDays = timeoffDays;
            return this;
        }
        
        /**
         * Set timeoffType
         * @param timeoffType  (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder timeoffType(TimeoffType timeoffType) {
            this.timeoffType = timeoffType;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone [TZ identifier](https://www.iana.org/time-zones) (optional)
         * @return RecordCreateRequestBuilder
         */
        public RecordCreateRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Build call for recordCreate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateApprovedTimeoffParams createApprovedTimeoffParams = buildBodyParams();
            return recordCreateCall(createApprovedTimeoffParams, _callback);
        }

        private CreateApprovedTimeoffParams buildBodyParams() {
            CreateApprovedTimeoffParams createApprovedTimeoffParams = new CreateApprovedTimeoffParams();
            return createApprovedTimeoffParams;
        }

        /**
         * Execute recordCreate request
         * @return TimeoffResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffResponse execute() throws ApiException {
            CreateApprovedTimeoffParams createApprovedTimeoffParams = buildBodyParams();
            ApiResponse<TimeoffResponse> localVarResp = recordCreateWithHttpInfo(createApprovedTimeoffParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute recordCreate request with HTTP info returned
         * @return ApiResponse&lt;TimeoffResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffResponse> executeWithHttpInfo() throws ApiException {
            CreateApprovedTimeoffParams createApprovedTimeoffParams = buildBodyParams();
            return recordCreateWithHttpInfo(createApprovedTimeoffParams);
        }

        /**
         * Execute recordCreate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffResponse> _callback) throws ApiException {
            CreateApprovedTimeoffParams createApprovedTimeoffParams = buildBodyParams();
            return recordCreateAsync(createApprovedTimeoffParams, _callback);
        }
    }

    /**
     * Create Time Off
     * Creates a Time Off record
     * @param createApprovedTimeoffParams Timeoff (required)
     * @return RecordCreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public RecordCreateRequestBuilder recordCreate(OffsetDateTime approvedAt, String approverId, String status) throws IllegalArgumentException {
        if (approvedAt == null) throw new IllegalArgumentException("\"approvedAt\" is required but got null");
        
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new RecordCreateRequestBuilder(approvedAt, approverId, status);
    }
    private okhttp3.Call updateRecordCall(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovedTimeoffParams;

        // create path and map variables
        String localVarPath = "/v1/timeoff/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRecord(Async)");
        }

        // verify the required parameter 'updateApprovedTimeoffParams' is set
        if (updateApprovedTimeoffParams == null) {
            throw new ApiException("Missing the required parameter 'updateApprovedTimeoffParams' when calling updateRecord(Async)");
        }

        return updateRecordCall(id, updateApprovedTimeoffParams, _callback);

    }


    private ApiResponse<TimeoffResponse> updateRecordWithHttpInfo(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(id, updateApprovedTimeoffParams, null);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecordAsync(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams, final ApiCallback<TimeoffResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(id, updateApprovedTimeoffParams, _callback);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecordRequestBuilder {
        private final String cancelReason;
        private final String editReason;
        private final String id;
        private OffsetDateTime approvedAt;
        private String approverId;
        private TimeoffDocumentParams document;
        private LocalDate endDate;
        private String notes;
        private LocalDate startDate;
        private String status;
        private List<TimeoffDaysParams> timeoffDays;
        private TimeoffType timeoffType;
        private String timezone;

        private UpdateRecordRequestBuilder(String cancelReason, String editReason, String id) {
            this.cancelReason = cancelReason;
            this.editReason = editReason;
            this.id = id;
        }

        /**
         * Set approvedAt
         * @param approvedAt UTC date time in [ISO 8601][] format.  [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder approvedAt(OffsetDateTime approvedAt) {
            this.approvedAt = approvedAt;
            return this;
        }
        
        /**
         * Set approverId
         * @param approverId The field matches the &#x60;id&#x60; of a user in the Remote Platform that has permission to approve time off requests. [Available users][] can be found fetching the [List Company Manager][] endpoint.  [Available users]: https://support.remote.com/hc/en-us/articles/360054668651-Approving-Declining-time-off-requests#h_01G0014GZKZ3EMN6P7C99HAK55 [List Company Manager]: https://gateway.remote.com/v1/docs/openapi.html#tag/Company-Managers  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder approverId(String approverId) {
            this.approverId = approverId;
            return this;
        }
        
        /**
         * Set document
         * @param document  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder document(TimeoffDocumentParams document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set timeoffDays
         * @param timeoffDays  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder timeoffDays(List<TimeoffDaysParams> timeoffDays) {
            this.timeoffDays = timeoffDays;
            return this;
        }
        
        /**
         * Set timeoffType
         * @param timeoffType  (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder timeoffType(TimeoffType timeoffType) {
            this.timeoffType = timeoffType;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone [TZ identifier](https://www.iana.org/time-zones) (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Build call for updateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            return updateRecordCall(id, updateApprovedTimeoffParams, _callback);
        }

        private UpdateApprovedTimeoffParams buildBodyParams() {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = new UpdateApprovedTimeoffParams();
            updateApprovedTimeoffParams.approvedAt(this.approvedAt);
            updateApprovedTimeoffParams.approverId(this.approverId);
            updateApprovedTimeoffParams.cancelReason(this.cancelReason);
            updateApprovedTimeoffParams.document(this.document);
            updateApprovedTimeoffParams.editReason(this.editReason);
            updateApprovedTimeoffParams.endDate(this.endDate);
            updateApprovedTimeoffParams.notes(this.notes);
            updateApprovedTimeoffParams.startDate(this.startDate);
            if (this.status != null)
            updateApprovedTimeoffParams.status(UpdateApprovedTimeoffParams.StatusEnum.fromValue(this.status));
            updateApprovedTimeoffParams.timeoffDays(this.timeoffDays);
            updateApprovedTimeoffParams.timeoffType(this.timeoffType);
            updateApprovedTimeoffParams.timezone(this.timezone);
            return updateApprovedTimeoffParams;
        }

        /**
         * Execute updateRecord request
         * @return TimeoffResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffResponse execute() throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            ApiResponse<TimeoffResponse> localVarResp = updateRecordWithHttpInfo(id, updateApprovedTimeoffParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecord request with HTTP info returned
         * @return ApiResponse&lt;TimeoffResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffResponse> executeWithHttpInfo() throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            return updateRecordWithHttpInfo(id, updateApprovedTimeoffParams);
        }

        /**
         * Execute updateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffResponse> _callback) throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            return updateRecordAsync(id, updateApprovedTimeoffParams, _callback);
        }
    }

    /**
     * Update Time Off
     * Updates a Time Off record. This endpoint can also be used for cancelling a time off.
     * @param id Timeoff ID (required)
     * @param updateApprovedTimeoffParams UpdateTimeoff (required)
     * @return UpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecordRequestBuilder updateRecord(String cancelReason, String editReason, String id) throws IllegalArgumentException {
        if (cancelReason == null) throw new IllegalArgumentException("\"cancelReason\" is required but got null");
            

        if (editReason == null) throw new IllegalArgumentException("\"editReason\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateRecordRequestBuilder(cancelReason, editReason, id);
    }
    private okhttp3.Call updateRecord_0Call(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovedTimeoffParams;

        // create path and map variables
        String localVarPath = "/v1/timeoff/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecord_0ValidateBeforeCall(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRecord_0(Async)");
        }

        // verify the required parameter 'updateApprovedTimeoffParams' is set
        if (updateApprovedTimeoffParams == null) {
            throw new ApiException("Missing the required parameter 'updateApprovedTimeoffParams' when calling updateRecord_0(Async)");
        }

        return updateRecord_0Call(id, updateApprovedTimeoffParams, _callback);

    }


    private ApiResponse<TimeoffResponse> updateRecord_0WithHttpInfo(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams) throws ApiException {
        okhttp3.Call localVarCall = updateRecord_0ValidateBeforeCall(id, updateApprovedTimeoffParams, null);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecord_0Async(String id, UpdateApprovedTimeoffParams updateApprovedTimeoffParams, final ApiCallback<TimeoffResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecord_0ValidateBeforeCall(id, updateApprovedTimeoffParams, _callback);
        Type localVarReturnType = new TypeToken<TimeoffResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecord0RequestBuilder {
        private final String cancelReason;
        private final String editReason;
        private final String id;
        private OffsetDateTime approvedAt;
        private String approverId;
        private TimeoffDocumentParams document;
        private LocalDate endDate;
        private String notes;
        private LocalDate startDate;
        private String status;
        private List<TimeoffDaysParams> timeoffDays;
        private TimeoffType timeoffType;
        private String timezone;

        private UpdateRecord0RequestBuilder(String cancelReason, String editReason, String id) {
            this.cancelReason = cancelReason;
            this.editReason = editReason;
            this.id = id;
        }

        /**
         * Set approvedAt
         * @param approvedAt UTC date time in [ISO 8601][] format.  [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder approvedAt(OffsetDateTime approvedAt) {
            this.approvedAt = approvedAt;
            return this;
        }
        
        /**
         * Set approverId
         * @param approverId The field matches the &#x60;id&#x60; of a user in the Remote Platform that has permission to approve time off requests. [Available users][] can be found fetching the [List Company Manager][] endpoint.  [Available users]: https://support.remote.com/hc/en-us/articles/360054668651-Approving-Declining-time-off-requests#h_01G0014GZKZ3EMN6P7C99HAK55 [List Company Manager]: https://gateway.remote.com/v1/docs/openapi.html#tag/Company-Managers  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder approverId(String approverId) {
            this.approverId = approverId;
            return this;
        }
        
        /**
         * Set document
         * @param document  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder document(TimeoffDocumentParams document) {
            this.document = document;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate UTC date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set timeoffDays
         * @param timeoffDays  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder timeoffDays(List<TimeoffDaysParams> timeoffDays) {
            this.timeoffDays = timeoffDays;
            return this;
        }
        
        /**
         * Set timeoffType
         * @param timeoffType  (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder timeoffType(TimeoffType timeoffType) {
            this.timeoffType = timeoffType;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone [TZ identifier](https://www.iana.org/time-zones) (optional)
         * @return UpdateRecord0RequestBuilder
         */
        public UpdateRecord0RequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Build call for updateRecord_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            return updateRecord_0Call(id, updateApprovedTimeoffParams, _callback);
        }

        private UpdateApprovedTimeoffParams buildBodyParams() {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = new UpdateApprovedTimeoffParams();
            updateApprovedTimeoffParams.approvedAt(this.approvedAt);
            updateApprovedTimeoffParams.approverId(this.approverId);
            updateApprovedTimeoffParams.cancelReason(this.cancelReason);
            updateApprovedTimeoffParams.document(this.document);
            updateApprovedTimeoffParams.editReason(this.editReason);
            updateApprovedTimeoffParams.endDate(this.endDate);
            updateApprovedTimeoffParams.notes(this.notes);
            updateApprovedTimeoffParams.startDate(this.startDate);
            if (this.status != null)
            updateApprovedTimeoffParams.status(UpdateApprovedTimeoffParams.StatusEnum.fromValue(this.status));
            updateApprovedTimeoffParams.timeoffDays(this.timeoffDays);
            updateApprovedTimeoffParams.timeoffType(this.timeoffType);
            updateApprovedTimeoffParams.timezone(this.timezone);
            return updateApprovedTimeoffParams;
        }

        /**
         * Execute updateRecord_0 request
         * @return TimeoffResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffResponse execute() throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            ApiResponse<TimeoffResponse> localVarResp = updateRecord_0WithHttpInfo(id, updateApprovedTimeoffParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecord_0 request with HTTP info returned
         * @return ApiResponse&lt;TimeoffResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffResponse> executeWithHttpInfo() throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            return updateRecord_0WithHttpInfo(id, updateApprovedTimeoffParams);
        }

        /**
         * Execute updateRecord_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffResponse> _callback) throws ApiException {
            UpdateApprovedTimeoffParams updateApprovedTimeoffParams = buildBodyParams();
            return updateRecord_0Async(id, updateApprovedTimeoffParams, _callback);
        }
    }

    /**
     * Update Time Off
     * Updates a Time Off record. This endpoint can also be used for cancelling a time off.
     * @param id Timeoff ID (required)
     * @param updateApprovedTimeoffParams UpdateTimeoff (required)
     * @return UpdateRecord0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecord0RequestBuilder updateRecord_0(String cancelReason, String editReason, String id) throws IllegalArgumentException {
        if (cancelReason == null) throw new IllegalArgumentException("\"cancelReason\" is required but got null");
            

        if (editReason == null) throw new IllegalArgumentException("\"editReason\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateRecord0RequestBuilder(cancelReason, editReason, id);
    }
}
