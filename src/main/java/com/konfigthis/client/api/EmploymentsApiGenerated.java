/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompleteOnboarding;
import com.konfigthis.client.model.EmploymentCreationResponse;
import com.konfigthis.client.model.EmploymentResponse;
import com.konfigthis.client.model.ListEmploymentsResponse;
import com.konfigthis.client.model.SuccessResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmploymentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmploymentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmploymentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call completeOnboardingCall(CompleteOnboarding completeOnboarding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completeOnboarding;

        // create path and map variables
        String localVarPath = "/v1/ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeOnboardingValidateBeforeCall(CompleteOnboarding completeOnboarding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'completeOnboarding' is set
        if (completeOnboarding == null) {
            throw new ApiException("Missing the required parameter 'completeOnboarding' when calling completeOnboarding(Async)");
        }

        return completeOnboardingCall(completeOnboarding, _callback);

    }


    private ApiResponse<EmploymentResponse> completeOnboardingWithHttpInfo(CompleteOnboarding completeOnboarding) throws ApiException {
        okhttp3.Call localVarCall = completeOnboardingValidateBeforeCall(completeOnboarding, null);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeOnboardingAsync(CompleteOnboarding completeOnboarding, final ApiCallback<EmploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeOnboardingValidateBeforeCall(completeOnboarding, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteOnboardingRequestBuilder {
        private String employmentId;

        private CompleteOnboardingRequestBuilder() {
        }

        /**
         * Set employmentId
         * @param employmentId  (optional)
         * @return CompleteOnboardingRequestBuilder
         */
        public CompleteOnboardingRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Build call for completeOnboarding
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CompleteOnboarding completeOnboarding = buildBodyParams();
            return completeOnboardingCall(completeOnboarding, _callback);
        }

        private CompleteOnboarding buildBodyParams() {
            CompleteOnboarding completeOnboarding = new CompleteOnboarding();
            completeOnboarding.employmentId(this.employmentId);
            return completeOnboarding;
        }

        /**
         * Execute completeOnboarding request
         * @return EmploymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponse execute() throws ApiException {
            CompleteOnboarding completeOnboarding = buildBodyParams();
            ApiResponse<EmploymentResponse> localVarResp = completeOnboardingWithHttpInfo(completeOnboarding);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeOnboarding request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponse> executeWithHttpInfo() throws ApiException {
            CompleteOnboarding completeOnboarding = buildBodyParams();
            return completeOnboardingWithHttpInfo(completeOnboarding);
        }

        /**
         * Execute completeOnboarding request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponse> _callback) throws ApiException {
            CompleteOnboarding completeOnboarding = buildBodyParams();
            return completeOnboardingAsync(completeOnboarding, _callback);
        }
    }

    /**
     * Complete onboarding
     * Completes the employee onboarding. When all tasks are completed, the employee is marked as in &#x60;review&#x60; status
     * @param completeOnboarding Employment slug (required)
     * @return CompleteOnboardingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CompleteOnboardingRequestBuilder completeOnboarding() throws IllegalArgumentException {
        return new CompleteOnboardingRequestBuilder();
    }
    private okhttp3.Call createEmploymentCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/employments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmploymentValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return createEmploymentCall(body, _callback);

    }


    private ApiResponse<EmploymentCreationResponse> createEmploymentWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = createEmploymentValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EmploymentCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmploymentAsync(Object body, final ApiCallback<EmploymentCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmploymentValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EmploymentCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmploymentRequestBuilder {
        private Object body;

        private CreateEmploymentRequestBuilder() {
        }

        /**
         * Set body
         * @param body Employment params (optional)
         * @return CreateEmploymentRequestBuilder
         */
        public CreateEmploymentRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for createEmployment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return createEmploymentCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute createEmployment request
         * @return EmploymentCreationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentCreationResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<EmploymentCreationResponse> localVarResp = createEmploymentWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployment request with HTTP info returned
         * @return ApiResponse&lt;EmploymentCreationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentCreationResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return createEmploymentWithHttpInfo(body);
        }

        /**
         * Execute createEmployment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentCreationResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return createEmploymentAsync(body, _callback);
        }
    }

    /**
     * Create employment
     * Creates an employment. We support creating employees and contractors.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @return CreateEmploymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmploymentRequestBuilder createEmployment() throws IllegalArgumentException {
        return new CreateEmploymentRequestBuilder();
    }
    private okhttp3.Call getEmploymentInfoCall(String employmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employments/{employment_id}"
            .replace("{" + "employment_id" + "}", localVarApiClient.escapeString(employmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmploymentInfoValidateBeforeCall(String employmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employmentId' is set
        if (employmentId == null) {
            throw new ApiException("Missing the required parameter 'employmentId' when calling getEmploymentInfo(Async)");
        }

        return getEmploymentInfoCall(employmentId, _callback);

    }


    private ApiResponse<EmploymentResponse> getEmploymentInfoWithHttpInfo(String employmentId) throws ApiException {
        okhttp3.Call localVarCall = getEmploymentInfoValidateBeforeCall(employmentId, null);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmploymentInfoAsync(String employmentId, final ApiCallback<EmploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmploymentInfoValidateBeforeCall(employmentId, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmploymentInfoRequestBuilder {
        private final String employmentId;

        private GetEmploymentInfoRequestBuilder(String employmentId) {
            this.employmentId = employmentId;
        }

        /**
         * Build call for getEmploymentInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmploymentInfoCall(employmentId, _callback);
        }


        /**
         * Execute getEmploymentInfo request
         * @return EmploymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponse execute() throws ApiException {
            ApiResponse<EmploymentResponse> localVarResp = getEmploymentInfoWithHttpInfo(employmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmploymentInfo request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponse> executeWithHttpInfo() throws ApiException {
            return getEmploymentInfoWithHttpInfo(employmentId);
        }

        /**
         * Execute getEmploymentInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponse> _callback) throws ApiException {
            return getEmploymentInfoAsync(employmentId, _callback);
        }
    }

    /**
     * Show employment
     * Shows all the information of an employment.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @param employmentId Employment ID (required)
     * @return GetEmploymentInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetEmploymentInfoRequestBuilder getEmploymentInfo(String employmentId) throws IllegalArgumentException {
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new GetEmploymentInfoRequestBuilder(employmentId);
    }
    private okhttp3.Call inviteStartEnrollmentCall(String employmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employments/{employment_id}/invite"
            .replace("{" + "employment_id" + "}", localVarApiClient.escapeString(employmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteStartEnrollmentValidateBeforeCall(String employmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employmentId' is set
        if (employmentId == null) {
            throw new ApiException("Missing the required parameter 'employmentId' when calling inviteStartEnrollment(Async)");
        }

        return inviteStartEnrollmentCall(employmentId, _callback);

    }


    private ApiResponse<SuccessResponse> inviteStartEnrollmentWithHttpInfo(String employmentId) throws ApiException {
        okhttp3.Call localVarCall = inviteStartEnrollmentValidateBeforeCall(employmentId, null);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteStartEnrollmentAsync(String employmentId, final ApiCallback<SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteStartEnrollmentValidateBeforeCall(employmentId, _callback);
        Type localVarReturnType = new TypeToken<SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteStartEnrollmentRequestBuilder {
        private final String employmentId;

        private InviteStartEnrollmentRequestBuilder(String employmentId) {
            this.employmentId = employmentId;
        }

        /**
         * Build call for inviteStartEnrollment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return inviteStartEnrollmentCall(employmentId, _callback);
        }


        /**
         * Execute inviteStartEnrollment request
         * @return SuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public SuccessResponse execute() throws ApiException {
            ApiResponse<SuccessResponse> localVarResp = inviteStartEnrollmentWithHttpInfo(employmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteStartEnrollment request with HTTP info returned
         * @return ApiResponse&lt;SuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SuccessResponse> executeWithHttpInfo() throws ApiException {
            return inviteStartEnrollmentWithHttpInfo(employmentId);
        }

        /**
         * Execute inviteStartEnrollment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SuccessResponse> _callback) throws ApiException {
            return inviteStartEnrollmentAsync(employmentId, _callback);
        }
    }

    /**
     * Invite employment
     * Invite an employment to start the self-enrollment.  Requirements for the invitation to succeed:  * Employment needs to have the following JSON Schema forms filled: &#x60;contract_details&#x60; and &#x60;pricing_plan_details&#x60; * &#x60;provisional_start_date&#x60; must consider the minimum onbaording time of the employment&#39;s country  If there are validations errors, they are returned with a Conflict HTTP Status (409) and a descriptive message. HTTP Status OK (200) is returned in case of success. 
     * @param employmentId Employment ID (required)
     * @return InviteStartEnrollmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public InviteStartEnrollmentRequestBuilder inviteStartEnrollment(String employmentId) throws IllegalArgumentException {
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new InviteStartEnrollmentRequestBuilder(employmentId);
    }
    private okhttp3.Call listAllCall(String companyId, String email, String status, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company_id", companyId));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String companyId, String email, String status, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listAllCall(companyId, email, status, page, pageSize, _callback);

    }


    private ApiResponse<ListEmploymentsResponse> listAllWithHttpInfo(String companyId, String email, String status, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(companyId, email, status, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListEmploymentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String companyId, String email, String status, Integer page, Integer pageSize, final ApiCallback<ListEmploymentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(companyId, email, status, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListEmploymentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String companyId;
        private String email;
        private String status;
        private Integer page;
        private Integer pageSize;

        private ListAllRequestBuilder() {
        }

        /**
         * Set companyId
         * @param companyId Company ID (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set email
         * @param email Filters the results by employments whose login email matches the value (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set status
         * @param status Filters the results by employments whose status matches the value (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(companyId, email, status, page, pageSize, _callback);
        }


        /**
         * Execute listAll request
         * @return ListEmploymentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListEmploymentsResponse execute() throws ApiException {
            ApiResponse<ListEmploymentsResponse> localVarResp = listAllWithHttpInfo(companyId, email, status, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;ListEmploymentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListEmploymentsResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(companyId, email, status, page, pageSize);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListEmploymentsResponse> _callback) throws ApiException {
            return listAllAsync(companyId, email, status, page, pageSize, _callback);
        }
    }

    /**
     * List employments
     * Lists all employments, except for the deleted ones.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateDataCall(String employmentId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/employments/{employment_id}"
            .replace("{" + "employment_id" + "}", localVarApiClient.escapeString(employmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDataValidateBeforeCall(String employmentId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employmentId' is set
        if (employmentId == null) {
            throw new ApiException("Missing the required parameter 'employmentId' when calling updateData(Async)");
        }

        return updateDataCall(employmentId, body, _callback);

    }


    private ApiResponse<EmploymentResponse> updateDataWithHttpInfo(String employmentId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateDataValidateBeforeCall(employmentId, body, null);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDataAsync(String employmentId, Object body, final ApiCallback<EmploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDataValidateBeforeCall(employmentId, body, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDataRequestBuilder {
        private final String employmentId;
        private Object body;

        private UpdateDataRequestBuilder(String employmentId) {
            this.employmentId = employmentId;
        }

        /**
         * Set body
         * @param body Employment params (optional)
         * @return UpdateDataRequestBuilder
         */
        public UpdateDataRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateDataCall(employmentId, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateData request
         * @return EmploymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<EmploymentResponse> localVarResp = updateDataWithHttpInfo(employmentId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateData request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateDataWithHttpInfo(employmentId, body);
        }

        /**
         * Execute updateData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateDataAsync(employmentId, body, _callback);
        }
    }

    /**
     * Update employment
     * Updates an employment.  **For &#x60;created&#x60; employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For &#x60;active&#x60; employments:** You can update the manager (&#x60;manager_id&#x60; field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the &#x60;contract_details&#x60; and &#x60;pricing_plan_details&#x60;, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the &#x60;employment_lifecycle_stage&#x60; field value. If its value is &#x60;employee_self_enrollment&#x60;, it means the employee has received an email to join the Remote platform at their &#x60;personal_email&#x60;.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as &#x60;emergency_contact_details&#x60;. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it&#39;s currently not supported. 
     * @param employmentId Employment ID (required)
     * @return UpdateDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDataRequestBuilder updateData(String employmentId) throws IllegalArgumentException {
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new UpdateDataRequestBuilder(employmentId);
    }
    private okhttp3.Call updateDetailsCall(String employmentId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/employments/{employment_id}"
            .replace("{" + "employment_id" + "}", localVarApiClient.escapeString(employmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsValidateBeforeCall(String employmentId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employmentId' is set
        if (employmentId == null) {
            throw new ApiException("Missing the required parameter 'employmentId' when calling updateDetails(Async)");
        }

        return updateDetailsCall(employmentId, body, _callback);

    }


    private ApiResponse<EmploymentResponse> updateDetailsWithHttpInfo(String employmentId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(employmentId, body, null);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAsync(String employmentId, Object body, final ApiCallback<EmploymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsValidateBeforeCall(employmentId, body, _callback);
        Type localVarReturnType = new TypeToken<EmploymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsRequestBuilder {
        private final String employmentId;
        private Object body;

        private UpdateDetailsRequestBuilder(String employmentId) {
            this.employmentId = employmentId;
        }

        /**
         * Set body
         * @param body Employment params (optional)
         * @return UpdateDetailsRequestBuilder
         */
        public UpdateDetailsRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateDetailsCall(employmentId, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateDetails request
         * @return EmploymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<EmploymentResponse> localVarResp = updateDetailsWithHttpInfo(employmentId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetails request with HTTP info returned
         * @return ApiResponse&lt;EmploymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateDetailsWithHttpInfo(employmentId, body);
        }

        /**
         * Execute updateDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateDetailsAsync(employmentId, body, _callback);
        }
    }

    /**
     * Update employment
     * Updates an employment.  **For &#x60;created&#x60; employments:** You can change all basic params and onboarding tasks or perform a per onboarding task update. You can also update basic_information.  **For &#x60;active&#x60; employments:** You can update the manager (&#x60;manager_id&#x60; field), emergency_contact_details and address_details.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Countries](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.   #### Automatically inviting an employee  When you submit the &#x60;contract_details&#x60; and &#x60;pricing_plan_details&#x60;, Remote should have all the required data to automatically send an invite to the employee. You can tell if an automatic invite has been sent by looking at the &#x60;employment_lifecycle_stage&#x60; field value. If its value is &#x60;employee_self_enrollment&#x60;, it means the employee has received an email to join the Remote platform at their &#x60;personal_email&#x60;.  After an automatic invite is sent to an employee, **you will not be able to update employment data through the Remote API**. After onboarding, only a limited set of employment data will be available for updates, such as &#x60;emergency_contact_details&#x60;. If you want to provide additional information for an employment, please make sure to do so **before** the employee is invited. We block updates to some employment data because employees need to agree to amendments in certain cases, such as when there are changes to their contract_details. Currently, these amendments can only be done through the Remote UI.  Please contact Remote if you need to update contractors via API since it&#39;s currently not supported. 
     * @param employmentId Employment ID (required)
     * @return UpdateDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsRequestBuilder updateDetails(String employmentId) throws IllegalArgumentException {
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new UpdateDetailsRequestBuilder(employmentId);
    }
}
