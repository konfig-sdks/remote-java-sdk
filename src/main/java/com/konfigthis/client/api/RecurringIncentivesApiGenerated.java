/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AmountTaxType;
import com.konfigthis.client.model.CreateRecurringIncentiveParams;
import com.konfigthis.client.model.DeleteRecurringIncentiveResponse;
import com.konfigthis.client.model.ListRecurringIncentivesResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.RecurringIncentiveResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecurringIncentivesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecurringIncentivesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RecurringIncentivesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMonthlyIncentiveCall(CreateRecurringIncentiveParams createRecurringIncentiveParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRecurringIncentiveParams;

        // create path and map variables
        String localVarPath = "/v1/incentives/recurring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMonthlyIncentiveValidateBeforeCall(CreateRecurringIncentiveParams createRecurringIncentiveParams, final ApiCallback _callback) throws ApiException {
        return createMonthlyIncentiveCall(createRecurringIncentiveParams, _callback);

    }


    private ApiResponse<RecurringIncentiveResponse> createMonthlyIncentiveWithHttpInfo(CreateRecurringIncentiveParams createRecurringIncentiveParams) throws ApiException {
        okhttp3.Call localVarCall = createMonthlyIncentiveValidateBeforeCall(createRecurringIncentiveParams, null);
        Type localVarReturnType = new TypeToken<RecurringIncentiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMonthlyIncentiveAsync(CreateRecurringIncentiveParams createRecurringIncentiveParams, final ApiCallback<RecurringIncentiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMonthlyIncentiveValidateBeforeCall(createRecurringIncentiveParams, _callback);
        Type localVarReturnType = new TypeToken<RecurringIncentiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMonthlyIncentiveRequestBuilder {
        private final Integer amount;
        private final AmountTaxType amountTaxType;
        private final LocalDate effectiveDate;
        private final String employmentId;
        private final String type;
        private String note;
        private Integer durationInMonths;

        private CreateMonthlyIncentiveRequestBuilder(Integer amount, AmountTaxType amountTaxType, LocalDate effectiveDate, String employmentId, String type) {
            this.amount = amount;
            this.amountTaxType = amountTaxType;
            this.effectiveDate = effectiveDate;
            this.employmentId = employmentId;
            this.type = type;
        }

        /**
         * Set note
         * @param note  (optional)
         * @return CreateMonthlyIncentiveRequestBuilder
         */
        public CreateMonthlyIncentiveRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set durationInMonths
         * @param durationInMonths How many times the payment will repeat. At the moment we only fully support monthly frequency.  This field is only necessary if the recurring incentive has an end date.  (optional)
         * @return CreateMonthlyIncentiveRequestBuilder
         */
        public CreateMonthlyIncentiveRequestBuilder durationInMonths(Integer durationInMonths) {
            this.durationInMonths = durationInMonths;
            return this;
        }
        
        /**
         * Build call for createMonthlyIncentive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateRecurringIncentiveParams createRecurringIncentiveParams = buildBodyParams();
            return createMonthlyIncentiveCall(createRecurringIncentiveParams, _callback);
        }

        private CreateRecurringIncentiveParams buildBodyParams() {
            CreateRecurringIncentiveParams createRecurringIncentiveParams = new CreateRecurringIncentiveParams();
            createRecurringIncentiveParams.amount(this.amount);
            createRecurringIncentiveParams.amountTaxType(this.amountTaxType);
            createRecurringIncentiveParams.durationInMonths(this.durationInMonths);
            createRecurringIncentiveParams.effectiveDate(this.effectiveDate);
            createRecurringIncentiveParams.employmentId(this.employmentId);
            createRecurringIncentiveParams.note(this.note);
            createRecurringIncentiveParams.type(this.type);
            return createRecurringIncentiveParams;
        }

        /**
         * Execute createMonthlyIncentive request
         * @return RecurringIncentiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public RecurringIncentiveResponse execute() throws ApiException {
            CreateRecurringIncentiveParams createRecurringIncentiveParams = buildBodyParams();
            ApiResponse<RecurringIncentiveResponse> localVarResp = createMonthlyIncentiveWithHttpInfo(createRecurringIncentiveParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMonthlyIncentive request with HTTP info returned
         * @return ApiResponse&lt;RecurringIncentiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringIncentiveResponse> executeWithHttpInfo() throws ApiException {
            CreateRecurringIncentiveParams createRecurringIncentiveParams = buildBodyParams();
            return createMonthlyIncentiveWithHttpInfo(createRecurringIncentiveParams);
        }

        /**
         * Execute createMonthlyIncentive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringIncentiveResponse> _callback) throws ApiException {
            CreateRecurringIncentiveParams createRecurringIncentiveParams = buildBodyParams();
            return createMonthlyIncentiveAsync(createRecurringIncentiveParams, _callback);
        }
    }

    /**
     * Create Recurring Incentive
     * Create a Recurring Incentive, that is, a monthly paid incentive.  Incentives use the currency of the employment specified provided in the &#x60;employment_id&#x60; field. 
     * @return CreateMonthlyIncentiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateMonthlyIncentiveRequestBuilder createMonthlyIncentive(Integer amount, AmountTaxType amountTaxType, LocalDate effectiveDate, String employmentId, String type) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (amountTaxType == null) throw new IllegalArgumentException("\"amountTaxType\" is required but got null");
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateMonthlyIncentiveRequestBuilder(amount, amountTaxType, effectiveDate, employmentId, type);
    }
    private okhttp3.Call deleteScheduledCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incentives/recurring/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScheduledValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScheduled(Async)");
        }

        return deleteScheduledCall(id, _callback);

    }


    private ApiResponse<DeleteRecurringIncentiveResponse> deleteScheduledWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteScheduledValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DeleteRecurringIncentiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteScheduledAsync(String id, final ApiCallback<DeleteRecurringIncentiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScheduledValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DeleteRecurringIncentiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteScheduledRequestBuilder {
        private final String id;

        private DeleteScheduledRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteScheduled
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteScheduledCall(id, _callback);
        }


        /**
         * Execute deleteScheduled request
         * @return DeleteRecurringIncentiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public DeleteRecurringIncentiveResponse execute() throws ApiException {
            ApiResponse<DeleteRecurringIncentiveResponse> localVarResp = deleteScheduledWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteScheduled request with HTTP info returned
         * @return ApiResponse&lt;DeleteRecurringIncentiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteRecurringIncentiveResponse> executeWithHttpInfo() throws ApiException {
            return deleteScheduledWithHttpInfo(id);
        }

        /**
         * Execute deleteScheduled request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteRecurringIncentiveResponse> _callback) throws ApiException {
            return deleteScheduledAsync(id, _callback);
        }
    }

    /**
     * Delete a Recurring Incentive
     * Delete a Recurring Incentive, that is, a monthly paid incentive.  Internally, Remote schedules upcoming incentives. As such, when you attempt to delete a recurring incentive, Remote will **ONLY** delete scheduled incentives with the &#x60;pending&#x60; status.  Incentives payments that are already scheduled and cannot be deleted will be included in the response, in case you need to reference them. 
     * @param id Recurring Incentive ID (required)
     * @return DeleteScheduledRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteScheduledRequestBuilder deleteScheduled(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteScheduledRequestBuilder(id);
    }
    private okhttp3.Call listIncentivesCall(String status, String type, String note, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/incentives/recurring";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (note != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("note", note));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIncentivesValidateBeforeCall(String status, String type, String note, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listIncentivesCall(status, type, note, page, pageSize, _callback);

    }


    private ApiResponse<ListRecurringIncentivesResponse> listIncentivesWithHttpInfo(String status, String type, String note, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listIncentivesValidateBeforeCall(status, type, note, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListRecurringIncentivesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listIncentivesAsync(String status, String type, String note, Integer page, Integer pageSize, final ApiCallback<ListRecurringIncentivesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIncentivesValidateBeforeCall(status, type, note, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListRecurringIncentivesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListIncentivesRequestBuilder {
        private String status;
        private String type;
        private String note;
        private Integer page;
        private Integer pageSize;

        private ListIncentivesRequestBuilder() {
        }

        /**
         * Set status
         * @param status Filter by recurring incentive status: active or deactive. (optional)
         * @return ListIncentivesRequestBuilder
         */
        public ListIncentivesRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type Filter by recurring incentive type. (optional)
         * @return ListIncentivesRequestBuilder
         */
        public ListIncentivesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set note
         * @param note Filter by recurring incentives that contain the value in their notes. (optional)
         * @return ListIncentivesRequestBuilder
         */
        public ListIncentivesRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListIncentivesRequestBuilder
         */
        public ListIncentivesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListIncentivesRequestBuilder
         */
        public ListIncentivesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listIncentives
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listIncentivesCall(status, type, note, page, pageSize, _callback);
        }


        /**
         * Execute listIncentives request
         * @return ListRecurringIncentivesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListRecurringIncentivesResponse execute() throws ApiException {
            ApiResponse<ListRecurringIncentivesResponse> localVarResp = listIncentivesWithHttpInfo(status, type, note, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listIncentives request with HTTP info returned
         * @return ApiResponse&lt;ListRecurringIncentivesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListRecurringIncentivesResponse> executeWithHttpInfo() throws ApiException {
            return listIncentivesWithHttpInfo(status, type, note, page, pageSize);
        }

        /**
         * Execute listIncentives request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListRecurringIncentivesResponse> _callback) throws ApiException {
            return listIncentivesAsync(status, type, note, page, pageSize, _callback);
        }
    }

    /**
     * List Recurring Incentive
     * List all Recurring Incentives of a company. 
     * @return ListIncentivesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListIncentivesRequestBuilder listIncentives() throws IllegalArgumentException {
        return new ListIncentivesRequestBuilder();
    }
}
