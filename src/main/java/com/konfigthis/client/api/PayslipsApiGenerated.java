/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.ListPayslipsResponse;
import com.konfigthis.client.model.PayslipResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayslipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayslipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayslipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call downloadPdfCall(String payslipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payslips/{payslip_id}/pdf"
            .replace("{" + "payslip_id" + "}", localVarApiClient.escapeString(payslipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadPdfValidateBeforeCall(String payslipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payslipId' is set
        if (payslipId == null) {
            throw new ApiException("Missing the required parameter 'payslipId' when calling downloadPdf(Async)");
        }

        return downloadPdfCall(payslipId, _callback);

    }


    private ApiResponse<File> downloadPdfWithHttpInfo(String payslipId) throws ApiException {
        okhttp3.Call localVarCall = downloadPdfValidateBeforeCall(payslipId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadPdfAsync(String payslipId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadPdfValidateBeforeCall(payslipId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadPdfRequestBuilder {
        private final String payslipId;

        private DownloadPdfRequestBuilder(String payslipId) {
            this.payslipId = payslipId;
        }

        /**
         * Build call for downloadPdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadPdfCall(payslipId, _callback);
        }


        /**
         * Execute downloadPdf request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = downloadPdfWithHttpInfo(payslipId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadPdf request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return downloadPdfWithHttpInfo(payslipId);
        }

        /**
         * Execute downloadPdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return downloadPdfAsync(payslipId, _callback);
        }
    }

    /**
     * Download payslip in the PDF format
     * Given a Payslip ID, downloads a payslip. It is important to note that each country has a different payslip format and they are not authored by Remote. 
     * @param payslipId Payslip ID (required)
     * @return DownloadPdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DownloadPdfRequestBuilder downloadPdf(String payslipId) throws IllegalArgumentException {
        if (payslipId == null) throw new IllegalArgumentException("\"payslipId\" is required but got null");
            

        return new DownloadPdfRequestBuilder(payslipId);
    }
    private okhttp3.Call listAllCall(String employmentId, String startDate, String endDate, String expectedPayoutStartDate, String expectedPayoutEndDate, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payslips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_id", employmentId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (expectedPayoutStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expected_payout_start_date", expectedPayoutStartDate));
        }

        if (expectedPayoutEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expected_payout_end_date", expectedPayoutEndDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String employmentId, String startDate, String endDate, String expectedPayoutStartDate, String expectedPayoutEndDate, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listAllCall(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize, _callback);

    }


    private ApiResponse<ListPayslipsResponse> listAllWithHttpInfo(String employmentId, String startDate, String endDate, String expectedPayoutStartDate, String expectedPayoutEndDate, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListPayslipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String employmentId, String startDate, String endDate, String expectedPayoutStartDate, String expectedPayoutEndDate, Integer page, Integer pageSize, final ApiCallback<ListPayslipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListPayslipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private String employmentId;
        private String startDate;
        private String endDate;
        private String expectedPayoutStartDate;
        private String expectedPayoutEndDate;
        private Integer page;
        private Integer pageSize;

        private ListAllRequestBuilder() {
        }

        /**
         * Set employmentId
         * @param employmentId Employment ID (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Filters by payslips &#x60;issued_at&#x60; field, after or on the same day than the given date (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Filters by payslips &#x60;issued_at&#x60; field, before or or the same day than the given date (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set expectedPayoutStartDate
         * @param expectedPayoutStartDate Filters by payslips &#x60;expected_payout_date&#x60; field, after or on the same day than the given date (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder expectedPayoutStartDate(String expectedPayoutStartDate) {
            this.expectedPayoutStartDate = expectedPayoutStartDate;
            return this;
        }
        
        /**
         * Set expectedPayoutEndDate
         * @param expectedPayoutEndDate Filters by payslips &#x60;expected_payout_date&#x60; field, before or or the same day than the given date (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder expectedPayoutEndDate(String expectedPayoutEndDate) {
            this.expectedPayoutEndDate = expectedPayoutEndDate;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize, _callback);
        }


        /**
         * Execute listAll request
         * @return ListPayslipsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListPayslipsResponse execute() throws ApiException {
            ApiResponse<ListPayslipsResponse> localVarResp = listAllWithHttpInfo(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;ListPayslipsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListPayslipsResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListPayslipsResponse> _callback) throws ApiException {
            return listAllAsync(employmentId, startDate, endDate, expectedPayoutStartDate, expectedPayoutEndDate, page, pageSize, _callback);
        }
    }

    /**
     * List payslips
     * Lists all payslips belonging to a company. Can also filter for a single employment belonging to that company. 
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call showPayslipCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/payslips/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showPayslipValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showPayslip(Async)");
        }

        return showPayslipCall(id, _callback);

    }


    private ApiResponse<PayslipResponse> showPayslipWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showPayslipValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PayslipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showPayslipAsync(String id, final ApiCallback<PayslipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showPayslipValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PayslipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowPayslipRequestBuilder {
        private final String id;

        private ShowPayslipRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showPayslip
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showPayslipCall(id, _callback);
        }


        /**
         * Execute showPayslip request
         * @return PayslipResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PayslipResponse execute() throws ApiException {
            ApiResponse<PayslipResponse> localVarResp = showPayslipWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showPayslip request with HTTP info returned
         * @return ApiResponse&lt;PayslipResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PayslipResponse> executeWithHttpInfo() throws ApiException {
            return showPayslipWithHttpInfo(id);
        }

        /**
         * Execute showPayslip request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PayslipResponse> _callback) throws ApiException {
            return showPayslipAsync(id, _callback);
        }
    }

    /**
     * Show payslip
     * Given an ID, shows a payslip.  Please contact api-support@remote.com to request access to this endpoint. 
     * @param id Payslip ID (required)
     * @return ShowPayslipRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowPayslipRequestBuilder showPayslip(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowPayslipRequestBuilder(id);
    }
}
