/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmploymentCustomFieldValueResponse;
import com.konfigthis.client.model.ListEmploymentCustomFieldsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listDefinitionsCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/custom-fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDefinitionsValidateBeforeCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listDefinitionsCall(page, pageSize, _callback);

    }


    private ApiResponse<ListEmploymentCustomFieldsResponse> listDefinitionsWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listDefinitionsValidateBeforeCall(page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListEmploymentCustomFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDefinitionsAsync(Integer page, Integer pageSize, final ApiCallback<ListEmploymentCustomFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDefinitionsValidateBeforeCall(page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListEmploymentCustomFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDefinitionsRequestBuilder {
        private Integer page;
        private Integer pageSize;

        private ListDefinitionsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListDefinitionsRequestBuilder
         */
        public ListDefinitionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListDefinitionsRequestBuilder
         */
        public ListDefinitionsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listDefinitions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDefinitionsCall(page, pageSize, _callback);
        }


        /**
         * Execute listDefinitions request
         * @return ListEmploymentCustomFieldsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListEmploymentCustomFieldsResponse execute() throws ApiException {
            ApiResponse<ListEmploymentCustomFieldsResponse> localVarResp = listDefinitionsWithHttpInfo(page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDefinitions request with HTTP info returned
         * @return ApiResponse&lt;ListEmploymentCustomFieldsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListEmploymentCustomFieldsResponse> executeWithHttpInfo() throws ApiException {
            return listDefinitionsWithHttpInfo(page, pageSize);
        }

        /**
         * Execute listDefinitions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListEmploymentCustomFieldsResponse> _callback) throws ApiException {
            return listDefinitionsAsync(page, pageSize, _callback);
        }
    }

    /**
     * Lists custom fields definitions
     * Returns custom fields definitions
     * @return ListDefinitionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListDefinitionsRequestBuilder listDefinitions() throws IllegalArgumentException {
        return new ListDefinitionsRequestBuilder();
    }
    private okhttp3.Call showValueCall(String customFieldId, String employmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/custom-fields/{custom_field_id}/values/{employment_id}"
            .replace("{" + "custom_field_id" + "}", localVarApiClient.escapeString(customFieldId.toString()))
            .replace("{" + "employment_id" + "}", localVarApiClient.escapeString(employmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showValueValidateBeforeCall(String customFieldId, String employmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling showValue(Async)");
        }

        // verify the required parameter 'employmentId' is set
        if (employmentId == null) {
            throw new ApiException("Missing the required parameter 'employmentId' when calling showValue(Async)");
        }

        return showValueCall(customFieldId, employmentId, _callback);

    }


    private ApiResponse<EmploymentCustomFieldValueResponse> showValueWithHttpInfo(String customFieldId, String employmentId) throws ApiException {
        okhttp3.Call localVarCall = showValueValidateBeforeCall(customFieldId, employmentId, null);
        Type localVarReturnType = new TypeToken<EmploymentCustomFieldValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showValueAsync(String customFieldId, String employmentId, final ApiCallback<EmploymentCustomFieldValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showValueValidateBeforeCall(customFieldId, employmentId, _callback);
        Type localVarReturnType = new TypeToken<EmploymentCustomFieldValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowValueRequestBuilder {
        private final String customFieldId;
        private final String employmentId;

        private ShowValueRequestBuilder(String customFieldId, String employmentId) {
            this.customFieldId = customFieldId;
            this.employmentId = employmentId;
        }

        /**
         * Build call for showValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showValueCall(customFieldId, employmentId, _callback);
        }


        /**
         * Execute showValue request
         * @return EmploymentCustomFieldValueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentCustomFieldValueResponse execute() throws ApiException {
            ApiResponse<EmploymentCustomFieldValueResponse> localVarResp = showValueWithHttpInfo(customFieldId, employmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showValue request with HTTP info returned
         * @return ApiResponse&lt;EmploymentCustomFieldValueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentCustomFieldValueResponse> executeWithHttpInfo() throws ApiException {
            return showValueWithHttpInfo(customFieldId, employmentId);
        }

        /**
         * Execute showValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentCustomFieldValueResponse> _callback) throws ApiException {
            return showValueAsync(customFieldId, employmentId, _callback);
        }
    }

    /**
     * Show a custom field value
     * Returns a custom field value for a given employment
     * @param customFieldId Custom field ID (required)
     * @param employmentId Employment ID (required)
     * @return ShowValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowValueRequestBuilder showValue(String customFieldId, String employmentId) throws IllegalArgumentException {
        if (customFieldId == null) throw new IllegalArgumentException("\"customFieldId\" is required but got null");
            

        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new ShowValueRequestBuilder(customFieldId, employmentId);
    }
}
