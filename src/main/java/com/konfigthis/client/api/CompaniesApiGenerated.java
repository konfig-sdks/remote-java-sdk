/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CompaniesResponse;
import com.konfigthis.client.model.CompanyCreationResponse;
import com.konfigthis.client.model.CompanyResponse;
import com.konfigthis.client.model.CreateCompanyParams;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateCompanyParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompaniesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompaniesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompaniesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCompanyCall(String action, CreateCompanyParams createCompanyParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCompanyParams;

        // create path and map variables
        String localVarPath = "/v1/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCompanyValidateBeforeCall(String action, CreateCompanyParams createCompanyParams, final ApiCallback _callback) throws ApiException {
        return createNewCompanyCall(action, createCompanyParams, _callback);

    }


    private ApiResponse<CompanyCreationResponse> createNewCompanyWithHttpInfo(String action, CreateCompanyParams createCompanyParams) throws ApiException {
        okhttp3.Call localVarCall = createNewCompanyValidateBeforeCall(action, createCompanyParams, null);
        Type localVarReturnType = new TypeToken<CompanyCreationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCompanyAsync(String action, CreateCompanyParams createCompanyParams, final ApiCallback<CompanyCreationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCompanyValidateBeforeCall(action, createCompanyParams, _callback);
        Type localVarReturnType = new TypeToken<CompanyCreationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCompanyRequestBuilder {
        private final String companyOwnerEmail;
        private final String companyOwnerName;
        private final String countryCode;
        private final String desiredCurrency;
        private final String name;
        private final OffsetDateTime termsOfServiceAcceptedAt;
        private Object addressDetails;
        private Object bankAccountDetails;
        private String emailDomain;
        private String externalId;
        private String phoneNumber;
        private String registrationNumber;
        private String taxNumber;
        private String action;

        private CreateNewCompanyRequestBuilder(String companyOwnerEmail, String companyOwnerName, String countryCode, String desiredCurrency, String name, OffsetDateTime termsOfServiceAcceptedAt) {
            this.companyOwnerEmail = companyOwnerEmail;
            this.companyOwnerName = companyOwnerName;
            this.countryCode = countryCode;
            this.desiredCurrency = desiredCurrency;
            this.name = name;
            this.termsOfServiceAcceptedAt = termsOfServiceAcceptedAt;
        }

        /**
         * Set addressDetails
         * @param addressDetails Fields can vary depending on the country. Please, check the required fields structure using the [Show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html). Use the desired country and &#x60;address_details&#x60; as the form name for the placeholders. The response complies with the [JSON Schema](https://remote.com/resources/api/how-json-schemas-work) specification.  (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder addressDetails(Object addressDetails) {
            this.addressDetails = addressDetails;
            return this;
        }
        
        /**
         * Set bankAccountDetails
         * @param bankAccountDetails Fields can vary depending on the country. Please, check the required fields structure using the [Show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html). Use the desired country and &#x60;bank_account_details&#x60; as the form name for the placeholders. The response complies with the [JSON Schema](https://remote.com/resources/api/how-json-schemas-work) specification.  (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder bankAccountDetails(Object bankAccountDetails) {
            this.bankAccountDetails = bankAccountDetails;
            return this;
        }
        
        /**
         * Set emailDomain
         * @param emailDomain The domain of the company. Use this field to specify the company domain name when it&#39;s different from the domain in the company owner&#39;s email. (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder emailDomain(String emailDomain) {
            this.emailDomain = emailDomain;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Id of the company as represented in the external partner system. (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber A phone number the company can be contacted with. (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set registrationNumber
         * @param registrationNumber The company registration number. This field or &#x60;tax_number&#x60; (but not both) should be submitted. (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder registrationNumber(String registrationNumber) {
            this.registrationNumber = registrationNumber;
            return this;
        }
        
        /**
         * Set taxNumber
         * @param taxNumber The tax identifier of the company. This field or &#x60;registration_number&#x60; (but not both) should be submitted. (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder taxNumber(String taxNumber) {
            this.taxNumber = taxNumber;
            return this;
        }
        
        /**
         * Set action
         * @param action Complementary action(s) to perform when creating a company:  - &#x60;get_oauth_access_tokens&#x60; returns the user&#39;s access and refresh tokens - &#x60;send_create_password_email &#x60; sends a reset password token to the company owner&#39;s email so they can log in using Remote UI (not needed if integration plans to use SSO only)  If &#x60;action&#x60; contains &#x60;send_create_password_email&#x60; you can redirect the user to [https://employ.remote.com/api-integration-new-password-send](https://employ.remote.com/api-integration-new-password-send)  (optional)
         * @return CreateNewCompanyRequestBuilder
         */
        public CreateNewCompanyRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Build call for createNewCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCompanyParams createCompanyParams = buildBodyParams();
            return createNewCompanyCall(action, createCompanyParams, _callback);
        }

        private CreateCompanyParams buildBodyParams() {
            CreateCompanyParams createCompanyParams = new CreateCompanyParams();
            createCompanyParams.addressDetails(this.addressDetails);
            createCompanyParams.bankAccountDetails(this.bankAccountDetails);
            createCompanyParams.companyOwnerEmail(this.companyOwnerEmail);
            createCompanyParams.companyOwnerName(this.companyOwnerName);
            createCompanyParams.countryCode(this.countryCode);
            if (this.desiredCurrency != null)
            createCompanyParams.desiredCurrency(CreateCompanyParams.DesiredCurrencyEnum.fromValue(this.desiredCurrency));
            createCompanyParams.emailDomain(this.emailDomain);
            createCompanyParams.externalId(this.externalId);
            createCompanyParams.name(this.name);
            createCompanyParams.phoneNumber(this.phoneNumber);
            createCompanyParams.registrationNumber(this.registrationNumber);
            createCompanyParams.taxNumber(this.taxNumber);
            createCompanyParams.termsOfServiceAcceptedAt(this.termsOfServiceAcceptedAt);
            return createCompanyParams;
        }

        /**
         * Execute createNewCompany request
         * @return CompanyCreationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CompanyCreationResponse execute() throws ApiException {
            CreateCompanyParams createCompanyParams = buildBodyParams();
            ApiResponse<CompanyCreationResponse> localVarResp = createNewCompanyWithHttpInfo(action, createCompanyParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCompany request with HTTP info returned
         * @return ApiResponse&lt;CompanyCreationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyCreationResponse> executeWithHttpInfo() throws ApiException {
            CreateCompanyParams createCompanyParams = buildBodyParams();
            return createNewCompanyWithHttpInfo(action, createCompanyParams);
        }

        /**
         * Execute createNewCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyCreationResponse> _callback) throws ApiException {
            CreateCompanyParams createCompanyParams = buildBodyParams();
            return createNewCompanyAsync(action, createCompanyParams, _callback);
        }
    }

    /**
     * Create a company
     *   Creates a new company.    ### Creating a company with only the required request body parameters   When you call this endpoint and omit all the optional parameters in the request body,   the following resources get created upon a successful response:   * A new company with status &#x60;pending&#x60;.   * A company owner for the new company with status &#x60;initiated&#x60;.    See the [update a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) for   more details on how to get your company and its owner to &#x60;active&#x60; status.    If you&#39;d like to create a company and its owner with &#x60;active&#x60; status in a single request,   please provide the optional &#x60;address_details&#x60; parameter as well.    ### Accepting the Terms of Service    A required step for creating a company in Remote is to accept our Terms of Service (ToS).    Company managers need to be aware of our Terms of Service and Privacy Policy,   hence **it&#39;s the responsibility of our partners to advise and ensure company managers read   and accept the ToS**. The terms have to be accepted only once, before creating a company,   and the Remote API will collect the acceptance timestamp as its confirmation.    To ensure users read the most recent version of Remote&#39;s Terms of Service, their **acceptance   must be done within the last fifteen minutes prior the company creation action**.    To retrieve this information, partners can provide an element with any text and a description   explaining that by performing that action they are accepting Remote&#39;s Term of Service. For   instance, the partner can add a checkbox or a \&quot;Create Remote Account\&quot; button followed by a   description saying \&quot;By creating an account, you agree to   [Remote&#39;s Terms of Service](https://remote.com/terms-of-service). Also see Remote&#39;s   [Privacy Policy](https://remote.com/privacy-policy)\&quot;. 
     * @return CreateNewCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCompanyRequestBuilder createNewCompany(String companyOwnerEmail, String companyOwnerName, String countryCode, String desiredCurrency, String name, OffsetDateTime termsOfServiceAcceptedAt) throws IllegalArgumentException {
        if (companyOwnerEmail == null) throw new IllegalArgumentException("\"companyOwnerEmail\" is required but got null");
            

        if (companyOwnerName == null) throw new IllegalArgumentException("\"companyOwnerName\" is required but got null");
            

        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            

        if (desiredCurrency == null) throw new IllegalArgumentException("\"desiredCurrency\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (termsOfServiceAcceptedAt == null) throw new IllegalArgumentException("\"termsOfServiceAcceptedAt\" is required but got null");
        return new CreateNewCompanyRequestBuilder(companyOwnerEmail, companyOwnerName, countryCode, desiredCurrency, name, termsOfServiceAcceptedAt);
    }
    private okhttp3.Call listAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllCall(_callback);

    }


    private ApiResponse<CompaniesResponse> listAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CompaniesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(final ApiCallback<CompaniesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CompaniesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {

        private ListAllRequestBuilder() {
        }

        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(_callback);
        }


        /**
         * Execute listAll request
         * @return CompaniesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CompaniesResponse execute() throws ApiException {
            ApiResponse<CompaniesResponse> localVarResp = listAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;CompaniesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompaniesResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo();
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompaniesResponse> _callback) throws ApiException {
            return listAllAsync(_callback);
        }
    }

    /**
     * List all companies
     * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call showCompanyCall(String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showCompanyValidateBeforeCall(String companyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling showCompany(Async)");
        }

        return showCompanyCall(companyId, _callback);

    }


    private ApiResponse<CompanyResponse> showCompanyWithHttpInfo(String companyId) throws ApiException {
        okhttp3.Call localVarCall = showCompanyValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<CompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showCompanyAsync(String companyId, final ApiCallback<CompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showCompanyValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<CompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowCompanyRequestBuilder {
        private final String companyId;

        private ShowCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Build call for showCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showCompanyCall(companyId, _callback);
        }


        /**
         * Execute showCompany request
         * @return CompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CompanyResponse execute() throws ApiException {
            ApiResponse<CompanyResponse> localVarResp = showCompanyWithHttpInfo(companyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showCompany request with HTTP info returned
         * @return ApiResponse&lt;CompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyResponse> executeWithHttpInfo() throws ApiException {
            return showCompanyWithHttpInfo(companyId);
        }

        /**
         * Execute showCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyResponse> _callback) throws ApiException {
            return showCompanyAsync(companyId, _callback);
        }
    }

    /**
     * Show a company
     * Given an ID, shows a company
     * @param companyId Company ID (required)
     * @return ShowCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowCompanyRequestBuilder showCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ShowCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call updateCompanyCall(String companyId, UpdateCompanyParams updateCompanyParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCompanyParams;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyValidateBeforeCall(String companyId, UpdateCompanyParams updateCompanyParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateCompany(Async)");
        }

        return updateCompanyCall(companyId, updateCompanyParams, _callback);

    }


    private ApiResponse<CompanyResponse> updateCompanyWithHttpInfo(String companyId, UpdateCompanyParams updateCompanyParams) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyValidateBeforeCall(companyId, updateCompanyParams, null);
        Type localVarReturnType = new TypeToken<CompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompanyAsync(String companyId, UpdateCompanyParams updateCompanyParams, final ApiCallback<CompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyValidateBeforeCall(companyId, updateCompanyParams, _callback);
        Type localVarReturnType = new TypeToken<CompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompanyRequestBuilder {
        private final String companyId;
        private Object addressDetails;
        private Object bankAccountDetails;
        private String countryCode;
        private String desiredCurrency;
        private String name;
        private String phoneNumber;
        private String registrationNumber;
        private String taxNumber;

        private UpdateCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set addressDetails
         * @param addressDetails Fields can vary depending on the country. Please, check the required fields structure using the [Show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html). Use the desired country and &#x60;address_details&#x60; as the form name for the placeholders. The response complies with the [JSON Schema](https://remote.com/resources/api/how-json-schemas-work) specification.  (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder addressDetails(Object addressDetails) {
            this.addressDetails = addressDetails;
            return this;
        }
        
        /**
         * Set bankAccountDetails
         * @param bankAccountDetails Fields can vary depending on the country. Please, check the required fields structure using the [Show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html). Use the desired country and &#x60;bank_account_details&#x60; as the form name for the placeholders. The response complies with the [JSON Schema](https://remote.com/resources/api/how-json-schemas-work) specification.  (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder bankAccountDetails(Object bankAccountDetails) {
            this.bankAccountDetails = bankAccountDetails;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode Country of company address (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set desiredCurrency
         * @param desiredCurrency Desired currency for invoicing and displaying converted salaries in Remote UI regardless of the employee&#39;s country.  This field is only accepted if company is in status &#x60;pending&#x60;. Please contact Remote if you wish to update it.  (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder desiredCurrency(String desiredCurrency) {
            this.desiredCurrency = desiredCurrency;
            return this;
        }
        
        /**
         * Set name
         * @param name This field is only accepted if company is in status &#x60;pending&#x60;. Please contact Remote if you wish to update it.  (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber A phone number the company can be contacted with. (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set registrationNumber
         * @param registrationNumber The company registration number. This field or tax_number (but not both) should be submitted.  This field is only accepted if company is in status &#x60;pending&#x60;.  (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder registrationNumber(String registrationNumber) {
            this.registrationNumber = registrationNumber;
            return this;
        }
        
        /**
         * Set taxNumber
         * @param taxNumber   The tax identifier of the company. This field or registration_number (but not both) should be submitted.    This field is only accepted if company is in status &#x60;pending&#x60;.  (optional)
         * @return UpdateCompanyRequestBuilder
         */
        public UpdateCompanyRequestBuilder taxNumber(String taxNumber) {
            this.taxNumber = taxNumber;
            return this;
        }
        
        /**
         * Build call for updateCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            return updateCompanyCall(companyId, updateCompanyParams, _callback);
        }

        private UpdateCompanyParams buildBodyParams() {
            UpdateCompanyParams updateCompanyParams = new UpdateCompanyParams();
            updateCompanyParams.addressDetails(this.addressDetails);
            updateCompanyParams.bankAccountDetails(this.bankAccountDetails);
            updateCompanyParams.countryCode(this.countryCode);
            if (this.desiredCurrency != null)
            updateCompanyParams.desiredCurrency(UpdateCompanyParams.DesiredCurrencyEnum.fromValue(this.desiredCurrency));
            updateCompanyParams.name(this.name);
            updateCompanyParams.phoneNumber(this.phoneNumber);
            updateCompanyParams.registrationNumber(this.registrationNumber);
            updateCompanyParams.taxNumber(this.taxNumber);
            return updateCompanyParams;
        }

        /**
         * Execute updateCompany request
         * @return CompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CompanyResponse execute() throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            ApiResponse<CompanyResponse> localVarResp = updateCompanyWithHttpInfo(companyId, updateCompanyParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompany request with HTTP info returned
         * @return ApiResponse&lt;CompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyResponse> executeWithHttpInfo() throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            return updateCompanyWithHttpInfo(companyId, updateCompanyParams);
        }

        /**
         * Execute updateCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyResponse> _callback) throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            return updateCompanyAsync(companyId, updateCompanyParams, _callback);
        }
    }

    /**
     * Update a company
     * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to &#x60;active&#x60; status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to &#x60;active&#x60; and the company onboarding will be marked as \&quot;completed\&quot;.  The following constitutes a company with \&quot;all the necessary data\&quot;: * Complete &#x60;address&#x60;, with valid &#x60;address&#x60;, &#x60;postal_code&#x60;, &#x60;country&#x60; and &#x60;state&#x60; parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company &#x60;tax_number&#x60; or &#x60;registration_number&#x60; is not nil * Company &#x60;name&#x60; is not nil (already required when creating the company) * Company has a &#x60;desired_currency&#x60; in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
     * @param companyId Company ID (required)
     * @return UpdateCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompanyRequestBuilder updateCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new UpdateCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call updateCompany_0Call(String companyId, UpdateCompanyParams updateCompanyParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCompanyParams;

        // create path and map variables
        String localVarPath = "/v1/companies/{company_id}"
            .replace("{" + "company_id" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompany_0ValidateBeforeCall(String companyId, UpdateCompanyParams updateCompanyParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateCompany_0(Async)");
        }

        return updateCompany_0Call(companyId, updateCompanyParams, _callback);

    }


    private ApiResponse<CompanyResponse> updateCompany_0WithHttpInfo(String companyId, UpdateCompanyParams updateCompanyParams) throws ApiException {
        okhttp3.Call localVarCall = updateCompany_0ValidateBeforeCall(companyId, updateCompanyParams, null);
        Type localVarReturnType = new TypeToken<CompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompany_0Async(String companyId, UpdateCompanyParams updateCompanyParams, final ApiCallback<CompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompany_0ValidateBeforeCall(companyId, updateCompanyParams, _callback);
        Type localVarReturnType = new TypeToken<CompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompany0RequestBuilder {
        private final String companyId;
        private Object addressDetails;
        private Object bankAccountDetails;
        private String countryCode;
        private String desiredCurrency;
        private String name;
        private String phoneNumber;
        private String registrationNumber;
        private String taxNumber;

        private UpdateCompany0RequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set addressDetails
         * @param addressDetails Fields can vary depending on the country. Please, check the required fields structure using the [Show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html). Use the desired country and &#x60;address_details&#x60; as the form name for the placeholders. The response complies with the [JSON Schema](https://remote.com/resources/api/how-json-schemas-work) specification.  (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder addressDetails(Object addressDetails) {
            this.addressDetails = addressDetails;
            return this;
        }
        
        /**
         * Set bankAccountDetails
         * @param bankAccountDetails Fields can vary depending on the country. Please, check the required fields structure using the [Show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html). Use the desired country and &#x60;bank_account_details&#x60; as the form name for the placeholders. The response complies with the [JSON Schema](https://remote.com/resources/api/how-json-schemas-work) specification.  (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder bankAccountDetails(Object bankAccountDetails) {
            this.bankAccountDetails = bankAccountDetails;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode Country of company address (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set desiredCurrency
         * @param desiredCurrency Desired currency for invoicing and displaying converted salaries in Remote UI regardless of the employee&#39;s country.  This field is only accepted if company is in status &#x60;pending&#x60;. Please contact Remote if you wish to update it.  (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder desiredCurrency(String desiredCurrency) {
            this.desiredCurrency = desiredCurrency;
            return this;
        }
        
        /**
         * Set name
         * @param name This field is only accepted if company is in status &#x60;pending&#x60;. Please contact Remote if you wish to update it.  (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set phoneNumber
         * @param phoneNumber A phone number the company can be contacted with. (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        /**
         * Set registrationNumber
         * @param registrationNumber The company registration number. This field or tax_number (but not both) should be submitted.  This field is only accepted if company is in status &#x60;pending&#x60;.  (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder registrationNumber(String registrationNumber) {
            this.registrationNumber = registrationNumber;
            return this;
        }
        
        /**
         * Set taxNumber
         * @param taxNumber   The tax identifier of the company. This field or registration_number (but not both) should be submitted.    This field is only accepted if company is in status &#x60;pending&#x60;.  (optional)
         * @return UpdateCompany0RequestBuilder
         */
        public UpdateCompany0RequestBuilder taxNumber(String taxNumber) {
            this.taxNumber = taxNumber;
            return this;
        }
        
        /**
         * Build call for updateCompany_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            return updateCompany_0Call(companyId, updateCompanyParams, _callback);
        }

        private UpdateCompanyParams buildBodyParams() {
            UpdateCompanyParams updateCompanyParams = new UpdateCompanyParams();
            updateCompanyParams.addressDetails(this.addressDetails);
            updateCompanyParams.bankAccountDetails(this.bankAccountDetails);
            updateCompanyParams.countryCode(this.countryCode);
            if (this.desiredCurrency != null)
            updateCompanyParams.desiredCurrency(UpdateCompanyParams.DesiredCurrencyEnum.fromValue(this.desiredCurrency));
            updateCompanyParams.name(this.name);
            updateCompanyParams.phoneNumber(this.phoneNumber);
            updateCompanyParams.registrationNumber(this.registrationNumber);
            updateCompanyParams.taxNumber(this.taxNumber);
            return updateCompanyParams;
        }

        /**
         * Execute updateCompany_0 request
         * @return CompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CompanyResponse execute() throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            ApiResponse<CompanyResponse> localVarResp = updateCompany_0WithHttpInfo(companyId, updateCompanyParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompany_0 request with HTTP info returned
         * @return ApiResponse&lt;CompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompanyResponse> executeWithHttpInfo() throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            return updateCompany_0WithHttpInfo(companyId, updateCompanyParams);
        }

        /**
         * Execute updateCompany_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompanyResponse> _callback) throws ApiException {
            UpdateCompanyParams updateCompanyParams = buildBodyParams();
            return updateCompany_0Async(companyId, updateCompanyParams, _callback);
        }
    }

    /**
     * Update a company
     * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to &#x60;active&#x60; status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to &#x60;active&#x60; and the company onboarding will be marked as \&quot;completed\&quot;.  The following constitutes a company with \&quot;all the necessary data\&quot;: * Complete &#x60;address&#x60;, with valid &#x60;address&#x60;, &#x60;postal_code&#x60;, &#x60;country&#x60; and &#x60;state&#x60; parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company &#x60;tax_number&#x60; or &#x60;registration_number&#x60; is not nil * Company &#x60;name&#x60; is not nil (already required when creating the company) * Company has a &#x60;desired_currency&#x60; in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
     * @param companyId Company ID (required)
     * @return UpdateCompany0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompany0RequestBuilder updateCompany_0(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new UpdateCompany0RequestBuilder(companyId);
    }
}
