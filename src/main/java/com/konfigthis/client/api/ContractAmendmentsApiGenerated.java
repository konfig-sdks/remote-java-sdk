/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractAmendmentAutomatableResponse;
import com.konfigthis.client.model.ContractAmendmentFormResponse;
import com.konfigthis.client.model.ContractAmendmentResponse;
import com.konfigthis.client.model.ContractAmendmentSchemaParams;
import com.konfigthis.client.model.CreateContractAmendmentParams;
import com.konfigthis.client.model.ListContractAmendmentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractAmendmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractAmendmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractAmendmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveAmendmentCall(String contractAmendmentRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sandbox/contract-amendments/{contract_amendment_request_id}/approve"
            .replace("{" + "contract_amendment_request_id" + "}", localVarApiClient.escapeString(contractAmendmentRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveAmendmentValidateBeforeCall(String contractAmendmentRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractAmendmentRequestId' is set
        if (contractAmendmentRequestId == null) {
            throw new ApiException("Missing the required parameter 'contractAmendmentRequestId' when calling approveAmendment(Async)");
        }

        return approveAmendmentCall(contractAmendmentRequestId, _callback);

    }


    private ApiResponse<ContractAmendmentResponse> approveAmendmentWithHttpInfo(String contractAmendmentRequestId) throws ApiException {
        okhttp3.Call localVarCall = approveAmendmentValidateBeforeCall(contractAmendmentRequestId, null);
        Type localVarReturnType = new TypeToken<ContractAmendmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveAmendmentAsync(String contractAmendmentRequestId, final ApiCallback<ContractAmendmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveAmendmentValidateBeforeCall(contractAmendmentRequestId, _callback);
        Type localVarReturnType = new TypeToken<ContractAmendmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveAmendmentRequestBuilder {
        private final String contractAmendmentRequestId;

        private ApproveAmendmentRequestBuilder(String contractAmendmentRequestId) {
            this.contractAmendmentRequestId = contractAmendmentRequestId;
        }

        /**
         * Build call for approveAmendment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return approveAmendmentCall(contractAmendmentRequestId, _callback);
        }


        /**
         * Execute approveAmendment request
         * @return ContractAmendmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ContractAmendmentResponse execute() throws ApiException {
            ApiResponse<ContractAmendmentResponse> localVarResp = approveAmendmentWithHttpInfo(contractAmendmentRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveAmendment request with HTTP info returned
         * @return ApiResponse&lt;ContractAmendmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractAmendmentResponse> executeWithHttpInfo() throws ApiException {
            return approveAmendmentWithHttpInfo(contractAmendmentRequestId);
        }

        /**
         * Execute approveAmendment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractAmendmentResponse> _callback) throws ApiException {
            return approveAmendmentAsync(contractAmendmentRequestId, _callback);
        }
    }

    /**
     * Approve Contract Amendment in the Sandbox Environment
     * Approves a contract amendment request without the intervention of a Remote admin. Approvals done via this endpoint are effective immediately, regardless of the effective date entered on the contract amendment creation.  This endpoint is only available in Sandbox, otherwise it will respond with a 404. 
     * @param contractAmendmentRequestId Contract amendment request ID (required)
     * @return ApproveAmendmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApproveAmendmentRequestBuilder approveAmendment(String contractAmendmentRequestId) throws IllegalArgumentException {
        if (contractAmendmentRequestId == null) throw new IllegalArgumentException("\"contractAmendmentRequestId\" is required but got null");
            

        return new ApproveAmendmentRequestBuilder(contractAmendmentRequestId);
    }
    private okhttp3.Call checkAutomatabilityCall(CreateContractAmendmentParams createContractAmendmentParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContractAmendmentParams;

        // create path and map variables
        String localVarPath = "/v1/contract-amendments/automatable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAutomatabilityValidateBeforeCall(CreateContractAmendmentParams createContractAmendmentParams, final ApiCallback _callback) throws ApiException {
        return checkAutomatabilityCall(createContractAmendmentParams, _callback);

    }


    private ApiResponse<ContractAmendmentAutomatableResponse> checkAutomatabilityWithHttpInfo(CreateContractAmendmentParams createContractAmendmentParams) throws ApiException {
        okhttp3.Call localVarCall = checkAutomatabilityValidateBeforeCall(createContractAmendmentParams, null);
        Type localVarReturnType = new TypeToken<ContractAmendmentAutomatableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkAutomatabilityAsync(CreateContractAmendmentParams createContractAmendmentParams, final ApiCallback<ContractAmendmentAutomatableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAutomatabilityValidateBeforeCall(createContractAmendmentParams, _callback);
        Type localVarReturnType = new TypeToken<ContractAmendmentAutomatableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckAutomatabilityRequestBuilder {
        private final String amendmentContractId;
        private final Object contractAmendment;
        private final String employmentId;

        private CheckAutomatabilityRequestBuilder(String amendmentContractId, Object contractAmendment, String employmentId) {
            this.amendmentContractId = amendmentContractId;
            this.contractAmendment = contractAmendment;
            this.employmentId = employmentId;
        }

        /**
         * Build call for checkAutomatability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            return checkAutomatabilityCall(createContractAmendmentParams, _callback);
        }

        private CreateContractAmendmentParams buildBodyParams() {
            CreateContractAmendmentParams createContractAmendmentParams = new CreateContractAmendmentParams();
            createContractAmendmentParams.amendmentContractId(this.amendmentContractId);
            createContractAmendmentParams.contractAmendment(this.contractAmendment);
            createContractAmendmentParams.employmentId(this.employmentId);
            return createContractAmendmentParams;
        }

        /**
         * Execute checkAutomatability request
         * @return ContractAmendmentAutomatableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ContractAmendmentAutomatableResponse execute() throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            ApiResponse<ContractAmendmentAutomatableResponse> localVarResp = checkAutomatabilityWithHttpInfo(createContractAmendmentParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkAutomatability request with HTTP info returned
         * @return ApiResponse&lt;ContractAmendmentAutomatableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractAmendmentAutomatableResponse> executeWithHttpInfo() throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            return checkAutomatabilityWithHttpInfo(createContractAmendmentParams);
        }

        /**
         * Execute checkAutomatability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractAmendmentAutomatableResponse> _callback) throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            return checkAutomatabilityAsync(createContractAmendmentParams, _callback);
        }
    }

    /**
     * Automatable Contract Amendment
     * Check if a contract amendment request is automatable. If the contract amendment request is automatable, then after submission, it will instantly amend the employee&#39;s contract and send them an updated document.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @return CheckAutomatabilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CheckAutomatabilityRequestBuilder checkAutomatability(String amendmentContractId, Object contractAmendment, String employmentId) throws IllegalArgumentException {
        if (amendmentContractId == null) throw new IllegalArgumentException("\"amendmentContractId\" is required but got null");
            

        if (contractAmendment == null) throw new IllegalArgumentException("\"contractAmendment\" is required but got null");
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new CheckAutomatabilityRequestBuilder(amendmentContractId, contractAmendment, employmentId);
    }
    private okhttp3.Call createRequestCall(CreateContractAmendmentParams createContractAmendmentParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContractAmendmentParams;

        // create path and map variables
        String localVarPath = "/v1/contract-amendments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(CreateContractAmendmentParams createContractAmendmentParams, final ApiCallback _callback) throws ApiException {
        return createRequestCall(createContractAmendmentParams, _callback);

    }


    private ApiResponse<ContractAmendmentResponse> createRequestWithHttpInfo(CreateContractAmendmentParams createContractAmendmentParams) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(createContractAmendmentParams, null);
        Type localVarReturnType = new TypeToken<ContractAmendmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(CreateContractAmendmentParams createContractAmendmentParams, final ApiCallback<ContractAmendmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(createContractAmendmentParams, _callback);
        Type localVarReturnType = new TypeToken<ContractAmendmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final String amendmentContractId;
        private final Object contractAmendment;
        private final String employmentId;

        private CreateRequestRequestBuilder(String amendmentContractId, Object contractAmendment, String employmentId) {
            this.amendmentContractId = amendmentContractId;
            this.contractAmendment = contractAmendment;
            this.employmentId = employmentId;
        }

        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            return createRequestCall(createContractAmendmentParams, _callback);
        }

        private CreateContractAmendmentParams buildBodyParams() {
            CreateContractAmendmentParams createContractAmendmentParams = new CreateContractAmendmentParams();
            createContractAmendmentParams.amendmentContractId(this.amendmentContractId);
            createContractAmendmentParams.contractAmendment(this.contractAmendment);
            createContractAmendmentParams.employmentId(this.employmentId);
            return createContractAmendmentParams;
        }

        /**
         * Execute createRequest request
         * @return ContractAmendmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ContractAmendmentResponse execute() throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            ApiResponse<ContractAmendmentResponse> localVarResp = createRequestWithHttpInfo(createContractAmendmentParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;ContractAmendmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractAmendmentResponse> executeWithHttpInfo() throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            return createRequestWithHttpInfo(createContractAmendmentParams);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractAmendmentResponse> _callback) throws ApiException {
            CreateContractAmendmentParams createContractAmendmentParams = buildBodyParams();
            return createRequestAsync(createContractAmendmentParams, _callback);
        }
    }

    /**
     * Create Contract Amendment
     * Creates a Contract Amendment request.  This endpoint requires and returns country-specific data. The exact required and returned fields will vary depending on which country the employment is in. To see the list of parameters for each country, see the **Show form schema** endpoint under the [Contract Amendments](https://gateway.remote.com/v1/docs/openapi.html) category.  Please note that the compliance requirements for each country are subject to change according to local laws. Given its continual updates, using Remote&#39;s [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) should be considered in order to avoid compliance issues and to have the latest version of a country requirements.  If you are using this endpoint to build an integration, make sure you are dynamically collecting or displaying the latest parameters for each country by querying the _\&quot;Show form schema\&quot;_ endpoint.  For more information on JSON Schemas, see the **How JSON Schemas work** documentation.  To learn how you can dynamically generate forms to display in your UI, see the documentation for the [json-schema-form](https://remote.com/resources/api/how-json-schemas-work) tool.  
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(String amendmentContractId, Object contractAmendment, String employmentId) throws IllegalArgumentException {
        if (amendmentContractId == null) throw new IllegalArgumentException("\"amendmentContractId\" is required but got null");
            

        if (contractAmendment == null) throw new IllegalArgumentException("\"contractAmendment\" is required but got null");
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new CreateRequestRequestBuilder(amendmentContractId, contractAmendment, employmentId);
    }
    private okhttp3.Call getFormSchemaCall(ContractAmendmentSchemaParams contractAmendmentSchemaParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractAmendmentSchemaParams;

        // create path and map variables
        String localVarPath = "/v1/contract-amendments/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormSchemaValidateBeforeCall(ContractAmendmentSchemaParams contractAmendmentSchemaParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractAmendmentSchemaParams' is set
        if (contractAmendmentSchemaParams == null) {
            throw new ApiException("Missing the required parameter 'contractAmendmentSchemaParams' when calling getFormSchema(Async)");
        }

        return getFormSchemaCall(contractAmendmentSchemaParams, _callback);

    }


    private ApiResponse<ContractAmendmentFormResponse> getFormSchemaWithHttpInfo(ContractAmendmentSchemaParams contractAmendmentSchemaParams) throws ApiException {
        okhttp3.Call localVarCall = getFormSchemaValidateBeforeCall(contractAmendmentSchemaParams, null);
        Type localVarReturnType = new TypeToken<ContractAmendmentFormResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFormSchemaAsync(ContractAmendmentSchemaParams contractAmendmentSchemaParams, final ApiCallback<ContractAmendmentFormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormSchemaValidateBeforeCall(contractAmendmentSchemaParams, _callback);
        Type localVarReturnType = new TypeToken<ContractAmendmentFormResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFormSchemaRequestBuilder {
        private final String countryCode;
        private final String employmentId;
        private String form;

        private GetFormSchemaRequestBuilder(String countryCode, String employmentId) {
            this.countryCode = countryCode;
            this.employmentId = employmentId;
        }

        /**
         * Set form
         * @param form Name of the desired form (optional)
         * @return GetFormSchemaRequestBuilder
         */
        public GetFormSchemaRequestBuilder form(String form) {
            this.form = form;
            return this;
        }
        
        /**
         * Build call for getFormSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractAmendmentSchemaParams contractAmendmentSchemaParams = buildBodyParams();
            return getFormSchemaCall(contractAmendmentSchemaParams, _callback);
        }

        private ContractAmendmentSchemaParams buildBodyParams() {
            ContractAmendmentSchemaParams contractAmendmentSchemaParams = new ContractAmendmentSchemaParams();
            contractAmendmentSchemaParams.countryCode(this.countryCode);
            contractAmendmentSchemaParams.employmentId(this.employmentId);
            if (this.form != null)
            contractAmendmentSchemaParams.form(ContractAmendmentSchemaParams.FormEnum.fromValue(this.form));
            return contractAmendmentSchemaParams;
        }

        /**
         * Execute getFormSchema request
         * @return ContractAmendmentFormResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ContractAmendmentFormResponse execute() throws ApiException {
            ContractAmendmentSchemaParams contractAmendmentSchemaParams = buildBodyParams();
            ApiResponse<ContractAmendmentFormResponse> localVarResp = getFormSchemaWithHttpInfo(contractAmendmentSchemaParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFormSchema request with HTTP info returned
         * @return ApiResponse&lt;ContractAmendmentFormResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractAmendmentFormResponse> executeWithHttpInfo() throws ApiException {
            ContractAmendmentSchemaParams contractAmendmentSchemaParams = buildBodyParams();
            return getFormSchemaWithHttpInfo(contractAmendmentSchemaParams);
        }

        /**
         * Execute getFormSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractAmendmentFormResponse> _callback) throws ApiException {
            ContractAmendmentSchemaParams contractAmendmentSchemaParams = buildBodyParams();
            return getFormSchemaAsync(contractAmendmentSchemaParams, _callback);
        }
    }

    /**
     * Show form schema
     * Returns the json schema of the &#x60;contract_amendment&#x60; form. This endpoint requires a company access token, as forms are dependent on certain properties of companies and their current employments. 
     * @param contractAmendmentSchemaParams Contract Amendment Form (required)
     * @return GetFormSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFormSchemaRequestBuilder getFormSchema(String countryCode, String employmentId) throws IllegalArgumentException {
        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            

        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        return new GetFormSchemaRequestBuilder(countryCode, employmentId);
    }
    private okhttp3.Call listRequestsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contract-amendments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRequestsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listRequestsCall(_callback);

    }


    private ApiResponse<ListContractAmendmentResponse> listRequestsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listRequestsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListContractAmendmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRequestsAsync(final ApiCallback<ListContractAmendmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRequestsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListContractAmendmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestsRequestBuilder {

        private ListRequestsRequestBuilder() {
        }

        /**
         * Build call for listRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRequestsCall(_callback);
        }


        /**
         * Execute listRequests request
         * @return ListContractAmendmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListContractAmendmentResponse execute() throws ApiException {
            ApiResponse<ListContractAmendmentResponse> localVarResp = listRequestsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRequests request with HTTP info returned
         * @return ApiResponse&lt;ListContractAmendmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListContractAmendmentResponse> executeWithHttpInfo() throws ApiException {
            return listRequestsWithHttpInfo();
        }

        /**
         * Execute listRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListContractAmendmentResponse> _callback) throws ApiException {
            return listRequestsAsync(_callback);
        }
    }

    /**
     * List Contract Amendment
     * List Contract Amendment requests.
     * @return ListRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestsRequestBuilder listRequests() throws IllegalArgumentException {
        return new ListRequestsRequestBuilder();
    }
    private okhttp3.Call showSingleRequestCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contract-amendments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showSingleRequestValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showSingleRequest(Async)");
        }

        return showSingleRequestCall(id, _callback);

    }


    private ApiResponse<ContractAmendmentResponse> showSingleRequestWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showSingleRequestValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ContractAmendmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showSingleRequestAsync(String id, final ApiCallback<ContractAmendmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showSingleRequestValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ContractAmendmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowSingleRequestRequestBuilder {
        private final String id;

        private ShowSingleRequestRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showSingleRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showSingleRequestCall(id, _callback);
        }


        /**
         * Execute showSingleRequest request
         * @return ContractAmendmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ContractAmendmentResponse execute() throws ApiException {
            ApiResponse<ContractAmendmentResponse> localVarResp = showSingleRequestWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showSingleRequest request with HTTP info returned
         * @return ApiResponse&lt;ContractAmendmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractAmendmentResponse> executeWithHttpInfo() throws ApiException {
            return showSingleRequestWithHttpInfo(id);
        }

        /**
         * Execute showSingleRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractAmendmentResponse> _callback) throws ApiException {
            return showSingleRequestAsync(id, _callback);
        }
    }

    /**
     * Show Contract Amendment
     * Show a single Contract Amendment request.
     * @param id Contract amendment request ID (required)
     * @return ShowSingleRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowSingleRequestRequestBuilder showSingleRequest(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowSingleRequestRequestBuilder(id);
    }
}
