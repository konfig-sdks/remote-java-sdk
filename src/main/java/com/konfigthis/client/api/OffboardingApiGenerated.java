/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOffboardingParams;
import com.konfigthis.client.model.ListOffboardingResponse;
import com.konfigthis.client.model.OffboardingResponse;
import com.konfigthis.client.model.TerminationDetailsParams;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OffboardingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OffboardingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OffboardingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createRequestCall(CreateOffboardingParams createOffboardingParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOffboardingParams;

        // create path and map variables
        String localVarPath = "/v1/offboardings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(CreateOffboardingParams createOffboardingParams, final ApiCallback _callback) throws ApiException {
        return createRequestCall(createOffboardingParams, _callback);

    }


    private ApiResponse<OffboardingResponse> createRequestWithHttpInfo(CreateOffboardingParams createOffboardingParams) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(createOffboardingParams, null);
        Type localVarReturnType = new TypeToken<OffboardingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(CreateOffboardingParams createOffboardingParams, final ApiCallback<OffboardingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(createOffboardingParams, _callback);
        Type localVarReturnType = new TypeToken<OffboardingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final String employmentId;
        private final TerminationDetailsParams terminationDetails;
        private final String type;

        private CreateRequestRequestBuilder(String employmentId, TerminationDetailsParams terminationDetails, String type) {
            this.employmentId = employmentId;
            this.terminationDetails = terminationDetails;
            this.type = type;
        }

        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOffboardingParams createOffboardingParams = buildBodyParams();
            return createRequestCall(createOffboardingParams, _callback);
        }

        private CreateOffboardingParams buildBodyParams() {
            CreateOffboardingParams createOffboardingParams = new CreateOffboardingParams();
            createOffboardingParams.employmentId(this.employmentId);
            createOffboardingParams.terminationDetails(this.terminationDetails);
            if (this.type != null)
            createOffboardingParams.type(CreateOffboardingParams.TypeEnum.fromValue(this.type));
            return createOffboardingParams;
        }

        /**
         * Execute createRequest request
         * @return OffboardingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OffboardingResponse execute() throws ApiException {
            CreateOffboardingParams createOffboardingParams = buildBodyParams();
            ApiResponse<OffboardingResponse> localVarResp = createRequestWithHttpInfo(createOffboardingParams);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;OffboardingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffboardingResponse> executeWithHttpInfo() throws ApiException {
            CreateOffboardingParams createOffboardingParams = buildBodyParams();
            return createRequestWithHttpInfo(createOffboardingParams);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffboardingResponse> _callback) throws ApiException {
            CreateOffboardingParams createOffboardingParams = buildBodyParams();
            return createRequestAsync(createOffboardingParams, _callback);
        }
    }

    /**
     * Create Offboarding
     * Creates an Offboarding request. 
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(String employmentId, TerminationDetailsParams terminationDetails, String type) throws IllegalArgumentException {
        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        if (terminationDetails == null) throw new IllegalArgumentException("\"terminationDetails\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateRequestRequestBuilder(employmentId, terminationDetails, type);
    }
    private okhttp3.Call listRequestsCall(String employmentId, String type, String includeConfidential, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/offboardings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_id", employmentId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (includeConfidential != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_confidential", includeConfidential));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRequestsValidateBeforeCall(String employmentId, String type, String includeConfidential, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listRequestsCall(employmentId, type, includeConfidential, page, pageSize, _callback);

    }


    private ApiResponse<ListOffboardingResponse> listRequestsWithHttpInfo(String employmentId, String type, String includeConfidential, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listRequestsValidateBeforeCall(employmentId, type, includeConfidential, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListOffboardingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRequestsAsync(String employmentId, String type, String includeConfidential, Integer page, Integer pageSize, final ApiCallback<ListOffboardingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRequestsValidateBeforeCall(employmentId, type, includeConfidential, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListOffboardingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestsRequestBuilder {
        private String employmentId;
        private String type;
        private String includeConfidential;
        private Integer page;
        private Integer pageSize;

        private ListRequestsRequestBuilder() {
        }

        /**
         * Set employmentId
         * @param employmentId Filter by Employment ID (optional)
         * @return ListRequestsRequestBuilder
         */
        public ListRequestsRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Set type
         * @param type Filter by offboarding type (optional)
         * @return ListRequestsRequestBuilder
         */
        public ListRequestsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set includeConfidential
         * @param includeConfidential By default, the results do not include confidential termination requests. Send &#x60;include_confidential&#x3D;true&#x60; to include confidential requests in the response.  (optional)
         * @return ListRequestsRequestBuilder
         */
        public ListRequestsRequestBuilder includeConfidential(String includeConfidential) {
            this.includeConfidential = includeConfidential;
            return this;
        }
        
        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListRequestsRequestBuilder
         */
        public ListRequestsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListRequestsRequestBuilder
         */
        public ListRequestsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRequestsCall(employmentId, type, includeConfidential, page, pageSize, _callback);
        }


        /**
         * Execute listRequests request
         * @return ListOffboardingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListOffboardingResponse execute() throws ApiException {
            ApiResponse<ListOffboardingResponse> localVarResp = listRequestsWithHttpInfo(employmentId, type, includeConfidential, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRequests request with HTTP info returned
         * @return ApiResponse&lt;ListOffboardingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListOffboardingResponse> executeWithHttpInfo() throws ApiException {
            return listRequestsWithHttpInfo(employmentId, type, includeConfidential, page, pageSize);
        }

        /**
         * Execute listRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListOffboardingResponse> _callback) throws ApiException {
            return listRequestsAsync(employmentId, type, includeConfidential, page, pageSize, _callback);
        }
    }

    /**
     * List Offboarding
     * Lists Offboarding requests.
     * @return ListRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestsRequestBuilder listRequests() throws IllegalArgumentException {
        return new ListRequestsRequestBuilder();
    }
    private okhttp3.Call showRequestCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/offboardings/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showRequestValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showRequest(Async)");
        }

        return showRequestCall(id, _callback);

    }


    private ApiResponse<OffboardingResponse> showRequestWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showRequestValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OffboardingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showRequestAsync(String id, final ApiCallback<OffboardingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showRequestValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OffboardingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowRequestRequestBuilder {
        private final String id;

        private ShowRequestRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showRequestCall(id, _callback);
        }


        /**
         * Execute showRequest request
         * @return OffboardingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public OffboardingResponse execute() throws ApiException {
            ApiResponse<OffboardingResponse> localVarResp = showRequestWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showRequest request with HTTP info returned
         * @return ApiResponse&lt;OffboardingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OffboardingResponse> executeWithHttpInfo() throws ApiException {
            return showRequestWithHttpInfo(id);
        }

        /**
         * Execute showRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OffboardingResponse> _callback) throws ApiException {
            return showRequestAsync(id, _callback);
        }
    }

    /**
     * Show Offboarding
     * Shows an Offboarding request.
     * @param id Offboarding request ID (required)
     * @return ShowRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowRequestRequestBuilder showRequest(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowRequestRequestBuilder(id);
    }
}
