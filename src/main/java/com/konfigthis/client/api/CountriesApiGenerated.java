/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CountriesResponse;
import com.konfigthis.client.model.CountryFormResponse;
import com.konfigthis.client.model.HolidaysResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CountriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CountriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CountriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFormSchemaCall(String countryCode, String form, String employmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries/{country_code}/{form}"
            .replace("{" + "country_code" + "}", localVarApiClient.escapeString(countryCode.toString()))
            .replace("{" + "form" + "}", localVarApiClient.escapeString(form.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employment_id", employmentId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormSchemaValidateBeforeCall(String countryCode, String form, String employmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getFormSchema(Async)");
        }

        // verify the required parameter 'form' is set
        if (form == null) {
            throw new ApiException("Missing the required parameter 'form' when calling getFormSchema(Async)");
        }

        return getFormSchemaCall(countryCode, form, employmentId, _callback);

    }


    private ApiResponse<CountryFormResponse> getFormSchemaWithHttpInfo(String countryCode, String form, String employmentId) throws ApiException {
        okhttp3.Call localVarCall = getFormSchemaValidateBeforeCall(countryCode, form, employmentId, null);
        Type localVarReturnType = new TypeToken<CountryFormResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFormSchemaAsync(String countryCode, String form, String employmentId, final ApiCallback<CountryFormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormSchemaValidateBeforeCall(countryCode, form, employmentId, _callback);
        Type localVarReturnType = new TypeToken<CountryFormResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFormSchemaRequestBuilder {
        private final String countryCode;
        private final String form;
        private String employmentId;

        private GetFormSchemaRequestBuilder(String countryCode, String form) {
            this.countryCode = countryCode;
            this.form = form;
        }

        /**
         * Set employmentId
         * @param employmentId Required for &#x60;contract_amendment&#x60; form (optional)
         * @return GetFormSchemaRequestBuilder
         */
        public GetFormSchemaRequestBuilder employmentId(String employmentId) {
            this.employmentId = employmentId;
            return this;
        }
        
        /**
         * Build call for getFormSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFormSchemaCall(countryCode, form, employmentId, _callback);
        }


        /**
         * Execute getFormSchema request
         * @return CountryFormResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CountryFormResponse execute() throws ApiException {
            ApiResponse<CountryFormResponse> localVarResp = getFormSchemaWithHttpInfo(countryCode, form, employmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFormSchema request with HTTP info returned
         * @return ApiResponse&lt;CountryFormResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountryFormResponse> executeWithHttpInfo() throws ApiException {
            return getFormSchemaWithHttpInfo(countryCode, form, employmentId);
        }

        /**
         * Execute getFormSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountryFormResponse> _callback) throws ApiException {
            return getFormSchemaAsync(countryCode, form, employmentId, _callback);
        }
    }

    /**
     * Show form schema
     * Returns the json schema of a supported form. Possible form names are: &#x60;&#x60;&#x60; - address_details  - administrative_details  - bank_account_details  - employment_basic_information  - billing_address_details  - contract_details  - emergency_contact  - employment_document_details  - personal_details  - pricing_plan_details   &#x60;&#x60;&#x60;  This endpoint requires a company access token, as forms are dependent on certain properties of companies and their current employments.  
     * @param countryCode Country code according to ISO 3-digit alphabetic codes (required)
     * @param form Name of the desired form (required)
     * @return GetFormSchemaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFormSchemaRequestBuilder getFormSchema(String countryCode, String form) throws IllegalArgumentException {
        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            

        if (form == null) throw new IllegalArgumentException("\"form\" is required but got null");
            

        return new GetFormSchemaRequestBuilder(countryCode, form);
    }
    private okhttp3.Call listAlphabeticallyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlphabeticallyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAlphabeticallyCall(_callback);

    }


    private ApiResponse<CountriesResponse> listAlphabeticallyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAlphabeticallyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAlphabeticallyAsync(final ApiCallback<CountriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAlphabeticallyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAlphabeticallyRequestBuilder {

        private ListAlphabeticallyRequestBuilder() {
        }

        /**
         * Build call for listAlphabetically
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAlphabeticallyCall(_callback);
        }


        /**
         * Execute listAlphabetically request
         * @return CountriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CountriesResponse execute() throws ApiException {
            ApiResponse<CountriesResponse> localVarResp = listAlphabeticallyWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAlphabetically request with HTTP info returned
         * @return ApiResponse&lt;CountriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountriesResponse> executeWithHttpInfo() throws ApiException {
            return listAlphabeticallyWithHttpInfo();
        }

        /**
         * Execute listAlphabetically request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountriesResponse> _callback) throws ApiException {
            return listAlphabeticallyAsync(_callback);
        }
    }

    /**
     * List countries
     * Returns a list of all countries that are supported by Remote API alphabetically ordered. The supported list accounts for creating employment with basic information and it does not imply fully onboarding employment via JSON Schema. 
     * @return ListAlphabeticallyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAlphabeticallyRequestBuilder listAlphabetically() throws IllegalArgumentException {
        return new ListAlphabeticallyRequestBuilder();
    }
    private okhttp3.Call listHolidaysByYearCall(String countryCode, String year, String countrySubdivisionCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries/{country_code}/holidays/{year}"
            .replace("{" + "country_code" + "}", localVarApiClient.escapeString(countryCode.toString()))
            .replace("{" + "year" + "}", localVarApiClient.escapeString(year.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countrySubdivisionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_subdivision_code", countrySubdivisionCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHolidaysByYearValidateBeforeCall(String countryCode, String year, String countrySubdivisionCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling listHolidaysByYear(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling listHolidaysByYear(Async)");
        }

        return listHolidaysByYearCall(countryCode, year, countrySubdivisionCode, _callback);

    }


    private ApiResponse<HolidaysResponse> listHolidaysByYearWithHttpInfo(String countryCode, String year, String countrySubdivisionCode) throws ApiException {
        okhttp3.Call localVarCall = listHolidaysByYearValidateBeforeCall(countryCode, year, countrySubdivisionCode, null);
        Type localVarReturnType = new TypeToken<HolidaysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listHolidaysByYearAsync(String countryCode, String year, String countrySubdivisionCode, final ApiCallback<HolidaysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHolidaysByYearValidateBeforeCall(countryCode, year, countrySubdivisionCode, _callback);
        Type localVarReturnType = new TypeToken<HolidaysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListHolidaysByYearRequestBuilder {
        private final String countryCode;
        private final String year;
        private String countrySubdivisionCode;

        private ListHolidaysByYearRequestBuilder(String countryCode, String year) {
            this.countryCode = countryCode;
            this.year = year;
        }

        /**
         * Set countrySubdivisionCode
         * @param countrySubdivisionCode Country subdivision code according to ISO 3166-2 codes (optional)
         * @return ListHolidaysByYearRequestBuilder
         */
        public ListHolidaysByYearRequestBuilder countrySubdivisionCode(String countrySubdivisionCode) {
            this.countrySubdivisionCode = countrySubdivisionCode;
            return this;
        }
        
        /**
         * Build call for listHolidaysByYear
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listHolidaysByYearCall(countryCode, year, countrySubdivisionCode, _callback);
        }


        /**
         * Execute listHolidaysByYear request
         * @return HolidaysResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public HolidaysResponse execute() throws ApiException {
            ApiResponse<HolidaysResponse> localVarResp = listHolidaysByYearWithHttpInfo(countryCode, year, countrySubdivisionCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listHolidaysByYear request with HTTP info returned
         * @return ApiResponse&lt;HolidaysResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidaysResponse> executeWithHttpInfo() throws ApiException {
            return listHolidaysByYearWithHttpInfo(countryCode, year, countrySubdivisionCode);
        }

        /**
         * Execute listHolidaysByYear request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidaysResponse> _callback) throws ApiException {
            return listHolidaysByYearAsync(countryCode, year, countrySubdivisionCode, _callback);
        }
    }

    /**
     * List all holidays of a country
     * List all holidays of a country for a specific year. Optionally, it can be filtered by country subdivision.
     * @param countryCode Country code according to ISO 3166-1 3-digit alphabetic codes (required)
     * @param year Year for the holidays (required)
     * @return ListHolidaysByYearRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListHolidaysByYearRequestBuilder listHolidaysByYear(String countryCode, String year) throws IllegalArgumentException {
        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
            

        return new ListHolidaysByYearRequestBuilder(countryCode, year);
    }
}
