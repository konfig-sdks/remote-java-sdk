/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Base64File;
import com.konfigthis.client.model.ExpenseResponse;
import java.io.File;
import com.konfigthis.client.model.ListExpenseResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.ParamsToCreateExpense;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpensesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpensesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExpensesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createApprovedExpenseCall(ParamsToCreateExpense paramsToCreateExpense, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paramsToCreateExpense;

        // create path and map variables
        String localVarPath = "/v1/expenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApprovedExpenseValidateBeforeCall(ParamsToCreateExpense paramsToCreateExpense, final ApiCallback _callback) throws ApiException {
        return createApprovedExpenseCall(paramsToCreateExpense, _callback);

    }


    private ApiResponse<ExpenseResponse> createApprovedExpenseWithHttpInfo(ParamsToCreateExpense paramsToCreateExpense) throws ApiException {
        okhttp3.Call localVarCall = createApprovedExpenseValidateBeforeCall(paramsToCreateExpense, null);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createApprovedExpenseAsync(ParamsToCreateExpense paramsToCreateExpense, final ApiCallback<ExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApprovedExpenseValidateBeforeCall(paramsToCreateExpense, _callback);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateApprovedExpenseRequestBuilder {
        private final String title;
        private final Integer amount;
        private final String currency;
        private final String employmentId;
        private final String expenseDate;
        private String category;
        private Base64File receipt;
        private List<Base64File> receipts;
        private LocalDate reviewedAt;
        private String reviewerId;
        private Integer taxAmount;
        private String timezone;

        private CreateApprovedExpenseRequestBuilder(String title, Integer amount, String currency, String employmentId, String expenseDate) {
            this.title = title;
            this.amount = amount;
            this.currency = currency;
            this.employmentId = employmentId;
            this.expenseDate = expenseDate;
        }

        /**
         * Set category
         * @param category Categories allowed for an expense (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set receipt
         * @param receipt  (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder receipt(Base64File receipt) {
            this.receipt = receipt;
            return this;
        }
        
        /**
         * Set receipts
         * @param receipts  (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder receipts(List<Base64File> receipts) {
            this.receipts = receipts;
            return this;
        }
        
        /**
         * Set reviewedAt
         * @param reviewedAt The date and time that the expense was reviewed in ISO8601 format. If not provided, it defaults to the current datetime. (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder reviewedAt(LocalDate reviewedAt) {
            this.reviewedAt = reviewedAt;
            return this;
        }
        
        /**
         * Set reviewerId
         * @param reviewerId If the person reviewing the expense is a user in Remote, you can provide its user id for this field. If a value is not provided, defaults to the user that generated the API token. (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder reviewerId(String reviewerId) {
            this.reviewerId = reviewerId;
            return this;
        }
        
        /**
         * Set taxAmount
         * @param taxAmount  (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder taxAmount(Integer taxAmount) {
            this.taxAmount = taxAmount;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone [TZ identifier](https://www.iana.org/time-zones) (optional)
         * @return CreateApprovedExpenseRequestBuilder
         */
        public CreateApprovedExpenseRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Build call for createApprovedExpense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ParamsToCreateExpense paramsToCreateExpense = buildBodyParams();
            return createApprovedExpenseCall(paramsToCreateExpense, _callback);
        }

        private ParamsToCreateExpense buildBodyParams() {
            ParamsToCreateExpense paramsToCreateExpense = new ParamsToCreateExpense();
            paramsToCreateExpense.title(this.title);
            paramsToCreateExpense.amount(this.amount);
            if (this.category != null)
            paramsToCreateExpense.category(ParamsToCreateExpense.CategoryEnum.fromValue(this.category));
            paramsToCreateExpense.currency(this.currency);
            paramsToCreateExpense.employmentId(this.employmentId);
            paramsToCreateExpense.expenseDate(this.expenseDate);
            paramsToCreateExpense.receipt(this.receipt);
            paramsToCreateExpense.receipts(this.receipts);
            paramsToCreateExpense.reviewedAt(this.reviewedAt);
            paramsToCreateExpense.reviewerId(this.reviewerId);
            paramsToCreateExpense.taxAmount(this.taxAmount);
            paramsToCreateExpense.timezone(this.timezone);
            return paramsToCreateExpense;
        }

        /**
         * Execute createApprovedExpense request
         * @return ExpenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseResponse execute() throws ApiException {
            ParamsToCreateExpense paramsToCreateExpense = buildBodyParams();
            ApiResponse<ExpenseResponse> localVarResp = createApprovedExpenseWithHttpInfo(paramsToCreateExpense);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createApprovedExpense request with HTTP info returned
         * @return ApiResponse&lt;ExpenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseResponse> executeWithHttpInfo() throws ApiException {
            ParamsToCreateExpense paramsToCreateExpense = buildBodyParams();
            return createApprovedExpenseWithHttpInfo(paramsToCreateExpense);
        }

        /**
         * Execute createApprovedExpense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseResponse> _callback) throws ApiException {
            ParamsToCreateExpense paramsToCreateExpense = buildBodyParams();
            return createApprovedExpenseAsync(paramsToCreateExpense, _callback);
        }
    }

    /**
     * Create expense
     * Creates an **approved** expense
     * @return CreateApprovedExpenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateApprovedExpenseRequestBuilder createApprovedExpense(String title, Integer amount, String currency, String employmentId, String expenseDate) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (employmentId == null) throw new IllegalArgumentException("\"employmentId\" is required but got null");
            

        if (expenseDate == null) throw new IllegalArgumentException("\"expenseDate\" is required but got null");
            

        return new CreateApprovedExpenseRequestBuilder(title, amount, currency, employmentId, expenseDate);
    }
    private okhttp3.Call downloadReceiptCall(String expenseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/{expense_id}/receipt"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "image/heic",
            "image/jpeg",
            "image/jpg",
            "image/png",
            "image/webp",
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadReceiptValidateBeforeCall(String expenseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling downloadReceipt(Async)");
        }

        return downloadReceiptCall(expenseId, _callback);

    }


    private ApiResponse<File> downloadReceiptWithHttpInfo(String expenseId) throws ApiException {
        okhttp3.Call localVarCall = downloadReceiptValidateBeforeCall(expenseId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadReceiptAsync(String expenseId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadReceiptValidateBeforeCall(expenseId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadReceiptRequestBuilder {
        private final String expenseId;

        private DownloadReceiptRequestBuilder(String expenseId) {
            this.expenseId = expenseId;
        }

        /**
         * Build call for downloadReceipt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadReceiptCall(expenseId, _callback);
        }


        /**
         * Execute downloadReceipt request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = downloadReceiptWithHttpInfo(expenseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadReceipt request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return downloadReceiptWithHttpInfo(expenseId);
        }

        /**
         * Execute downloadReceipt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return downloadReceiptAsync(expenseId, _callback);
        }
    }

    /**
     * Download a receipt
     *   Downloads an expense receipt.    Deprecated since late February 2024 in favour of **[Download a receipt by id](https://gateway.remote.com/v1/docs/openapi.html)** endpoint. 
     * @param expenseId The expense ID (required)
     * @return DownloadReceiptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DownloadReceiptRequestBuilder downloadReceipt(String expenseId) throws IllegalArgumentException {
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
            

        return new DownloadReceiptRequestBuilder(expenseId);
    }
    private okhttp3.Call downloadReceiptByIdCall(String expenseId, String receiptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/{expense_id}/receipts/{receipt_id}"
            .replace("{" + "expense_id" + "}", localVarApiClient.escapeString(expenseId.toString()))
            .replace("{" + "receipt_id" + "}", localVarApiClient.escapeString(receiptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "image/heic",
            "image/jpeg",
            "image/jpg",
            "image/png",
            "image/webp",
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadReceiptByIdValidateBeforeCall(String expenseId, String receiptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expenseId' is set
        if (expenseId == null) {
            throw new ApiException("Missing the required parameter 'expenseId' when calling downloadReceiptById(Async)");
        }

        // verify the required parameter 'receiptId' is set
        if (receiptId == null) {
            throw new ApiException("Missing the required parameter 'receiptId' when calling downloadReceiptById(Async)");
        }

        return downloadReceiptByIdCall(expenseId, receiptId, _callback);

    }


    private ApiResponse<File> downloadReceiptByIdWithHttpInfo(String expenseId, String receiptId) throws ApiException {
        okhttp3.Call localVarCall = downloadReceiptByIdValidateBeforeCall(expenseId, receiptId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadReceiptByIdAsync(String expenseId, String receiptId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadReceiptByIdValidateBeforeCall(expenseId, receiptId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadReceiptByIdRequestBuilder {
        private final String expenseId;
        private final String receiptId;

        private DownloadReceiptByIdRequestBuilder(String expenseId, String receiptId) {
            this.expenseId = expenseId;
            this.receiptId = receiptId;
        }

        /**
         * Build call for downloadReceiptById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadReceiptByIdCall(expenseId, receiptId, _callback);
        }


        /**
         * Execute downloadReceiptById request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = downloadReceiptByIdWithHttpInfo(expenseId, receiptId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadReceiptById request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return downloadReceiptByIdWithHttpInfo(expenseId, receiptId);
        }

        /**
         * Execute downloadReceiptById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return downloadReceiptByIdAsync(expenseId, receiptId, _callback);
        }
    }

    /**
     * Download a receipt by id
     * Download a receipt by id.
     * @param expenseId The expense ID (required)
     * @param receiptId The receipt ID (required)
     * @return DownloadReceiptByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DownloadReceiptByIdRequestBuilder downloadReceiptById(String expenseId, String receiptId) throws IllegalArgumentException {
        if (expenseId == null) throw new IllegalArgumentException("\"expenseId\" is required but got null");
            

        if (receiptId == null) throw new IllegalArgumentException("\"receiptId\" is required but got null");
            

        return new DownloadReceiptByIdRequestBuilder(expenseId, receiptId);
    }
    private okhttp3.Call listRecordsCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecordsValidateBeforeCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listRecordsCall(page, pageSize, _callback);

    }


    private ApiResponse<ListExpenseResponse> listRecordsWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listRecordsValidateBeforeCall(page, pageSize, null);
        Type localVarReturnType = new TypeToken<ListExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRecordsAsync(Integer page, Integer pageSize, final ApiCallback<ListExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecordsValidateBeforeCall(page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ListExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRecordsRequestBuilder {
        private Integer page;
        private Integer pageSize;

        private ListRecordsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Starts fetching records after the given page (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize Change the amount of records returned per page, defaults to 20, limited to 100 (optional)
         * @return ListRecordsRequestBuilder
         */
        public ListRecordsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRecordsCall(page, pageSize, _callback);
        }


        /**
         * Execute listRecords request
         * @return ListExpenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ListExpenseResponse execute() throws ApiException {
            ApiResponse<ListExpenseResponse> localVarResp = listRecordsWithHttpInfo(page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRecords request with HTTP info returned
         * @return ApiResponse&lt;ListExpenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListExpenseResponse> executeWithHttpInfo() throws ApiException {
            return listRecordsWithHttpInfo(page, pageSize);
        }

        /**
         * Execute listRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListExpenseResponse> _callback) throws ApiException {
            return listRecordsAsync(page, pageSize, _callback);
        }
    }

    /**
     * List expenses
     * Lists all expenses records
     * @return ListRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRecordsRequestBuilder listRecords() throws IllegalArgumentException {
        return new ListRecordsRequestBuilder();
    }
    private okhttp3.Call showRecordCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showRecordValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showRecord(Async)");
        }

        return showRecordCall(id, _callback);

    }


    private ApiResponse<ExpenseResponse> showRecordWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = showRecordValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showRecordAsync(String id, final ApiCallback<ExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showRecordValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowRecordRequestBuilder {
        private final String id;

        private ShowRecordRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for showRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showRecordCall(id, _callback);
        }


        /**
         * Execute showRecord request
         * @return ExpenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseResponse execute() throws ApiException {
            ApiResponse<ExpenseResponse> localVarResp = showRecordWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showRecord request with HTTP info returned
         * @return ApiResponse&lt;ExpenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseResponse> executeWithHttpInfo() throws ApiException {
            return showRecordWithHttpInfo(id);
        }

        /**
         * Execute showRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseResponse> _callback) throws ApiException {
            return showRecordAsync(id, _callback);
        }
    }

    /**
     * Show expense
     * Shows a single expense record
     * @param id Expense ID (required)
     * @return ShowRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ShowRecordRequestBuilder showRecord(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ShowRecordRequestBuilder(id);
    }
    private okhttp3.Call updateExpenseCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/expenses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExpenseValidateBeforeCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateExpense(Async)");
        }

        return updateExpenseCall(id, body, _callback);

    }


    private ApiResponse<ExpenseResponse> updateExpenseWithHttpInfo(String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateExpenseValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExpenseAsync(String id, Object body, final ApiCallback<ExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExpenseValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExpenseRequestBuilder {
        private final String id;
        private Object body;

        private UpdateExpenseRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set body
         * @param body Expenses (optional)
         * @return UpdateExpenseRequestBuilder
         */
        public UpdateExpenseRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateExpense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateExpenseCall(id, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateExpense request
         * @return ExpenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<ExpenseResponse> localVarResp = updateExpenseWithHttpInfo(id, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExpense request with HTTP info returned
         * @return ApiResponse&lt;ExpenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateExpenseWithHttpInfo(id, body);
        }

        /**
         * Execute updateExpense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateExpenseAsync(id, body, _callback);
        }
    }

    /**
     * Update an expense
     * Updates an expense
     * @param id Expense ID (required)
     * @return UpdateExpenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExpenseRequestBuilder updateExpense(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateExpenseRequestBuilder(id);
    }
    private okhttp3.Call updateRecordCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/expenses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRecord(Async)");
        }

        return updateRecordCall(id, body, _callback);

    }


    private ApiResponse<ExpenseResponse> updateRecordWithHttpInfo(String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecordAsync(String id, Object body, final ApiCallback<ExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<ExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecordRequestBuilder {
        private final String id;
        private Object body;

        private UpdateRecordRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set body
         * @param body Expenses (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateRecordCall(id, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateRecord request
         * @return ExpenseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ExpenseResponse execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<ExpenseResponse> localVarResp = updateRecordWithHttpInfo(id, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecord request with HTTP info returned
         * @return ApiResponse&lt;ExpenseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpenseResponse> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateRecordWithHttpInfo(id, body);
        }

        /**
         * Execute updateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpenseResponse> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateRecordAsync(id, body, _callback);
        }
    }

    /**
     * Update an expense
     * Updates an expense
     * @param id Expense ID (required)
     * @return UpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecordRequestBuilder updateRecord(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateRecordRequestBuilder(id);
    }
}
