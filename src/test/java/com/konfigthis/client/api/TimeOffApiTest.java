/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateApprovedTimeoffParams;
import com.konfigthis.client.model.ListTimeoffResponse;
import com.konfigthis.client.model.ListTimeoffTypesResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TimeoffDaysParams;
import com.konfigthis.client.model.TimeoffDocumentParams;
import com.konfigthis.client.model.TimeoffResponse;
import com.konfigthis.client.model.TimeoffStatus;
import com.konfigthis.client.model.TimeoffType;
import com.konfigthis.client.model.UpdateApprovedTimeoffParams;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeOffApi
 */
@Disabled
public class TimeOffApiTest {

    private static TimeOffApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeOffApi(apiClient);
    }

    /**
     * Show Time Off
     *
     * Shows a single Time Off record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String id = null;
        TimeoffResponse response = api.getRecord(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Off
     *
     * Lists all Time Off records.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordsTest() throws ApiException {
        String employmentId = null;
        TimeoffType timeoffType = null;
        TimeoffStatus status = null;
        String order = null;
        String sortBy = null;
        Integer page = null;
        Integer pageSize = null;
        ListTimeoffResponse response = api.listRecords()
                .employmentId(employmentId)
                .timeoffType(timeoffType)
                .status(status)
                .order(order)
                .sortBy(sortBy)
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Off Types
     *
     * Lists all time off types that can be used for the &#x60;timeoff_type&#x60; parameter
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTypesTest() throws ApiException {
        ListTimeoffTypesResponse response = api.listTypes()
                .execute();
        // TODO: test validations
    }

    /**
     * Create Time Off
     *
     * Creates a Time Off record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordCreateTest() throws ApiException {
        OffsetDateTime approvedAt = null;
        String approverId = null;
        String status = null;
        TimeoffDocumentParams document = null;
        String employmentId = null;
        String endDate = null;
        String notes = null;
        String startDate = null;
        List<TimeoffDaysParams> timeoffDays = null;
        TimeoffType timeoffType = null;
        String timezone = null;
        TimeoffResponse response = api.recordCreate(approvedAt, approverId, status)
                .document(document)
                .employmentId(employmentId)
                .endDate(endDate)
                .notes(notes)
                .startDate(startDate)
                .timeoffDays(timeoffDays)
                .timeoffType(timeoffType)
                .timezone(timezone)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Time Off
     *
     * Updates a Time Off record. This endpoint can also be used for cancelling a time off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecordTest() throws ApiException {
        String cancelReason = null;
        String editReason = null;
        String id = null;
        OffsetDateTime approvedAt = null;
        String approverId = null;
        TimeoffDocumentParams document = null;
        LocalDate endDate = null;
        String notes = null;
        LocalDate startDate = null;
        String status = null;
        List<TimeoffDaysParams> timeoffDays = null;
        TimeoffType timeoffType = null;
        String timezone = null;
        TimeoffResponse response = api.updateRecord(cancelReason, editReason, id)
                .approvedAt(approvedAt)
                .approverId(approverId)
                .document(document)
                .endDate(endDate)
                .notes(notes)
                .startDate(startDate)
                .status(status)
                .timeoffDays(timeoffDays)
                .timeoffType(timeoffType)
                .timezone(timezone)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Time Off
     *
     * Updates a Time Off record. This endpoint can also be used for cancelling a time off.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecord_0Test() throws ApiException {
        String cancelReason = null;
        String editReason = null;
        String id = null;
        OffsetDateTime approvedAt = null;
        String approverId = null;
        TimeoffDocumentParams document = null;
        LocalDate endDate = null;
        String notes = null;
        LocalDate startDate = null;
        String status = null;
        List<TimeoffDaysParams> timeoffDays = null;
        TimeoffType timeoffType = null;
        String timezone = null;
        TimeoffResponse response = api.updateRecord_0(cancelReason, editReason, id)
                .approvedAt(approvedAt)
                .approverId(approverId)
                .document(document)
                .endDate(endDate)
                .notes(notes)
                .startDate(startDate)
                .status(status)
                .timeoffDays(timeoffDays)
                .timeoffType(timeoffType)
                .timezone(timezone)
                .execute();
        // TODO: test validations
    }

}
