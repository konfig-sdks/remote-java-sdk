/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateOffboardingParams;
import com.konfigthis.client.model.ListOffboardingResponse;
import com.konfigthis.client.model.OffboardingResponse;
import com.konfigthis.client.model.TerminationDetailsParams;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OffboardingApi
 */
@Disabled
public class OffboardingApiTest {

    private static OffboardingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OffboardingApi(apiClient);
    }

    /**
     * Create Offboarding
     *
     * Creates an Offboarding request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRequestTest() throws ApiException {
        String employmentId = null;
        TerminationDetailsParams terminationDetails = null;
        String type = null;
        OffboardingResponse response = api.createRequest(employmentId, terminationDetails, type)
                .execute();
        // TODO: test validations
    }

    /**
     * List Offboarding
     *
     * Lists Offboarding requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRequestsTest() throws ApiException {
        String employmentId = null;
        String type = null;
        String includeConfidential = null;
        Integer page = null;
        Integer pageSize = null;
        ListOffboardingResponse response = api.listRequests()
                .employmentId(employmentId)
                .type(type)
                .includeConfidential(includeConfidential)
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Show Offboarding
     *
     * Shows an Offboarding request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showRequestTest() throws ApiException {
        String id = null;
        OffboardingResponse response = api.showRequest(id)
                .execute();
        // TODO: test validations
    }

}
