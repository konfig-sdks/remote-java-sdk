/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CompaniesResponse;
import com.konfigthis.client.model.CompanyCreationResponse;
import com.konfigthis.client.model.CompanyResponse;
import com.konfigthis.client.model.CreateCompanyParams;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdateCompanyParams;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompaniesApi
 */
@Disabled
public class CompaniesApiTest {

    private static CompaniesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompaniesApi(apiClient);
    }

    /**
     * Create a company
     *
     *   Creates a new company.    ### Creating a company with only the required request body parameters   When you call this endpoint and omit all the optional parameters in the request body,   the following resources get created upon a successful response:   * A new company with status &#x60;pending&#x60;.   * A company owner for the new company with status &#x60;initiated&#x60;.    See the [update a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) for   more details on how to get your company and its owner to &#x60;active&#x60; status.    If you&#39;d like to create a company and its owner with &#x60;active&#x60; status in a single request,   please provide the optional &#x60;address_details&#x60; parameter as well.    ### Accepting the Terms of Service    A required step for creating a company in Remote is to accept our Terms of Service (ToS).    Company managers need to be aware of our Terms of Service and Privacy Policy,   hence **it&#39;s the responsibility of our partners to advise and ensure company managers read   and accept the ToS**. The terms have to be accepted only once, before creating a company,   and the Remote API will collect the acceptance timestamp as its confirmation.    To ensure users read the most recent version of Remote&#39;s Terms of Service, their **acceptance   must be done within the last fifteen minutes prior the company creation action**.    To retrieve this information, partners can provide an element with any text and a description   explaining that by performing that action they are accepting Remote&#39;s Term of Service. For   instance, the partner can add a checkbox or a \&quot;Create Remote Account\&quot; button followed by a   description saying \&quot;By creating an account, you agree to   [Remote&#39;s Terms of Service](https://remote.com/terms-of-service). Also see Remote&#39;s   [Privacy Policy](https://remote.com/privacy-policy)\&quot;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCompanyTest() throws ApiException {
        String companyOwnerEmail = null;
        String companyOwnerName = null;
        String countryCode = null;
        String desiredCurrency = null;
        String name = null;
        OffsetDateTime termsOfServiceAcceptedAt = null;
        Object addressDetails = null;
        Object bankAccountDetails = null;
        String emailDomain = null;
        String externalId = null;
        String phoneNumber = null;
        String registrationNumber = null;
        String taxNumber = null;
        String action = null;
        CompanyCreationResponse response = api.createNewCompany(companyOwnerEmail, companyOwnerName, countryCode, desiredCurrency, name, termsOfServiceAcceptedAt)
                .addressDetails(addressDetails)
                .bankAccountDetails(bankAccountDetails)
                .emailDomain(emailDomain)
                .externalId(externalId)
                .phoneNumber(phoneNumber)
                .registrationNumber(registrationNumber)
                .taxNumber(taxNumber)
                .action(action)
                .execute();
        // TODO: test validations
    }

    /**
     * List all companies
     *
     * List all companies that authorized your integration to act on their behalf. In other words, these are all the companies that your integration can manage. Any company that has completed the authorization flow for your integration will be included in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        CompaniesResponse response = api.listAll()
                .execute();
        // TODO: test validations
    }

    /**
     * Show a company
     *
     * Given an ID, shows a company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showCompanyTest() throws ApiException {
        String companyId = null;
        CompanyResponse response = api.showCompany(companyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a company
     *
     * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to &#x60;active&#x60; status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to &#x60;active&#x60; and the company onboarding will be marked as \&quot;completed\&quot;.  The following constitutes a company with \&quot;all the necessary data\&quot;: * Complete &#x60;address&#x60;, with valid &#x60;address&#x60;, &#x60;postal_code&#x60;, &#x60;country&#x60; and &#x60;state&#x60; parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company &#x60;tax_number&#x60; or &#x60;registration_number&#x60; is not nil * Company &#x60;name&#x60; is not nil (already required when creating the company) * Company has a &#x60;desired_currency&#x60; in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompanyTest() throws ApiException {
        String companyId = null;
        Object addressDetails = null;
        Object bankAccountDetails = null;
        String countryCode = null;
        String desiredCurrency = null;
        String name = null;
        String phoneNumber = null;
        String registrationNumber = null;
        String taxNumber = null;
        CompanyResponse response = api.updateCompany(companyId)
                .addressDetails(addressDetails)
                .bankAccountDetails(bankAccountDetails)
                .countryCode(countryCode)
                .desiredCurrency(desiredCurrency)
                .name(name)
                .phoneNumber(phoneNumber)
                .registrationNumber(registrationNumber)
                .taxNumber(taxNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a company
     *
     * Given an ID and a request object with new information, updates a company.  ### Getting a company and its owner to &#x60;active&#x60; status If you created a company using the [create a company endpoint](https://gateway.remote.com/v1/docs/openapi.html) without all the required request body parameters, you can use this endpoint to provide the missing data. Once the company and its owner have all the necessary data, both their statuses will be set to &#x60;active&#x60; and the company onboarding will be marked as \&quot;completed\&quot;.  The following constitutes a company with \&quot;all the necessary data\&quot;: * Complete &#x60;address&#x60;, with valid &#x60;address&#x60;, &#x60;postal_code&#x60;, &#x60;country&#x60; and &#x60;state&#x60; parameters (Varies by country. Use the [show form schema endpoint](https://gateway.remote.com/v1/docs/openapi.html) to see which address parameters are required). * Company &#x60;tax_number&#x60; or &#x60;registration_number&#x60; is not nil * Company &#x60;name&#x60; is not nil (already required when creating the company) * Company has a &#x60;desired_currency&#x60; in their bank account (already required when creating the company) * Company has accepted terms of service (already required when creating the company) 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompany_0Test() throws ApiException {
        String companyId = null;
        Object addressDetails = null;
        Object bankAccountDetails = null;
        String countryCode = null;
        String desiredCurrency = null;
        String name = null;
        String phoneNumber = null;
        String registrationNumber = null;
        String taxNumber = null;
        CompanyResponse response = api.updateCompany_0(companyId)
                .addressDetails(addressDetails)
                .bankAccountDetails(bankAccountDetails)
                .countryCode(countryCode)
                .desiredCurrency(desiredCurrency)
                .name(name)
                .phoneNumber(phoneNumber)
                .registrationNumber(registrationNumber)
                .taxNumber(taxNumber)
                .execute();
        // TODO: test validations
    }

}
