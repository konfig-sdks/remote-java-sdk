/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CompanyDepartmentCreatedResponse;
import com.konfigthis.client.model.CreateCompanyDepartmentParams;
import com.konfigthis.client.model.ListCompanyDepartmentsPaginatedResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompanyDepartmentApi
 */
@Disabled
public class CompanyDepartmentApiTest {

    private static CompanyDepartmentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompanyDepartmentApi(apiClient);
    }

    /**
     * Create New Department
     *
     * Creates a new department in the specified company. Department names may be non-unique and must be non-empty with no more than 255 characters (Unicode code points).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDepartmentTest() throws ApiException {
        String companyId = null;
        String name = null;
        CompanyDepartmentCreatedResponse response = api.createNewDepartment(companyId, name)
                .execute();
        // TODO: test validations
    }

    /**
     * List Company Departments
     *
     * Lists all departments for the authorized company specified in the request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String companyId = null;
        Boolean paginate = null;
        Integer page = null;
        Integer pageSize = null;
        ListCompanyDepartmentsPaginatedResponse response = api.list(companyId)
                .paginate(paginate)
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

}
