/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AmountTaxType;
import com.konfigthis.client.model.CreateRecurringIncentiveParams;
import com.konfigthis.client.model.DeleteRecurringIncentiveResponse;
import com.konfigthis.client.model.ListRecurringIncentivesResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.RecurringIncentiveResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecurringIncentivesApi
 */
@Disabled
public class RecurringIncentivesApiTest {

    private static RecurringIncentivesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RecurringIncentivesApi(apiClient);
    }

    /**
     * Create Recurring Incentive
     *
     * Create a Recurring Incentive, that is, a monthly paid incentive.  Incentives use the currency of the employment specified provided in the &#x60;employment_id&#x60; field. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMonthlyIncentiveTest() throws ApiException {
        Integer amount = null;
        AmountTaxType amountTaxType = null;
        LocalDate effectiveDate = null;
        String employmentId = null;
        String type = null;
        String note = null;
        Integer durationInMonths = null;
        RecurringIncentiveResponse response = api.createMonthlyIncentive(amount, amountTaxType, effectiveDate, employmentId, type)
                .note(note)
                .durationInMonths(durationInMonths)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Recurring Incentive
     *
     * Delete a Recurring Incentive, that is, a monthly paid incentive.  Internally, Remote schedules upcoming incentives. As such, when you attempt to delete a recurring incentive, Remote will **ONLY** delete scheduled incentives with the &#x60;pending&#x60; status.  Incentives payments that are already scheduled and cannot be deleted will be included in the response, in case you need to reference them. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScheduledTest() throws ApiException {
        String id = null;
        DeleteRecurringIncentiveResponse response = api.deleteScheduled(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Recurring Incentive
     *
     * List all Recurring Incentives of a company. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIncentivesTest() throws ApiException {
        String status = null;
        String type = null;
        String note = null;
        Integer page = null;
        Integer pageSize = null;
        ListRecurringIncentivesResponse response = api.listIncentives()
                .status(status)
                .type(type)
                .note(note)
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

}
