/*
 * Remote API
 * Talent is everywhere. Opportunity is not. Remote's mission is to create opportunity everywhere, empowering employers to find and hire the best talent, and enabling individuals to build financial and personal freedom.   Remote is a Global HR Platform that helps companies hire, manage, and pay their entire team â€” and more effectively compete in the modern global economy through our comprehensive set of core solutions including, HRIS, payroll, international employment, contractor management, and more.   Whether you're just starting your global journey, or looking to optimize your existing operations, sign up or book a demo - and see how Remote makes global HR simple.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Base64File;
import com.konfigthis.client.model.ExpenseResponse;
import java.io.File;
import com.konfigthis.client.model.ListExpenseResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.ParamsToCreateExpense;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpensesApi
 */
@Disabled
public class ExpensesApiTest {

    private static ExpensesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExpensesApi(apiClient);
    }

    /**
     * Create expense
     *
     * Creates an **approved** expense
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApprovedExpenseTest() throws ApiException {
        String title = null;
        Integer amount = null;
        String currency = null;
        String employmentId = null;
        String expenseDate = null;
        String category = null;
        Base64File receipt = null;
        List<Base64File> receipts = null;
        LocalDate reviewedAt = null;
        String reviewerId = null;
        Integer taxAmount = null;
        String timezone = null;
        ExpenseResponse response = api.createApprovedExpense(title, amount, currency, employmentId, expenseDate)
                .category(category)
                .receipt(receipt)
                .receipts(receipts)
                .reviewedAt(reviewedAt)
                .reviewerId(reviewerId)
                .taxAmount(taxAmount)
                .timezone(timezone)
                .execute();
        // TODO: test validations
    }

    /**
     * Download a receipt
     *
     *   Downloads an expense receipt.    Deprecated since late February 2024 in favour of **[Download a receipt by id](https://gateway.remote.com/v1/docs/openapi.html)** endpoint. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadReceiptTest() throws ApiException {
        String expenseId = null;
        File response = api.downloadReceipt(expenseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download a receipt by id
     *
     * Download a receipt by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadReceiptByIdTest() throws ApiException {
        String expenseId = null;
        String receiptId = null;
        File response = api.downloadReceiptById(expenseId, receiptId)
                .execute();
        // TODO: test validations
    }

    /**
     * List expenses
     *
     * Lists all expenses records
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRecordsTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        ListExpenseResponse response = api.listRecords()
                .page(page)
                .pageSize(pageSize)
                .execute();
        // TODO: test validations
    }

    /**
     * Show expense
     *
     * Shows a single expense record
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showRecordTest() throws ApiException {
        String id = null;
        ExpenseResponse response = api.showRecord(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an expense
     *
     * Updates an expense
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExpenseTest() throws ApiException {
        String id = null;
        ExpenseResponse response = api.updateExpense(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an expense
     *
     * Updates an expense
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecordTest() throws ApiException {
        String id = null;
        ExpenseResponse response = api.updateRecord(id)
                .execute();
        // TODO: test validations
    }

}
